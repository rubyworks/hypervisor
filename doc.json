{"(metadata)":{"!":"metadata","name":"fish-sampler","version":"1.0.0","title":"Fish Sampler","summary":null,"description":"RDocodile is the RDoc Beautification project. Is houses a number of project\nrepositories","contact":null,"resources":{"home":"http://rubyworks.github.com/fish","work":"http://github.com/rubyworks/fish","blog":"http://rubyworks.github.com/","mail":"http://googlegroups.com/group/rubyworks-mailinglist"},"markup":"rdoc"},"FishSampler::DEFALULT_QUALITIES":{"!":"constant","key":"FishSampler::DEFALULT_QUALITIES","name":"DEFALULT_QUALITIES","namespace":"FishSampler","comment":"Every fish is scaly.","value":"[ :scaly ]"},"FishSampler":{"!":"module","key":"FishSampler","name":"FishSampler","namespace":"","includes":[],"comment":"= Fish Sampler\n\nLet us review... Red fish, Blue fish, One fish, Two fish...","constants":["FishSampler::DEFALULT_QUALITIES"],"modules":["FishSampler::ManEater"],"classes":["FishSampler::Fish","FishSampler::RedFish","FishSampler::BlueFish","FishSampler::OldFish","FishSampler::NewFish","FishSampler::Shark"],"functions":[],"methods":[],"attributes":[],"class_attributes":["FishSampler.fishy_active"],"files":["lib/fish.rb"]},"FishSampler::BlueFish":{"!":"class","key":"FishSampler::BlueFish","name":"BlueFish","namespace":"FishSampler","includes":[],"comment":"= Blue Fish\n\nDespite their name most Bluefish aren't very blue.","constants":[],"modules":[],"classes":[],"functions":[],"methods":["FishSampler::BlueFish#initialize_qualities"],"attributes":["FishSampler::BlueFish#qualities"],"class_attributes":[],"files":["lib/fish.rb"],"superclass":"Fish"},"FishSampler::Fish":{"!":"class","key":"FishSampler::Fish","name":"Fish","namespace":"FishSampler","includes":[],"comment":"A fish is any aquatic vertebrate animal that is typically ectothermic (or cold-blooded),\ncovered with scales, and equipped with two sets of paired fins and several unpaired fins.\nFish are abundant in the sea and in fresh water, with species being known from mountain\nstreams (e.g., char and gudgeon) as well as in the deepest depths of the ocean\n(e.g., gulpers and anglerfish).","constants":[],"modules":[],"classes":[],"functions":["FishSampler::Fish.new"],"methods":["FishSampler::Fish#initialize_qualities"],"attributes":["FishSampler::Fish#qualities","FishSampler::Fish#properties"],"class_attributes":[],"files":["lib/fish.rb"],"superclass":"Object"},"FishSampler::ManEater":{"!":"module","key":"FishSampler::ManEater","name":"ManEater","namespace":"FishSampler","includes":[],"comment":"Some fish will eat a man!","constants":[],"modules":[],"classes":[],"functions":[],"methods":["FishSampler::ManEater#initialize_qualities"],"attributes":[],"class_attributes":[],"files":["lib/fish.rb"]},"FishSampler::NewFish":{"!":"class","key":"FishSampler::NewFish","name":"NewFish","namespace":"FishSampler","includes":[],"comment":"It's hard to tell new fish form small fish.","constants":[],"modules":[],"classes":[],"functions":[],"methods":["FishSampler::NewFish#initialize_qualities"],"attributes":["FishSampler::NewFish#qualities"],"class_attributes":[],"files":["lib/fish.rb"],"superclass":"Fish"},"FishSampler::OldFish":{"!":"class","key":"FishSampler::OldFish","name":"OldFish","namespace":"FishSampler","includes":[],"comment":"Fish get old too.","constants":[],"modules":[],"classes":[],"functions":[],"methods":["FishSampler::OldFish#initialize_qualities"],"attributes":["FishSampler::OldFish#qualities"],"class_attributes":[],"files":["lib/fish.rb"],"superclass":"Fish"},"FishSampler::RedFish":{"!":"class","key":"FishSampler::RedFish","name":"RedFish","namespace":"FishSampler","includes":[],"comment":"= Brite Red Fish\n\nRed fish are quite pretty a fairly common.","constants":[],"modules":[],"classes":[],"functions":[],"methods":["FishSampler::RedFish#initialize_qualities"],"attributes":["FishSampler::RedFish#qualities"],"class_attributes":[],"files":["lib/fish.rb"],"superclass":"Object"},"FishSampler::Shark":{"!":"class","key":"FishSampler::Shark","name":"Shark","namespace":"FishSampler","includes":["ManEater"],"comment":"= Shark (Yikes!)\n\nSharks (superorder Selachimorpha) are a type of fish with a full cartilaginous skeleton\nand a highly streamlined body. The earliest known sharks date from more than 420 million\nyears ago, before the time of the dinosaurs.","constants":[],"modules":[],"classes":[],"functions":[],"methods":["FishSampler::Shark#initialize_qualities"],"attributes":[],"class_attributes":[],"files":["lib/fish.rb"],"superclass":"Fish"},"Numeric":{"!":"class","key":"Numeric","name":"Numeric","namespace":"","includes":["Multipliers"],"comment":"","constants":[],"modules":["Numeric::Multipliers"],"classes":[],"functions":[],"methods":[],"attributes":[],"class_attributes":[],"files":["lib/multipliers.rb"],"superclass":"Object"},"Numeric::Multipliers":{"!":"module","key":"Numeric::Multipliers","name":"Multipliers","namespace":"Numeric","includes":[],"comment":"= Multipliers\n\nAdds methods to Numeric to make working with\nmagnitudes (kilo, mega, giga, milli, micro, etc.)\n\n  1.kilo               #=> 1000\n  1.milli              #=> 0.001\n  1.kibi               #=> 1024\n\nTo display a value in a certain denomination, simply\nperform the inverse operation by placing the\nmultiplier called on unit (1) in the denominator.\n\n  1000 / 1.kilo        #=> 1\n  1024 / 1.kibi        #=> 1","constants":[],"modules":[],"classes":[],"functions":[],"methods":["Numeric::Multipliers#deka","Numeric::Multipliers#hecto","Numeric::Multipliers#kilo","Numeric::Multipliers#mega","Numeric::Multipliers#giga","Numeric::Multipliers#tera","Numeric::Multipliers#peta","Numeric::Multipliers#exa","Numeric::Multipliers#deci","Numeric::Multipliers#centi","Numeric::Multipliers#milli","Numeric::Multipliers#micro","Numeric::Multipliers#nano","Numeric::Multipliers#pico","Numeric::Multipliers#femto","Numeric::Multipliers#atto","Numeric::Multipliers#kibi","Numeric::Multipliers#mebi","Numeric::Multipliers#gibi","Numeric::Multipliers#tebi","Numeric::Multipliers#pebi","Numeric::Multipliers#exbi"],"attributes":[],"class_attributes":[],"files":["lib/multipliers.rb"]},"FishSampler.fishy_active":{"!":"class-attribute","key":"FishSampler.fishy_active","name":"fishy_active","namespace":"FishSampler","comment":"Example of a class-level attribute.","access":"public","rw":"R","singleton":true,"aliases":[],"alias_for":null,"image":null,"arguments":[],"parameters":[],"block":null,"interface":null,"returns":[],"file":"(unknown)","line":0,"source":""},"FishSampler::Fish#properties":{"!":"attribute","key":"FishSampler::Fish#properties","name":"properties","namespace":"FishSampler::Fish","comment":"List of various fish qualities.","access":"public","rw":"RW","singleton":false,"aliases":[],"alias_for":"FishSampler::Fish#qualities","image":null,"arguments":[],"parameters":[],"block":null,"interface":null,"returns":[],"file":"(unknown)","line":0,"source":""},"FishSampler::Fish#qualities":{"!":"attribute","key":"FishSampler::Fish#qualities","name":"qualities","namespace":"FishSampler::Fish","comment":"List of various fish qualities.","access":"public","rw":"RW","singleton":false,"aliases":["FishSampler::Fish#properties"],"alias_for":null,"image":null,"arguments":[],"parameters":[],"block":null,"interface":null,"returns":[],"file":"(unknown)","line":0,"source":""},"FishSampler::BlueFish#qualities":{"!":"attribute","key":"FishSampler::BlueFish#qualities","name":"qualities","namespace":"FishSampler::BlueFish","comment":"List of various fish qualities.","access":"public","rw":"RW","singleton":false,"aliases":[],"alias_for":null,"image":null,"arguments":[],"parameters":[],"block":null,"interface":null,"returns":[],"file":"(unknown)","line":0,"source":""},"FishSampler::NewFish#qualities":{"!":"attribute","key":"FishSampler::NewFish#qualities","name":"qualities","namespace":"FishSampler::NewFish","comment":"List of various fish qualities.","access":"public","rw":"RW","singleton":false,"aliases":[],"alias_for":null,"image":null,"arguments":[],"parameters":[],"block":null,"interface":null,"returns":[],"file":"(unknown)","line":0,"source":""},"FishSampler::OldFish#qualities":{"!":"attribute","key":"FishSampler::OldFish#qualities","name":"qualities","namespace":"FishSampler::OldFish","comment":"List of various fish qualities.","access":"public","rw":"RW","singleton":false,"aliases":[],"alias_for":null,"image":null,"arguments":[],"parameters":[],"block":null,"interface":null,"returns":[],"file":"(unknown)","line":0,"source":""},"FishSampler::RedFish#qualities":{"!":"attribute","key":"FishSampler::RedFish#qualities","name":"qualities","namespace":"FishSampler::RedFish","comment":"List of various fish qualities.","access":"public","rw":"RW","singleton":false,"aliases":[],"alias_for":null,"image":null,"arguments":[],"parameters":[],"block":null,"interface":null,"returns":[],"file":"(unknown)","line":0,"source":""},"FishSampler::Fish.new":{"!":"function","key":"FishSampler::Fish.new","name":"new","namespace":"FishSampler::Fish","comment":"New Fish","access":"public","singleton":true,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"new()","returns":[],"file":"lib/fish.rb","line":"26","source":"# File lib/fish.rb, line 26\n    def initialize\n      @qualities = DEFALULT_QUALITIES\n      initialize_qualities\n    end"},"Numeric::Multipliers#atto":{"!":"method","key":"Numeric::Multipliers#atto","name":"atto","namespace":"Numeric::Multipliers","comment":"","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"atto()","returns":[],"file":"lib/multipliers.rb","line":"76","source":"# File lib/multipliers.rb, line 76\n    def atto  ; self.to_f / 1000000000000000000 ; end"},"Numeric::Multipliers#centi":{"!":"method","key":"Numeric::Multipliers#centi","name":"centi","namespace":"Numeric::Multipliers","comment":"","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"centi()","returns":[],"file":"lib/multipliers.rb","line":"70","source":"# File lib/multipliers.rb, line 70\n    def centi ; self.to_f / 100 ; end"},"Numeric::Multipliers#deci":{"!":"method","key":"Numeric::Multipliers#deci","name":"deci","namespace":"Numeric::Multipliers","comment":"SI Fractional","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"deci()","returns":[],"file":"lib/multipliers.rb","line":"69","source":"# File lib/multipliers.rb, line 69\n    def deci  ; self.to_f / 10 ; end"},"Numeric::Multipliers#deka":{"!":"method","key":"Numeric::Multipliers#deka","name":"deka","namespace":"Numeric::Multipliers","comment":"SI Multipliers","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"deka()","returns":[],"file":"lib/multipliers.rb","line":"58","source":"# File lib/multipliers.rb, line 58\n    def deka  ; self * 10 ; end"},"Numeric::Multipliers#exa":{"!":"method","key":"Numeric::Multipliers#exa","name":"exa","namespace":"Numeric::Multipliers","comment":"","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"exa()","returns":[],"file":"lib/multipliers.rb","line":"65","source":"# File lib/multipliers.rb, line 65\n    def exa   ; self * 1000000000000000000 ; end"},"Numeric::Multipliers#exbi":{"!":"method","key":"Numeric::Multipliers#exbi","name":"exbi","namespace":"Numeric::Multipliers","comment":"","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"exbi()","returns":[],"file":"lib/multipliers.rb","line":"85","source":"# File lib/multipliers.rb, line 85\n    def exbi ; self * 1024**6 ; end"},"Numeric::Multipliers#femto":{"!":"method","key":"Numeric::Multipliers#femto","name":"femto","namespace":"Numeric::Multipliers","comment":"","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"femto()","returns":[],"file":"lib/multipliers.rb","line":"75","source":"# File lib/multipliers.rb, line 75\n    def femto ; self.to_f / 1000000000000000 ; end"},"Numeric::Multipliers#gibi":{"!":"method","key":"Numeric::Multipliers#gibi","name":"gibi","namespace":"Numeric::Multipliers","comment":"","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"gibi()","returns":[],"file":"lib/multipliers.rb","line":"82","source":"# File lib/multipliers.rb, line 82\n    def gibi ; self * 1024**3 ; end"},"Numeric::Multipliers#giga":{"!":"method","key":"Numeric::Multipliers#giga","name":"giga","namespace":"Numeric::Multipliers","comment":"","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"giga()","returns":[],"file":"lib/multipliers.rb","line":"62","source":"# File lib/multipliers.rb, line 62\n    def giga  ; self * 1000000000 ; end"},"Numeric::Multipliers#hecto":{"!":"method","key":"Numeric::Multipliers#hecto","name":"hecto","namespace":"Numeric::Multipliers","comment":"","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"hecto()","returns":[],"file":"lib/multipliers.rb","line":"59","source":"# File lib/multipliers.rb, line 59\n    def hecto ; self * 100 ; end"},"FishSampler::Shark#initialize_qualities":{"!":"method","key":"FishSampler::Shark#initialize_qualities","name":"initialize_qualities","namespace":"FishSampler::Shark","comment":"New Shark","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"initialize_qualities()","returns":[],"file":"lib/fish.rb","line":"110","source":"# File lib/fish.rb, line 110\n    def initialize_qualities\n      super\n      @qualties << :big\n    end"},"FishSampler::Fish#initialize_qualities":{"!":"method","key":"FishSampler::Fish#initialize_qualities","name":"initialize_qualities","namespace":"FishSampler::Fish","comment":"Override to add qualties.","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"initialize_qualities()","returns":[],"file":"lib/fish.rb","line":"32","source":"# File lib/fish.rb, line 32\n    def initialize_qualities\n    end"},"FishSampler::RedFish#initialize_qualities":{"!":"method","key":"FishSampler::RedFish#initialize_qualities","name":"initialize_qualities","namespace":"FishSampler::RedFish","comment":"New Red Fish","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"initialize_qualities()","returns":[],"file":"lib/fish.rb","line":"47","source":"# File lib/fish.rb, line 47\n    def initialize_qualities\n      super\n      @qualties << :red\n    end"},"FishSampler::ManEater#initialize_qualities":{"!":"method","key":"FishSampler::ManEater#initialize_qualities","name":"initialize_qualities","namespace":"FishSampler::ManEater","comment":"Man Eaters are scary!","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"initialize_qualities()","returns":[],"file":"lib/fish.rb","line":"94","source":"# File lib/fish.rb, line 94\n    def initialize_qualities\n      super\n      @qualties << :scary\n    end"},"FishSampler::OldFish#initialize_qualities":{"!":"method","key":"FishSampler::OldFish#initialize_qualities","name":"initialize_qualities","namespace":"FishSampler::OldFish","comment":"New Old Fish","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"initialize_qualities()","returns":[],"file":"lib/fish.rb","line":"73","source":"# File lib/fish.rb, line 73\n    def initialize_qualities\n      super\n      @qualties = << :old\n    end"},"FishSampler::NewFish#initialize_qualities":{"!":"method","key":"FishSampler::NewFish#initialize_qualities","name":"initialize_qualities","namespace":"FishSampler::NewFish","comment":"New NewFish","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"initialize_qualities()","returns":[],"file":"lib/fish.rb","line":"85","source":"# File lib/fish.rb, line 85\n    def initialize_qualities\n      super\n      @qualties << :new\n    end"},"FishSampler::BlueFish#initialize_qualities":{"!":"method","key":"FishSampler::BlueFish#initialize_qualities","name":"initialize_qualities","namespace":"FishSampler::BlueFish","comment":"New Blue Fish","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"initialize_qualities()","returns":[],"file":"lib/fish.rb","line":"61","source":"# File lib/fish.rb, line 61\n    def initialize_qualities\n      super\n      @qualties << :blue\n    end"},"Numeric::Multipliers#kibi":{"!":"method","key":"Numeric::Multipliers#kibi","name":"kibi","namespace":"Numeric::Multipliers","comment":"SI Binary","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"kibi()","returns":[],"file":"lib/multipliers.rb","line":"80","source":"# File lib/multipliers.rb, line 80\n    def kibi ; self * 1024 ; end"},"Numeric::Multipliers#kilo":{"!":"method","key":"Numeric::Multipliers#kilo","name":"kilo","namespace":"Numeric::Multipliers","comment":"","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"kilo()","returns":[],"file":"lib/multipliers.rb","line":"60","source":"# File lib/multipliers.rb, line 60\n    def kilo  ; self * 1000 ; end"},"Numeric::Multipliers#mebi":{"!":"method","key":"Numeric::Multipliers#mebi","name":"mebi","namespace":"Numeric::Multipliers","comment":"","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"mebi()","returns":[],"file":"lib/multipliers.rb","line":"81","source":"# File lib/multipliers.rb, line 81\n    def mebi ; self * 1024**2 ; end"},"Numeric::Multipliers#mega":{"!":"method","key":"Numeric::Multipliers#mega","name":"mega","namespace":"Numeric::Multipliers","comment":"","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"mega()","returns":[],"file":"lib/multipliers.rb","line":"61","source":"# File lib/multipliers.rb, line 61\n    def mega  ; self * 1000000 ; end"},"Numeric::Multipliers#micro":{"!":"method","key":"Numeric::Multipliers#micro","name":"micro","namespace":"Numeric::Multipliers","comment":"","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"micro()","returns":[],"file":"lib/multipliers.rb","line":"72","source":"# File lib/multipliers.rb, line 72\n    def micro ; self.to_f / 1000000 ; end"},"Numeric::Multipliers#milli":{"!":"method","key":"Numeric::Multipliers#milli","name":"milli","namespace":"Numeric::Multipliers","comment":"","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"milli()","returns":[],"file":"lib/multipliers.rb","line":"71","source":"# File lib/multipliers.rb, line 71\n    def milli ; self.to_f / 1000 ; end"},"Numeric::Multipliers#nano":{"!":"method","key":"Numeric::Multipliers#nano","name":"nano","namespace":"Numeric::Multipliers","comment":"","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"nano()","returns":[],"file":"lib/multipliers.rb","line":"73","source":"# File lib/multipliers.rb, line 73\n    def nano  ; self.to_f / 1000000000 ; end"},"Numeric::Multipliers#pebi":{"!":"method","key":"Numeric::Multipliers#pebi","name":"pebi","namespace":"Numeric::Multipliers","comment":"","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"pebi()","returns":[],"file":"lib/multipliers.rb","line":"84","source":"# File lib/multipliers.rb, line 84\n    def pebi ; self * 1024**5 ; end"},"Numeric::Multipliers#peta":{"!":"method","key":"Numeric::Multipliers#peta","name":"peta","namespace":"Numeric::Multipliers","comment":"","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"peta()","returns":[],"file":"lib/multipliers.rb","line":"64","source":"# File lib/multipliers.rb, line 64\n    def peta  ; self * 1000000000000000 ; end"},"Numeric::Multipliers#pico":{"!":"method","key":"Numeric::Multipliers#pico","name":"pico","namespace":"Numeric::Multipliers","comment":"","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"pico()","returns":[],"file":"lib/multipliers.rb","line":"74","source":"# File lib/multipliers.rb, line 74\n    def pico  ; self.to_f / 1000000000000 ; end"},"Numeric::Multipliers#tebi":{"!":"method","key":"Numeric::Multipliers#tebi","name":"tebi","namespace":"Numeric::Multipliers","comment":"","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"tebi()","returns":[],"file":"lib/multipliers.rb","line":"83","source":"# File lib/multipliers.rb, line 83\n    def tebi ; self * 1024**4 ; end"},"Numeric::Multipliers#tera":{"!":"method","key":"Numeric::Multipliers#tera","name":"tera","namespace":"Numeric::Multipliers","comment":"","access":"public","singleton":false,"aliases":[],"alias_for":null,"image":"()","arguments":[],"parameters":[],"block":null,"interface":"tera()","returns":[],"file":"lib/multipliers.rb","line":"63","source":"# File lib/multipliers.rb, line 63\n    def tera  ; self * 1000000000000 ; end"},"lib/fish.rb":{"!":"script","key":"/lib/fish.rb","name":"fish.rb","parent":"lib","path":"lib/fish.rb","mtime":"2011-09-07 19:13:29 -0400","header":"","footer":"","requires":[],"constants":[],"modules":["FishSampler","FishSampler::ManEater"],"classes":["FishSampler::BlueFish","FishSampler::Fish","FishSampler::NewFish","FishSampler::OldFish","FishSampler::RedFish","FishSampler::Shark"],"functions":["FishSampler::Fish.new"],"methods":["FishSampler::Shark#initialize_qualities","FishSampler::Fish#initialize_qualities","FishSampler::RedFish#initialize_qualities","FishSampler::ManEater#initialize_qualities","FishSampler::OldFish#initialize_qualities","FishSampler::NewFish#initialize_qualities","FishSampler::BlueFish#initialize_qualities"],"source":"# = Fish Sampler\n# \n# Let us review... Red fish, Blue fish, One fish, Two fish...\n#\nmodule FishSampler\n\n  class << self\n    # Example of a class-level attribute.\n    attr_reader :fishy_active\n  end\n\n  # Every fish is scaly.\n  DEFALULT_QUALITIES = [ :scaly ]\n\n  # A fish is any aquatic vertebrate animal that is typically ectothermic (or cold-blooded),\n  # covered with scales, and equipped with two sets of paired fins and several unpaired fins.\n  # Fish are abundant in the sea and in fresh water, with species being known from mountain\n  # streams (e.g., char and gudgeon) as well as in the deepest depths of the ocean\n  # (e.g., gulpers and anglerfish).\n\n  class Fish\n    # List of various fish qualities.\n    attr_accessor :qualities\n\n    # New Fish\n    def initialize\n      @qualities = DEFALULT_QUALITIES\n      initialize_qualities\n    end\n\n    # Override to add qualties.\n    def initialize_qualities\n    end\n\n    # Another term for qualities.\n    alias_method :properties, :qualities \n  end\n\n  # = Brite Red Fish\n  #\n  # Red fish are quite pretty a fairly common.\n  class RedFish\n    # List of various fish qualities.\n    attr_accessor :qualities\n\n    # New Red Fish\n    def initialize_qualities\n      super\n      @qualties << :red\n    end\n  end\n\n  # = Blue Fish\n  #\n  # Despite their name most Bluefish aren't very blue.\n  class BlueFish < Fish\n    # List of various fish qualities.\n    attr_accessor :qualities\n\n    # New Blue Fish\n    def initialize_qualities\n      super\n      @qualties << :blue\n    end\n  end\n\n  # Fish get old too.\n  class OldFish < Fish\n    # List of various fish qualities.\n    attr_accessor :qualities\n\n    # New Old Fish\n    def initialize_qualities\n      super\n      @qualties = << :old\n    end\n  end\n\n  # It's hard to tell new fish form small fish.\n  class NewFish < Fish\n    # List of various fish qualities.\n    attr_accessor :qualities\n\n    # New NewFish\n    def initialize_qualities\n      super\n      @qualties << :new\n    end\n  end\n\n  # Some fish will eat a man!\n  module ManEater\n    # Man Eaters are scary!\n    def initialize_qualities\n      super\n      @qualties << :scary\n    end\n  end\n\n  # = Shark (Yikes!)\n  #\n  # Sharks (superorder Selachimorpha) are a type of fish with a full cartilaginous skeleton\n  # and a highly streamlined body. The earliest known sharks date from more than 420 million\n  # years ago, before the time of the dinosaurs.\n  #\n  class Shark < Fish\n    include ManEater\n\n    # New Shark\n    def initialize_qualities\n      super\n      @qualties << :big\n    end\n\n  private\n\n    def secret\n      puts \"Shh... shark secrets!\"\n    end\n\n  end\n\nend\n\n"},"lib/multipliers.rb":{"!":"script","key":"/lib/multipliers.rb","name":"multipliers.rb","parent":"lib","path":"lib/multipliers.rb","mtime":"2011-08-20 19:25:28 -0400","header":"","footer":"","requires":[],"constants":[],"modules":["Numeric::Multipliers"],"classes":["Numeric"],"functions":[],"methods":["Numeric::Multipliers#atto","Numeric::Multipliers#centi","Numeric::Multipliers#deci","Numeric::Multipliers#deka","Numeric::Multipliers#exa","Numeric::Multipliers#exbi","Numeric::Multipliers#femto","Numeric::Multipliers#gibi","Numeric::Multipliers#giga","Numeric::Multipliers#hecto","Numeric::Multipliers#kibi","Numeric::Multipliers#kilo","Numeric::Multipliers#mebi","Numeric::Multipliers#mega","Numeric::Multipliers#micro","Numeric::Multipliers#milli","Numeric::Multipliers#nano","Numeric::Multipliers#pebi","Numeric::Multipliers#peta","Numeric::Multipliers#pico","Numeric::Multipliers#tebi","Numeric::Multipliers#tera"],"source":"# = Multipliers\n#\n# == Synopsis\n#\n# Adds methods to Numeric to make working with magnitudes\n# (kilo, mega, giga, milli, micro, etc.)\n#\n# == History\n#\n#   Thanks to Rich Kilmer and bytes.rb which inspired this library.\n#\n# == Notes\n#\n# * This library is not compatible with STICK's units.rb (an spin-off\n#   of Facets old units.rb library). Do not attempt to use both at\n#   the same time.\n#\n# == Authors\n#\n# * Thomas Sawyer\n#\n# == Copying\n#\n# Copyright (c) 2005 Thomas Sawyer\n#\n# Ruby License\n#\n# This module is free software. You may use, modify, and/or redistribute this\n# software under the same terms as Ruby.\n#\n# This program is distributed in the hope that it will be useful, but WITHOUT\n# ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS\n# FOR A PARTICULAR PURPOSE.\n\n#\nclass Numeric\n\n  # = Multipliers\n  #\n  # Adds methods to Numeric to make working with\n  # magnitudes (kilo, mega, giga, milli, micro, etc.)\n  #\n  #   1.kilo               #=> 1000\n  #   1.milli              #=> 0.001\n  #   1.kibi               #=> 1024\n  #\n  # To display a value in a certain denomination, simply\n  # perform the inverse operation by placing the\n  # multiplier called on unit (1) in the denominator.\n  #\n  #   1000 / 1.kilo        #=> 1\n  #   1024 / 1.kibi        #=> 1\n  #\n  module Multipliers\n\n    # SI Multipliers\n\n    def deka  ; self * 10 ; end\n    def hecto ; self * 100 ; end\n    def kilo  ; self * 1000 ; end\n    def mega  ; self * 1000000 ; end\n    def giga  ; self * 1000000000 ; end\n    def tera  ; self * 1000000000000 ; end\n    def peta  ; self * 1000000000000000 ; end\n    def exa   ; self * 1000000000000000000 ; end\n\n    # SI Fractional\n\n    def deci  ; self.to_f / 10 ; end\n    def centi ; self.to_f / 100 ; end\n    def milli ; self.to_f / 1000 ; end\n    def micro ; self.to_f / 1000000 ; end\n    def nano  ; self.to_f / 1000000000 ; end\n    def pico  ; self.to_f / 1000000000000 ; end\n    def femto ; self.to_f / 1000000000000000 ; end\n    def atto  ; self.to_f / 1000000000000000000 ; end\n\n    # SI Binary\n\n    def kibi ; self * 1024 ; end\n    def mebi ; self * 1024**2 ; end\n    def gibi ; self * 1024**3 ; end\n    def tebi ; self * 1024**4 ; end\n    def pebi ; self * 1024**5 ; end\n    def exbi ; self * 1024**6 ; end\n\n    # Bits and Bytes\n\n    #def bit   ; self ; end\n    #def bits  ; self ; end\n    #def byte  ; self * 8 ; end\n    #def bytes ; self * 8 ; end\n  end\n\n  include Multipliers\nend\n\n"},"Rakefile.old":{"!":"script","key":"/Rakefile.old","name":"Rakefile.old","parent":".","path":"Rakefile.old","mtime":"2011-08-20 19:25:28 -0400","header":"","footer":"","requires":[],"constants":[],"modules":[],"classes":[],"functions":[],"methods":[],"source":"desc \"onefish\"\ntask :onefish do\n  sh \"rdoc -f onefish --main README README lib\"\nend\n\ndesc \"twofish\"\ntask :twofish do\n  sh \"rdoc -f twofish --main README README lib\"\nend\n\ndesc \"redfish\"\ntask :redfish do\n  sh \"rdoc -f redfish --main README README lib\"\nend\n\ndesc \"newfish\"\ntask :newfish do\n  sh \"rdoc -f newfish --main README README lib\"\nend\n\ndesc \"longfish\"\ntask :longfish do\n  sh \"rdoc -f longfish --main README README lib\"\nend\n\n#desc \"blackfish\"\n#task :blackfish do\n#  sh \"rdoc -f blackfish --main README README lib\"\n#end\n\ntask :clean do\n  sh \"rm -r doc\"\nend\n\n"}}
