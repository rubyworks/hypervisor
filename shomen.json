{"(metadata)":{"name":"shomen","spec_version":"1.0.0","title":"Shomen","requires":[{"group":[],"name":"rdoc","version":"3~"},{"group":["build"],"name":"syckle","version":"0+"}],"resources":{"repo":"git://github.com/proutils/shomen.git","home":"http://proutils.github.com/shomen","work":"http://github.com/proutils/shomen"},"manifest":["lib/rdoc/discover.rb","lib/shomen/hyper/index.html","lib/shomen/hyper/jquery.jqote2.min.js","lib/shomen/hyper/jquery.js","lib/shomen/hyper/rdoc.json","lib/shomen/rdoc/generator.rb","lib/shomen.yml","Rakefile","HISTORY.rdoc","Profile","README.rdoc","NOTES.rdoc","Syckfile","Version"],"version":"0.1.0","description":"Shomen defines a standardized documentaiton format for Ruby programs which is used by other systems as a common source for rendering.","summary":"Standardized Ruby Documentation Format","authors":["Thomas Sawyer <transfire@gmail.com>"],"created":"2010-07-01"},"Shomen":{"!":"module","name":"Shomen","namespace":"","comment":"","constants":[],"includes":[],"extended":[],"modules":[],"classes":["Shomen::YardAdaptor"],"functions":["Shomen.cli","Shomen.cli_options","Shomen.root?"],"methods":["Shomen#cli","Shomen#cli_options","Shomen#root?"],"files":["/lib/shomen/cli.rb:5","/lib/shomen/yard.rb:3"]},"Shomen#cli":{"!":"method","name":"cli","parent":"Shomen","comment":"Command line interface.","access":"public","singleton":false,"aliases":[],"image":"cli(.)","arguments":[{"name":"*argv"}],"parameters":[],"returns":[],"file":"/lib/shomen/cli.rb","line":9,"source":"def self.cli(*argv)\n  options = {}\n  options[:adapter] = :yard\n  options[:format]  = :json\n  options[:force]   = false\n  options[:clear]   = false\n\n  cli_options(options).parse!(argv)\n\n  if !options[:force] && !root?\n    $stderr.puts \"Not a project directory. Use --force to override.\"\n    exit -1\n  end\n\n  if !options[:adapter]\n    options[:adapter] = :yard if File.directory?('.yardoc')\n  end\n\n  case options[:adapter]\n  when :yard, :y\n    require 'shomen/yard'\n    yard = Shomen::YardAdaptor.new(options)\n    yard.generate\n    if options[:format] == :yaml\n      puts yard.table.to_yaml\n    else\n      puts yard.table.to_json\n    end\n  when :tomdoc, :t\n    # TODO\n  when :rdoc, :r\n    # TODO\n  when :ri\n    # TODO\n  else\n    abort \"unrecognized adapter -- #{options[:adapter]}\"\n  end\n\nend"},"Shomen#cli_options":{"!":"method","name":"cli_options","parent":"Shomen","comment":"","access":"public","singleton":false,"aliases":[],"image":"cli_options(.)","arguments":[{"name":"options"}],"parameters":[],"returns":[],"file":"/lib/shomen/cli.rb","line":49,"source":"def self.cli_options(options)\n  OptionParser.new do |opt|\n    opt.on('-a', '--adapter NAME') do |arg|\n      options[:adapter] = arg.to_sym\n    end\n    opt.on('-y', '--yaml', 'output YAML instead of JSON') do\n      options[:format] = :yaml\n    end\n    opt.on('-c', '--clear') do\n      options[:clear] = true\n    end\n    opt.on('-f', '--force') do\n      options[:force] = true\n    end\n    opt.on_tail('-D', '--debug', 'run with $DEBUG set to true') do\n      $DEBUG = true\n    end\n    opt.on_tail('--help') do\n      puts opt\n      exit 0\n    end\n  end\nend"},"Shomen#root?":{"!":"method","name":"root?","parent":"Shomen","comment":"","access":"public","singleton":false,"aliases":[],"image":"root?(.)","arguments":[],"parameters":[],"returns":[{"type":"Boolean","comment":""}],"file":"/lib/shomen/cli.rb","line":74,"source":"def self.root?\n  root = false\n  root = true if File.exist?('.ruby')\n  root = true if File.exist?('.yardoc')\n  root\nend"},"Shomen::YardAdaptor":{"!":"class","name":"YardAdaptor","namespace":"Shomen","comment":"Convert YARD raw documentation to Shomen.","constants":[],"includes":[],"extended":[],"modules":[],"classes":[],"functions":["Shomen::YardAdaptor.table","Shomen::YardAdaptor.initialize","Shomen::YardAdaptor.setup","Shomen::YardAdaptor.generate","Shomen::YardAdaptor.generate_class","Shomen::YardAdaptor.generate_module","Shomen::YardAdaptor.generate_method","Shomen::YardAdaptor.generate_constant","Shomen::YardAdaptor.generate_file","Shomen::YardAdaptor.generate_script","Shomen::YardAdaptor.debug_msg"],"methods":["Shomen::YardAdaptor#table","Shomen::YardAdaptor#initialize","Shomen::YardAdaptor#setup","Shomen::YardAdaptor#generate","Shomen::YardAdaptor#generate_class","Shomen::YardAdaptor#generate_module","Shomen::YardAdaptor#generate_method","Shomen::YardAdaptor#generate_constant","Shomen::YardAdaptor#generate_file","Shomen::YardAdaptor#generate_script","Shomen::YardAdaptor#debug_msg"],"files":["/lib/shomen/yard.rb:7"],"superclass":"Object"},"Shomen::YardAdaptor#table":{"!":"method","name":"table","parent":"Shomen::YardAdaptor","comment":"The hash object that is used to store the generated \ndocumentation.","access":"public","singleton":false,"aliases":[],"image":"table","arguments":[],"parameters":[],"returns":[],"file":"/lib/shomen/yard.rb","line":11,"source":"def table\n  @table\nend"},"Shomen::YardAdaptor#initialize":{"!":"method","name":"initialize","parent":"Shomen::YardAdaptor","comment":"New adaptor.","access":"public","singleton":false,"aliases":[],"image":"initialize(options)","arguments":[{"name":"options"}],"parameters":[],"returns":[{"type":"YardAdaptor","comment":"a new instance of YardAdaptor"}],"file":"/lib/shomen/yard.rb","line":14,"source":"def initialize(options)\n  @clear = options[:clear]\n  @db    = options[:db] || '.yardoc'\nend"},"Shomen::YardAdaptor#setup":{"!":"method","name":"setup","parent":"Shomen::YardAdaptor","comment":"","access":"public","singleton":false,"aliases":[],"image":"setup( )","arguments":[],"parameters":[],"returns":[],"file":"/lib/shomen/yard.rb","line":20,"source":"def setup\n  if @clear or not File.exist?(@db)\n    `yard -n -b #{@db}`  # TODO: don't shell out\n  end\n  @registry = YARD::Registry.load!('.yardoc')\nend"},"Shomen::YardAdaptor#generate":{"!":"method","name":"generate","parent":"Shomen::YardAdaptor","comment":"Generate the shomen data structure.","access":"public","singleton":false,"aliases":[],"image":"generate( )","arguments":[],"parameters":[],"returns":[],"file":"/lib/shomen/yard.rb","line":28,"source":"def generate\n  setup\n\n  @files = []\n  @table = {}\n\n  @registry.each do |object|\n    case object.type\n    when :class\n      generate_class(object)\n    when :module\n      generate_module(object)\n    when :method\n      generate_method(object)\n    when :constant\n      generate_constant(object)\n    else\n      $stderr.puts \"What is an #{object.type}? Ignored!\"\n    end\n  end\n\n  @files.each do |file|\n    case File.extname(file)\n    when '.rb', '.rbx'\n      generate_script(file)\n    else\n      generate_file(file)\n    end\n  end\nend"},"Shomen::YardAdaptor#generate_class":{"!":"method","name":"generate_class","parent":"Shomen::YardAdaptor","comment":"Generate a class structure.","access":"public","singleton":false,"aliases":[],"image":"generate_class(object)","arguments":[{"name":"object"}],"parameters":[],"returns":[{"type":"Hash","comment":"class data that has been placed in the table"}],"file":"/lib/shomen/yard.rb","line":62,"source":"def generate_class(object)\n  debug_msg \"%s\" % [object.path]\n\n  data = {}\n  data[\"!\"]          = 'class'\n  data[\"name\"]       = object.name.to_s\n  data[\"namespace\"]  = object.namespace.path #full_name.split('::')[0...-1].join('::')\n\n  data[\"comment\"]    = object.docstring.to_s\n  data[\"constants\"]  = object.constants.map{ |x| x.path } #complete_name(x.name, c.full_name) }\n\n  data[\"includes\"]   = object.instance_mixins.map{ |x| x.path }\n  data[\"extended\"]   = object.class_mixins.map{ |x| x.path }\n\n  data[\"modules\"]    = object.children.select{ |x| x.type == :module }.map{ |x| x.path } #object.modules.map{ |x| complete_name(x.name, c.full_name) }\n  data[\"classes\"]    = object.children.select{ |x| x.type == :class }.map{ |x| x.path } #object.classes.map{ |x| complete_name(x.name, c.full_name) }\n\n  meths = object.meths(:included=>false, :inherited=>false)\n  data[\"functions\"]  = meths.select{ |m| m.scope = :class }.map{ |m| m.path }\n  data[\"methods\"]    = meths.select{ |m| m.scope = :instance }.map{ |m| m.path }\n\n  data[\"files\"]      = object.files.map{ |f, l| \"/#{f}:#{l}\" }\n  data[\"superclass\"] = object.superclass ? object.superclass.path : 'Object'\n\n  @table[object.path] = data\nend"},"Shomen::YardAdaptor#generate_module":{"!":"method","name":"generate_module","parent":"Shomen::YardAdaptor","comment":"Generate a module structure.","access":"public","singleton":false,"aliases":[],"image":"generate_module(object)","arguments":[{"name":"object"}],"parameters":[],"returns":[],"file":"/lib/shomen/yard.rb","line":91,"source":"def generate_module(object)\n  debug_msg \"%s\" % [object.path]\n\n  data = {}\n  data[\"!\"]          = 'module'\n  data[\"name\"]       = object.name.to_s\n  data[\"namespace\"]  = object.namespace.path #full_name.split('::')[0...-1].join('::')\n\n  data[\"comment\"]    = object.docstring.to_s\n  data[\"constants\"]  = object.constants.map{ |x| x.path } #complete_name(x.name, c.full_name) }\n\n  data[\"includes\"]   = object.instance_mixins.map{ |x| x.path }\n  data[\"extended\"]   = object.class_mixins.map{ |x| x.path }\n\n  data[\"modules\"]    = object.children.select{ |x| x.type == :module }.map{ |x| x.path } #object.modules.map{ |x| complete_name(x.name, c.full_name) }\n  data[\"classes\"]    = object.children.select{ |x| x.type == :class }.map{ |x| x.path } #object.classes.map{ |x| complete_name(x.name, c.full_name) }\n\n  meths = object.meths(:included=>false, :inherited=>false)\n  data[\"functions\"]  = meths.select{ |m| m.scope = :class }.map{ |m| m.path }\n  data[\"methods\"]    = meths.select{ |m| m.scope = :instance }.map{ |m| m.path }\n\n  data[\"files\"]      = object.files.map{ |f, l| \"/#{f}:#{l}\" }\n\n  @files.concat(object.files.map{ |f, l| f })\n\n  @table[object.path] = data\nend"},"Shomen::YardAdaptor#generate_method":{"!":"method","name":"generate_method","parent":"Shomen::YardAdaptor","comment":"Generate a method structure.","access":"public","singleton":false,"aliases":[],"image":"generate_method(object)","arguments":[{"name":"object"}],"parameters":[],"returns":[],"file":"/lib/shomen/yard.rb","line":121,"source":"def generate_method(object)\n  debug_msg \"%s\" % [object.path]\n\n  #code       = m.source_code_raw\n  #file, line = m.source_code_location\n\n  #full_name = method_name(m)\n\n  #'prettyname'   => m.pretty_name,\n  #'type'         => m.type, # class or instance\n\n  args = []\n  object.parameters.each do |var, val|\n    if val\n      args << { 'name' => var, 'default'=>val }\n    else\n      args << { 'name' => var }\n    end\n  end\n\n  rtns = []\n  object.tags(:return).each do |t|\n    t.types.each do |ty|\n      rtns << { 'type' => ty, 'comment' => t.text }\n    end\n  end\n\n  table[object.path] = {\n    '!'            => object.scope == :instance ? 'method' : 'function',\n    'name'         => object.name.to_s,\n    'parent'       => object.parent.path,\n    'comment'      => object.docstring.to_s,\n    'access'       => object.visibility.to_s,\n    'singleton'    => object.scope == :class,\n    'aliases'      => object.aliases.map{ |a| a.path }, #method_name(a) },\n    #'alias_for'    => method_name(m.is_alias_for),\n    'image'        => object.signature.sub('def ', ''), #m.params,\n    'arguments'    => args,\n    'parameters'   => [],\n    #'block'        => m.block_params, # TODO: what is block?\n    #'interface'    => object.arglists,\n    'returns'      => rtns,\n    'file'         => \"/#{object.file}\",\n    'line'         => object.line,\n    'source'       => object.source\n  }\nend"},"Shomen::YardAdaptor#generate_constant":{"!":"method","name":"generate_constant","parent":"Shomen::YardAdaptor","comment":"Generate a constant.","access":"public","singleton":false,"aliases":[],"image":"generate_constant(object)","arguments":[{"name":"object"}],"parameters":[],"returns":[],"file":"/lib/shomen/yard.rb","line":171,"source":"def generate_constant(object)\n  #full_name = \"#{base.full_name}::#{c.name}\"\n  debug_msg \"%s\" % [object.path]\n  table[object.name] = {\n    \"!\"         => \"constant\",\n    \"name\"      => object.name.to_s,\n    \"namespace\" => object.namespace.path,\n    \"comment\"   => object.docstring.to_s,\n    \"value\"     => object.value\n  }\nend"},"Shomen::YardAdaptor#generate_file":{"!":"method","name":"generate_file","parent":"Shomen::YardAdaptor","comment":"Generate a file.","access":"public","singleton":false,"aliases":[],"image":"generate_file(object)","arguments":[{"name":"object"}],"parameters":[],"returns":[],"file":"/lib/shomen/yard.rb","line":185,"source":"def generate_file(object)\n  #debug_msg \"%s\" % [object.path]\n  table[object] = {\n    \"!\"         => \"file\",\n    \"name\"      => File.basename(object),\n    \"path\"      => object,\n    \"mtime\"     => File.mtime(object),\n    \"text\"      => File.read(object)\n  }\nend"},"Shomen::YardAdaptor#generate_script":{"!":"method","name":"generate_script","parent":"Shomen::YardAdaptor","comment":"","access":"public","singleton":false,"aliases":[],"image":"generate_script(object)","arguments":[{"name":"object"}],"parameters":[],"returns":[],"file":"/lib/shomen/yard.rb","line":196,"source":"def generate_script(object)\n  debug_msg(\"%s #{object}\")\n#  \"/musicstore/song.rb\": {\n  table[object] = {\n    \"!\"           => \"script\",\n    \"name\"        => File.basename(object),\n    \"path\"        => \"musicstore\",\n    \"loadpath\"    => \"lib\",\n    \"mtime\"       => File.mtime(object),\n    \"header\"      => \"\",\n    \"footer\"      => \"\",\n    # \"requires\"    : [\"fileutils\"],\n    # \"constants\"   : [\"MusicStore::CONFIG_DIRECTORY\"],\n    # \"modules\"     : [\"MusicStore\", \"MusicStore::MusicMixin\"],\n    # \"classes\"     : [\"MusicStore::Song\"],\n    # \"functions\"   : [\"MusicStore.config_directory\"],\n    # \"methods\"     : [\"MusicStore::MusicMixin#play\", \"MusicStore::MusicMixin#artist\"]\n    \"source\"      => File.read(object)\n  }\nend"},"Shomen::YardAdaptor#debug_msg":{"!":"method","name":"debug_msg","parent":"Shomen::YardAdaptor","comment":"Output progress information if debugging is enabled","access":"public","singleton":false,"aliases":[],"image":"debug_msg(msg)","arguments":[{"name":"msg"}],"parameters":[],"returns":[],"file":"/lib/shomen/yard.rb","line":219,"source":"def debug_msg(msg)\n  return unless $DEBUG\n  case msg[-1,1]\n    when '.' then tab = \"= \"\n    when ':' then tab = \"== \"\n    else          tab = \"* \"\n  end\n  $stderr.puts(tab + msg)\nend"},"#fileutils":{"!":"method","name":"fileutils","parent":"","comment":"TODO: options = { :verbose => $DEBUG_RDOC, :noop => $dryrun }","access":"public","singleton":false,"aliases":[],"image":"fileutils( )","arguments":[],"parameters":[],"returns":[],"file":"/lib/shomen/rdoc/generator.rb","line":30,"source":"def fileutils\n  $dryrun ? FileUtils::DryRun : FileUtils\nend"},"RDoc::Generator::Shomen":{"!":"class","name":"Shomen","namespace":"RDoc::Generator","comment":"","constants":[],"includes":[],"extended":[],"modules":[],"classes":[],"functions":[],"methods":[],"files":[],"superclass":"Object"},"lib/yard-shomen.rb":{"!":"script","name":"yard-shomen.rb","path":"lib/yard-shomen.rb","mtime":"2011-09-03 12:00:35 -0400","header":"","footer":"","source":"require 'shoment/yard'\n"},"lib/rdoc/discover.rb":{"!":"script","name":"discover.rb","path":"lib/rdoc/discover.rb","mtime":"2011-04-12 12:06:50 -0400","header":"","footer":"","source":"begin\n  require \"rubygems\"\nrescue LoadError\nend\n\nbegin\n  gem 'rdoc', '~> 3'\n  gem 'shomen'\n  require 'shomen/rdoc/generator'\nrescue Gem::LoadError => error\n  puts error\nrescue LoadError => error\n  puts error\nend\n\n"},"lib/shomen/yard.rb":{"!":"script","name":"yard.rb","path":"lib/shomen/yard.rb","mtime":"2011-09-03 21:08:00 -0400","header":"","footer":"","source":"require 'yard'\n\nmodule Shomen\n\n  # Convert YARD raw documentation to Shomen.\n  #\n  class YardAdaptor\n\n    # The hash object that is used to store the generated \n    # documentation.\n    attr :table\n\n    # New adaptor.\n    def initialize(options)\n      @clear = options[:clear]\n      @db    = options[:db] || '.yardoc'\n    end\n\n    #\n    def setup\n      if @clear or not File.exist?(@db)\n        `yard -n -b #{@db}`  # TODO: don't shell out\n      end\n      @registry = YARD::Registry.load!('.yardoc')\n    end\n\n    # Determine files by looking up .yardopts (kind of a hack).\n    def files\n      @files ||= (\n        list = []\n        File.read('.yardopts').split(\"\\n\").each do |line|\n          line = line.strip\n          next if line =~ /^-/\n          line = File.join(line, '**/*') if File.directory?(line)\n          list.concat(Dir[line])\n        end\n        list.reject!{ |path| File.extname(path) == '.html' }\n        list.select!{ |path| File.file?(path) }\n        list\n      )\n    end\n\n    # Generate the shomen data structure.\n    def generate\n      setup\n\n      #@files = []\n      @table = {}\n\n      generate_metadata\n\n      @registry.each do |object|\n        case object.type\n        when :class\n          generate_class(object)\n        when :module\n          generate_module(object)\n        when :method\n          generate_method(object)\n        when :constant\n          generate_constant(object)\n        else\n          $stderr.puts \"What is an #{object.type}? Ignored!\"\n        end\n      end\n\n      files.each do |file|\n        case File.extname(file)\n        when '.rb', '.rbx', '.js', '.html', '.css'\n          generate_script(file)\n        else\n          generate_file(file)\n        end\n      end\n    end\n\n    #\n    def generate_metadata\n      if File.exist?('.ruby')\n        data = YAML.load_file('.ruby')\n      else\n        data = {}\n      end\n      @table['(metadata)'] = data\n    end\n\n    # Generate a class structure.\n    #\n    # @return [Hash] class data that has been placed in the table\n    def generate_class(object)\n      debug_msg \"%s\" % [object.path]\n\n      meths = object.meths(:included=>false, :inherited=>false)\n\n      data = {}\n      data[\"!\"]          = 'class'\n      data[\"name\"]       = object.name.to_s\n      data[\"namespace\"]  = object.namespace.path #full_name.split('::')[0...-1].join('::')\n      data[\"comment\"]    = object.docstring.to_s\n      data[\"constants\"]  = object.constants.map{ |x| x.path } #complete_name(x.name, c.full_name) }\n      data[\"includes\"]   = object.instance_mixins.map{ |x| x.path }\n      data[\"extended\"]   = object.class_mixins.map{ |x| x.path }\n      data[\"modules\"]    = object.children.select{ |x| x.type == :module }.map{ |x| x.path } #object.modules.map{ |x| complete_name(x.name, c.full_name) }\n      data[\"classes\"]    = object.children.select{ |x| x.type == :class }.map{ |x| x.path } #object.classes.map{ |x| complete_name(x.name, c.full_name) }\n      data[\"functions\"]  = meths.select{ |m| m.scope = :class }.map{ |m| m.path }\n      data[\"methods\"]    = meths.select{ |m| m.scope = :instance }.map{ |m| m.path }\n      data[\"files\"]      = object.files.map{ |f, l| \"/#{f}:#{l}\" }\n      data[\"superclass\"] = object.superclass ? object.superclass.path : 'Object'\n\n      #@files.concat(object.files.map{ |f, l| f })\n\n      @table[object.path] = data\n    end\n\n    # Generate a module structure.\n    #\n    def generate_module(object)\n      debug_msg \"%s\" % [object.path]\n\n      meths = object.meths(:included=>false, :inherited=>false)\n\n      data = {}\n      data[\"!\"]          = 'module'\n      data[\"name\"]       = object.name.to_s\n      data[\"namespace\"]  = object.namespace.path #full_name.split('::')[0...-1].join('::')\n      data[\"comment\"]    = object.docstring.to_s\n      data[\"constants\"]  = object.constants.map{ |x| x.path } #complete_name(x.name, c.full_name) }\n      data[\"includes\"]   = object.instance_mixins.map{ |x| x.path }\n      data[\"extended\"]   = object.class_mixins.map{ |x| x.path }\n      data[\"modules\"]    = object.children.select{ |x| x.type == :module }.map{ |x| x.path } #object.modules.map{ |x| complete_name(x.name, c.full_name) }\n      data[\"classes\"]    = object.children.select{ |x| x.type == :class }.map{ |x| x.path } #object.classes.map{ |x| complete_name(x.name, c.full_name) }\n      data[\"functions\"]  = meths.select{ |m| m.scope = :class }.map{ |m| m.path }\n      data[\"methods\"]    = meths.select{ |m| m.scope = :instance }.map{ |m| m.path }\n      data[\"files\"]      = object.files.map{ |f, l| \"/#{f}:#{l}\" }\n\n      #@files.concat(object.files.map{ |f, l| f })\n\n      @table[object.path] = data\n    end\n\n    # Generate a method structure.\n    #\n    def generate_method(object)\n      debug_msg \"%s\" % [object.path]\n\n      #code       = m.source_code_raw\n      #file, line = m.source_code_location\n\n      #full_name = method_name(m)\n\n      #'prettyname'   => m.pretty_name,\n      #'type'         => m.type, # class or instance\n\n      args = []\n      object.parameters.each do |var, val|\n        if val\n          args << { 'name' => var, 'default'=>val }\n        else\n          args << { 'name' => var }\n        end\n      end\n\n      rtns = []\n      object.tags(:return).each do |t|\n        t.types.each do |ty|\n          rtns << { 'type' => ty, 'comment' => t.text }\n        end\n      end\n\n      table[object.path] = {\n        '!'            => object.scope == :instance ? 'method' : 'function',\n        'name'         => object.name.to_s,\n        'parent'       => object.parent.path,\n        'comment'      => object.docstring.to_s,\n        'access'       => object.visibility.to_s,\n        'singleton'    => object.scope == :class,\n        'aliases'      => object.aliases.map{ |a| a.path }, #method_name(a) },\n        #'alias_for'    => method_name(m.is_alias_for),\n        'image'        => object.signature.sub('def ', ''), #m.params,\n        'arguments'    => args,\n        'parameters'   => [],\n        #'block'        => m.block_params, # TODO: what is block?\n        #'interface'    => object.arglists,\n        'returns'      => rtns,\n        'file'         => \"/#{object.file}\",\n        'line'         => object.line,\n        'source'       => object.source\n      }\n    end\n\n    # Generate a constant.\n    #\n    def generate_constant(object)\n      #full_name = \"#{base.full_name}::#{c.name}\"\n      debug_msg \"%s\" % [object.path]\n      table[object.name] = {\n        \"!\"         => \"constant\",\n        \"name\"      => object.name.to_s,\n        \"namespace\" => object.namespace.path,\n        \"comment\"   => object.docstring.to_s,\n        \"value\"     => object.value\n      }\n    end\n\n    # Generate a file.\n    #\n    def generate_file(object)\n      #debug_msg \"%s\" % [object.path]\n      table[object] = {\n        \"!\"         => \"file\",\n        \"name\"      => File.basename(object),\n        \"path\"      => object,\n        \"mtime\"     => File.mtime(object),\n        \"text\"      => File.read(object)\n      }\n    end\n\n    def generate_script(object)\n      debug_msg(\"%s #{object}\")\n#  \"/musicstore/song.rb\": {\n      table[object] = {\n        \"!\"           => \"script\",\n        \"name\"        => File.basename(object),\n        \"path\"        => object,\n        #\"loadpath\"    => \"lib\",\n        \"mtime\"       => File.mtime(object),\n        \"header\"      => \"\",\n        \"footer\"      => \"\",\n        # \"requires\"    : [\"fileutils\"],\n        # \"constants\"   : [\"MusicStore::CONFIG_DIRECTORY\"],\n        # \"modules\"     : [\"MusicStore\", \"MusicStore::MusicMixin\"],\n        # \"classes\"     : [\"MusicStore::Song\"],\n        # \"functions\"   : [\"MusicStore.config_directory\"],\n        # \"methods\"     : [\"MusicStore::MusicMixin#play\", \"MusicStore::MusicMixin#artist\"]\n        \"source\"      => File.read(object)\n      }\n    end\n\n    # Output progress information if debugging is enabled\n    #\n    def debug_msg(msg)\n      return unless $DEBUG\n      case msg[-1,1]\n        when '.' then tab = \"= \"\n        when ':' then tab = \"== \"\n        else          tab = \"* \"\n      end\n      $stderr.puts(tab + msg)\n    end\n\n  end\n\nend\n"},"lib/shomen/rdoc/generator.rb":{"!":"script","name":"generator.rb","path":"lib/shomen/rdoc/generator.rb","mtime":"2011-04-15 12:05:28 -0400","header":"","footer":"","source":"#begin\n#  # requiroing rubygems is needed here b/c ruby comes with\n#  # rdoc but it's not the latest version.\n#  require 'rubygems'\n#  #gem 'rdoc', '>= 2.4' unless ENV['RDOC_TEST'] or defined?($rdoc_rakefile)\n#  gem \"rdoc\", \">= 2.4.2\"\n#rescue\n#end\n\n#if Gem.available? \"json\"\n#  gem \"json\", \">= 1.1.3\"\n#else\n#  gem \"json_pure\", \">= 1.1.3\"\n#end\n#require 'json'\n\nrequire 'fileutils'\nrequire 'pp'\nrequire 'pathname'\nrequire 'yaml'\nrequire 'json'\n\nrequire 'rdoc/rdoc'\nrequire 'rdoc/generator'\nrequire 'rdoc/generator/markup'\n\n#require 'shomen/metadata'\n\n# TODO: options = { :verbose => $DEBUG_RDOC, :noop => $dryrun }\ndef fileutils\n  $dryrun ? FileUtils::DryRun : FileUtils\nend\n\n# Shomen Adaptor for RDoc\n#\n# Of course RDoc is almost entirely a free-form documentation system,\n# so it is not possible for Shomen to fully harness all the details it\n# can support from the RDoc documentation.\n\nclass RDoc::Generator::Shomen\n\n  # Register shomen generator with RDoc.\n  RDoc::RDoc.add_generator self\n\n  # Base of file name used to save output.\n  FILENAME = \"shomen\"\n\n  #include RDocShomen::Metadata\n\n  #PATH = Pathname.new(File.dirname(__FILE__))\n\n  # Standard generator factory method.\n  def self.for(options)\n    new(options)\n  end\n\n  # User options from the command line.\n  attr :options\n\n  # List of all classes and modules.\n  #def all_classes_and_modules\n  #  @all_classes_and_modules ||= RDoc::TopLevel.all_classes_and_modules\n  #end\n\n  # In the world of the RDoc Generators #classes is the same as \n  # #all_classes_and_modules. Well, except that its sorted too.\n  # For classes sans modules, see #types.\n\n  def classes\n    @classes ||= RDoc::TopLevel.all_classes_and_modules.sort\n  end\n\n  # Only toplevel classes and modules.\n\n  def classes_toplevel\n    @classes_toplevel ||= classes.select {|klass| !(RDoc::ClassModule === klass.parent) }\n  end\n\n  ## Documented classes and modules sorted by salience first, then by name.\n  #def classes_salient\n  #  @classes_salient ||= sort_salient(classes)\n  #end\n\n  #\n  #def classes_hash\n  #  @classes_hash ||= RDoc::TopLevel.modules_hash.merge(RDoc::TopLevel.classes_hash)\n  #end\n\n  #\n  #def modules\n  #  @modules ||= RDoc::TopLevel.modules.sort\n  #end\n\n  #\n  #def modules_toplevel\n  #  @modules_toplevel ||= modules.select {|klass| !(RDoc::ClassModule === klass.parent) }\n  #end\n\n  #\n  #def modules_salient\n  #  @modules_salient ||= sort_salient(modules)\n  #end\n\n  #\n  #def modules_hash\n  #  @modules_hash ||= RDoc::TopLevel.modules_hash\n  #end\n\n  #\n  #def types\n  #  @types ||= RDoc::TopLevel.classes.sort\n  #end\n\n  #\n  #def types_toplevel\n  #  @types_toplevel ||= types.select {|klass| !(RDoc::ClassModule === klass.parent) }\n  #end\n\n  #\n  #def types_salient\n  #  @types_salient ||= sort_salient(types)\n  #end\n\n  #\n  #def types_hash\n  #  @types_hash ||= RDoc::TopLevel.classes_hash\n  #end\n\n  #\n\n  def files\n    @files ||= RDoc::TopLevel.files\n  end\n\n  # List of toplevel files. RDoc supplies this via the #generate method.\n\n  def files_toplevel\n    @files_toplevel ||= (\n      @files_rdoc.select{ |f| f.parser == RDoc::Parser::Simple }\n    )\n  end\n\n  #\n\n  def files_hash\n    @files ||= RDoc::TopLevel.files_hash\n  end\n\n  # List of all methods in all classes and modules.\n  def methods_all\n    @methods_all ||= classes.map{ |m| m.method_list }.flatten.sort\n  end\n\n  ## TODO: What's this then?\n  ##def json_creatable?\n  ##  RDoc::TopLevel.json_creatable?\n  ##end\n\n  # RDoc needs this to function.\n  def class_dir ; nil ; end\n\n  # RDoc needs this to function.\n  def file_dir  ; nil ; end\n\n  # Build the initial indices and output objects\n  # based on an array of top level objects containing\n  # the extracted information.\n  def generate(files)\n    @files_rdoc = files.sort\n\n    @table = {}\n\n    generate_metadata(@table)\n    generate_constants(@table)\n    generate_classes(@table)\n    generate_methods(@table)\n    generate_scripts(@table)   # have to do this last b/c it depends on the others\n    generate_files(@table)\n\n    #pp table if $DEBUG\n\n    #file = File.join(@path_output, 'rdoc.jsync')\n\n    yaml = @table.to_yaml\n    File.open(FILENAME + '.yaml', 'w'){ |f| f << yaml }\n\n    json = JSON.generate(@table)\n    File.open(FILENAME + '.json', 'w'){ |f| f << json }\n\n    # TODO: Internal referencing model, YAML and JSYNC ?\n\n    #ref_table = reference_table(@table)\n    #yaml = ref_table.to_yaml\n    #File.open(FILENAME + '-ref.yaml', 'w'){ |f| f << yaml }\n\n  #rescue StandardError => err\n  #  debug_msg \"%s: %s\\n  %s\" % [ err.class.name, err.message, err.backtrace.join(\"\\n  \") ]\n  #  raise err\n  end\n\n  # Loop through table and convert all named references into bonofied object\n  # references.\n  def reference_table(table)\n    debug_msg \"== Generating Reference Table\"\n    new_table = {}\n    table.each do |key, entry|\n      debug_msg \"%s\" % [key]\n      data = entry.dup\n      new_table[key] = data\n      case data['!']\n      when 'script'\n        data[\"constants\"]  = ref_list(data[\"constants\"])\n        data[\"modules\"]    = ref_list(data[\"modules\"])\n        data[\"classes\"]    = ref_list(data[\"classes\"])\n        data[\"functions\"]  = ref_list(data[\"functions\"])\n        data[\"methods\"]    = ref_list(data[\"methods\"])\n      when 'file'\n      when 'constant'\n        data[\"namespace\"]  = ref_item(data[\"namespace\"])\n      when 'module', 'class'\n        data[\"namespace\"]  = ref_item(data[\"namespace\"])\n        data[\"includes\"]   = ref_list(data[\"includes\"])\n        #data[\"extended\"]  = ref_list(data[\"extended\"])\n        data[\"constants\"]  = ref_list(data[\"constants\"])\n        data[\"modules\"]    = ref_list(data[\"modules\"])\n        data[\"classes\"]    = ref_list(data[\"classes\"])\n        data[\"functions\"]  = ref_list(data[\"functions\"])\n        data[\"methods\"]    = ref_list(data[\"methods\"])\n        data[\"files\"]      = ref_list(data[\"files\"])\n        data[\"superclass\"] = ref_item(data[\"superclass\"]) if data.key?(\"superclass\")\n      when 'method', 'function'\n        data[\"parent\"]     = ref_item(data[\"parent\"])\n        data[\"file\"]       = ref_item(data[\"file\"])\n      end\n    end\n    new_table\n  end\n\n  # Given a key, return the matching table item. If not found return the key.\n  def ref_item(key)\n    @table[key] || key\n  end\n\n  # Given a list of keys, return the matching table items.\n  def ref_list(keys)\n    #keys.map{ |k| @table[k] || k }\n    keys.map{ |k| @table[k] || nil }.compact\n  end\n\n  #\n  #def metadata\n  #  @metadata ||= get_metadata\n  #end\n\n  # TODO: Need a better way to determine if POM::Metadata exists.\n  #def get_metadata\n  #  data = OpenStruct.new\n  #  begin\n  #    require 'gemdo/metadata'\n  #    pom = GemDo::Metadata.new(path_base)\n  #    raise LoadError unless pom.name\n  #    data.title       = pom.title\n  #    data.version     = pom.version\n  #    data.subtitle    = nil #pom.subtitle\n  #    data.homepage    = pom.homepage\n  #    data.resources   = pom.resources\n  #    data.mailinglist = pom.resources.mailinglist\n  #    data.development = pom.resources.development\n  #    data.forum       = pom.forum\n  #    data.wiki        = pom.wiki\n  #    data.blog        = pom.blog\n  #    data.copyright   = pom.copyright\n  #  rescue LoadError\n  #    if file = Dir[path_base + '*.gemspec'].first\n  #      gem = YAML.load(file)\n  #      data.title       = gem.title\n  #      data.version     = gem.version\n  #      data.subtitle    = nil\n  #      date.homepage    = gem.homepage\n  #      data.mailinglist = gem.email\n  #      data.development = nil\n  #      data.forum       = nil\n  #      data.wiki        = nil\n  #      data.blog        = nil\n  #      data.copyright   = nil\n  #    else\n  #      puts \"No Metadata!\"\n  #      # TODO: we may be able to develop some other hueristics here, but for now, nope.\n  #    end\n  #  end\n  #  return data\n  #end\n\nprotected\n\n  #\n  def initialize(options)\n    @options = options\n    #@options.diagram = false  # why?\n\n    @path_base   = Pathname.pwd.expand_path\n    @path_output = Pathname.new(@options.op_dir).expand_path(@path_base)\n  end\n\n  # Current pathname.\n  attr :path_base\n\n  # The output path.\n  attr :path_output\n\n  #\n  def path_output_relative(path=nil)\n    if path\n      path.to_s.sub(path_base.to_s+'/', '')\n    else\n      @path_output_relative ||= path_output.to_s.sub(path_base.to_s+'/', '')\n    end\n  end\n\n  #\n  def generate_metadata(table)\n    begin\n      #require 'pom/project'\n      generate_metadata_from_spec(table)\n    rescue Exception => error\n      puts error\n      begin\n        if spec = Dir['*.gemspec'].first\n          require 'rubygems/specification'\n          generate_metadata_from_gemspec(table)\n        end\n      rescue Exception\n        debug_msg \"Could not find any meatadata.\"\n      end\n    end\n  end\n\n  #\n  SPEC_GLOB = '{.ruby,.rubyspec}'\n\n  #\n  def generate_metadata_from_spec(table)\n    file = Dir[path_base + SPEC_GLOB].first\n    data = YAML.load(File.new(file))\n    table['(metadata)'] = {\n      \"!\"           => \"metadata\",\n      \"name\"        => data['name'],\n      \"version\"     => data['version'],\n      \"title\"       => data['title'],\n      \"summary\"     => data['summary'],\n      \"description\" => data['description'],\n      \"contact\"     => data['contact'],\n      \"resources\"   => data['resources'],\n      \"markup\"      => 'rdoc'\n    }\n  end\n\n  #\n  #def generate_metadata_from_pom(table)\n  #  project = POM::Project.new\n  #  table['(metadata)'] = {\n  #    \"!\"           => \"metadata\",\n  #    \"name\"        => project.name,\n  #    \"version\"     => project.version,\n  #    \"title\"       => project.title,\n  #    \"summary\"     => project.metadata.summary,\n  #    \"description\" => project.metadata.description,\n  #    \"contact\"     => project.metadata.contact,\n  #    \"homepage\"    => project.metadata.resources.home\n  #  }\n  #end\n\n  #\n  GEMSPEC_GLOB = '{.gemspec,*.gemspec}'\n\n  #\n  def generate_metadata_from_gemspec(table)\n    file = Dir[path_base + GEMSPEC_GLOB].first\n    spec = RubyGems::Specification.new(file)  #?\n    table['(metadata)'] = {\n      \"!\"           => \"metadata\",\n      \"name\"        => spec.name,\n      \"title\"       => spec.name.upcase,\n      \"version\"     => spec.version.to_s,\n      \"summary\"     => spec.summary,\n      \"description\" => spec.description,\n      \"contact\"     => spec.email,\n      \"resources\"   => { \"homepage\" => spec.homepage },\n      \"markup\"      => 'rdoc'\n    }\n  end\n\n  #\n  def generate_constants(table)\n    debug_msg \"Generating constant documentation:\"\n    classes.each do |base|\n      base.constants.each do |c|\n        full_name = \"#{base.full_name}::#{c.name}\"\n        debug_msg \"%s\" % [full_name]\n        table[full_name] = {\n          \"!\"         => \"constant\",\n          \"name\"      => c.name,\n          \"namespace\" => \"#{base.full_name}\",\n          \"comment\"   => c.comment, # description\n          \"value\"     => c.value\n        }\n      end\n    end\n    return table     \n  end\n\n  # Generate a documentation file for each class\n  def generate_classes(table)\n    debug_msg \"Generating class documentation:\"\n\n    classes.each do |c|\n      debug_msg \"%s (%s)\" % [ c.full_name, c.path ]\n      #outfile    = self.path_output + klass.path\n      #rel_prefix = self.path_output.relative_path_from(outfile.dirname)\n      #debug_msg \"rendering #{path_output_relative(outfile)}\"\n      #self.render_template(templatefile, outfile, :klass=>klass, :rel_prefix=>rel_prefix)\n\n      data = {}\n      data[\"!\"]          = (c.type == 'class' ? \"class\" : \"module\")\n      data[\"name\"]       = c.name\n      data[\"namespace\"]  = c.full_name.split('::')[0...-1].join('::')\n      data[\"includes\"]   = c.includes.map{ |x| x.name }\n      #data[\"extended\"]  = []  # TODO: how?\n      data[\"comment\"]    = c.comment\n      data[\"constants\"]  = c.constants.map{ |x| complete_name(x.name, c.full_name) }\n      data[\"modules\"]    = c.modules.map{ |x| complete_name(x.name, c.full_name) }\n      data[\"classes\"]    = c.classes.map{ |x| complete_name(x.name, c.full_name) }\n      data[\"functions\"]  = collect_methods(c, true)\n      data[\"methods\"]    = collect_methods(c, false)\n      data[\"files\"]      = c.in_files.map{ |x| x.full_name }\n      data[\"superclass\"] = c.superclass if c.type == 'class'\n\n      table[c.full_name] = data\n    end\n    return table\n  end\n\n  # Returns String of fully qualified name.\n  def complete_name(name, namespace)\n    if name !~ /^#{namespace}/\n      \"#{namespace}::#{name}\"\n    else\n      name\n    end\n  end\n\n  #\n  def generate_methods(table)\n    debug_msg \"Generating method documentation:\"\n    methods_all.each do |m|\n      debug_msg \"%s\" % [m.full_name]\n\n      code       = m.source_code_raw\n      file, line = m.source_code_location\n\n      full_name = method_name(m)\n\n      #'prettyname'   => m.pretty_name,\n      #'type'         => m.type, # class or instance\n\n      table[full_name] = {\n        '!'            => (m.singleton ? 'function' : 'method'),\n        'name'         => m.name,\n        'parent'       => m.parent_name,\n        'comment'      => m.comment,\n        'access'       => m.visibility.to_s,\n        'singleton'    => m.singleton,\n        'aliases'      => m.aliases.map{ |a| method_name(a) },\n        'alias_for'    => method_name(m.is_alias_for),\n        'image'        => m.params,\n        'arguments'    => [],\n        'parameters'   => [],\n        'block'        => m.block_params, # TODO: what is block?\n        'interface'    => m.arglists,\n        'returns'      => [],\n        'file'         => file,\n        'line'         => line,\n        'source'       => code\n      }\n    end\n    return table\n  end\n\n  # Generate a documentation file for each file.\n  #--\n  # TODO: Add loadpath and make file path relative to it?\n  #++\n  def generate_scripts(table)\n    debug_msg \"Generating file documentation in #{path_output_relative}:\"\n    #templatefile = self.path_template + 'file.rhtml'\n\n    files.each do |file|\n      debug_msg \"%s\" % [file.full_name]\n\n      abspath = File.join(path_base, file.full_name)\n\n      #rel_prefix  = self.path_output.relative_path_from(outfile.dirname)\n      #context     = binding()\n      #debug_msg \"rendering #{path_output_relative(outfile)}\"\n\n      modules = table.select { |k, h|\n        h['!'] == 'module' && h['files'].include?(file.full_name)\n      }.map{ |k, h| k }\n\n      classes = table.select { |k, h|\n        h['!'] == 'class' && h['files'].include?(file.full_name)\n      }.map{ |k, h| k }\n\n      functions = table.select { |k, h|\n        h['!'] == 'function' && h['file'] == file.full_name\n      }.map{ |k, h| k }\n\n      methods = table.select { |k, h|\n        h['!'] == 'method' && h['file'] == file.full_name\n      }.map{ |k, h| k }\n\n      table[file.full_name] = {\n        \"!\"          => \"script\",\n        \"name\"       => File.basename(file.full_name),\n        \"path\"       => File.dirname(file.full_name),\n        \"mtime\"      => File.mtime(abspath),\n        \"header\"     => \"\", # TODO\n        \"footer\"     => \"\", # TODO\n        \"requires\"   => file.requires.map{ |r| r.name },\n        \"constants\"  => file.constants.map{ |c| c.full_name },\n        \"modules\"    => modules,   #file.modules.map{ |x| x.name },\n        \"classes\"    => classes,   #file.classes.map{ |x| x.name },\n        \"functions\"  => functions, #collect_methods(file, true),\n        \"methods\"    => methods    #collect_methods(file, false)\n      }\n\n      #self.render_template(templatefile, outfile, :file=>file, :rel_prefix=>rel_prefix)\n    end\n    return table\n  end\n\n  # Generate entries for whole information files, e.g. README files.\n  def generate_files(table)\n    files_toplevel.each do |file|\n      abspath = File.join(path_base, file.full_name)\n      table[file.full_name] = {\n        \"!\"     => \"file\",\n        \"name\"  => File.basename(file.full_name),\n        \"path\"  => File.dirname(file.full_name),\n        \"mtime\" => File.mtime(abspath),\n        \"text\"  => File.read(abspath) #file.comment\n      }\n    end\n  end\n\n  #\n  def collect_methods(class_module, singleton=false)\n    list = []\n    class_module.method_list.each do |m|\n      next if singleton ^ m.singleton\n      list << method_name(m)\n    end\n    class_module.attributes.each do |a|\n      next if singleton ^ a.singleton\n      #p a.rw\n      case a.rw\n      when :write\n        list << \"#{method_name(a)}=\"\n      else\n        list << method_name(a)\n      end\n    end\n    list.uniq\n  end\n\n  #\n  def method_name(method)\n    return nil if method.nil?\n    if method.singleton\n      i = method.full_name.rindex('::')     \n      method.full_name[0...i] + '.' + method.full_name[i+2..-1]\n    else\n      method.full_name\n    end\n  end\n\n  # Output progress information if rdoc debugging is enabled\n\n  def debug_msg(msg)\n    return unless $DEBUG_RDOC\n    case msg[-1,1]\n      when '.' then tab = \"= \"\n      when ':' then tab = \"== \"\n      else          tab = \"* \"\n    end\n    $stderr.puts(tab + msg)\n  end\n\n=begin\n  #\n  # N O T  U S E D\n  #\n\n  # Sort based on how often the top level namespace occurs, and then on the\n  # name of the module -- this works for projects that put their stuff into\n  # a namespace, of course, but doesn't hurt if they don't.\n  def sort_salient(classes)\n    nscounts = classes.inject({}) do |counthash, klass|\n      top_level = klass.full_name.gsub( /::.*/, '' )\n      counthash[top_level] ||= 0\n      counthash[top_level] += 1\n      counthash\n    endfiles_toplevel\n    classes.sort_by{ |klass|\n      top_level = klass.full_name.gsub( /::.*/, '' )\n      [nscounts[top_level] * -1, klass.full_name]\n    }.select{ |klass|\n      klass.document_self\n    }\n  end\n\n\n  # Generate an index page\n  def generate_index_file\n    debug_msg \"Generating index file in #@path_output\"\n    templatefile = @path_template + 'index.rhtml'\n\n    template_src = templatefile.read\n\n    template = ERB.new(template_src, nil, '<>')\n    template.filename = templatefile.to_s\n    context = binding()\n\n    output = nil\n\n    begin\n      output = template.result(context)\n    rescue NoMethodError => err\n      raise RDoc::Error, \"Error while evaluating %s: %s (at %p)\" % [\n        templatefile,\n        err.message,\n        eval( \"_erbout[-50,50]\", context )\n      ], err.backtrace\n    end\n\n    outfile = path_base + @options.op_dir + 'index.html'\n    unless $dryrun\n      debug_msg \"Outputting to %s\" % [outfile.expand_path]\n      outfile.open( 'w', 0644 ) do |fh|\n        fh.print( output )\n      end\n    else\n      debug_msg \"Would have output to %s\" % [outfile.expand_path]\n    end\n  end\n=end\n\n=begin\n    # Load and render the erb template in the given +templatefile+ within the\n    # specified +context+ (a Binding object) and write it out to +outfile+.\n    # Both +templatefile+ and +outfile+ should be Pathname-like objects.\n\n    def render_template(templatefile, outfile, local_assigns)\n      output = erb_template.render(templatefile, local_assigns)\n\n      #output = eval_template(templatefile, context)\n\n      # TODO: delete this dirty hack when documentation for example for GeneratorMethods will not be cutted off by <script> tag\n      begin\n        if output.respond_to? :force_encoding\n          encoding = output.encoding\n          output = output.force_encoding('ASCII-8BIT').gsub('<script>', '&lt;script;&gt;').force_encoding(encoding)\n        else\n          output = output.gsub('<script>', '&lt;script&gt;')\n        end\n      rescue Exception => e\n      end\n\n      unless $dryrun\n        outfile.dirname.mkpath\n        outfile.open( 'w', 0644 ) do |file|\n          file.print( output )\n        end\n      else\n        debug_msg \"would have written %d bytes to %s\" %\n        [ output.length, outfile ]\n      end\n    end\n=end\n\n=begin\n    # Load and render the erb template in the given +templatefile+ within the\n    # specified +context+ (a Binding object) and return output\n    # Both +templatefile+ and +outfile+ should be Pathname-like objects.\n\n    def eval_template(templatefile, context)\n      template_src = templatefile.read\n      template = ERB.new(template_src, nil, '<>')\n      template.filename = templatefile.to_s\n\n      begin\n        template.result(context)\n      rescue NoMethodError => err\n        raise RDoc::Error, \"Error while evaluating %s: %s (at %p)\" % [\n          templatefile.to_s,\n          err.message,\n          eval(\"_erbout[-50,50]\", context)\n        ], err.backtrace\n      end\n    end\n=end\n\n#    #\n#\n#    def erb_template\n#      @erb_template ||= Template.new(self, provisions)\n#    end\n\n=begin\n  def render_template( templatefile, context, outfile )\n    template_src = templatefile.read\n    template = ERB.new( template_src, nil, '<>' )\n    template.filename = templatefile.to_s\n\n    output = begin\n               template.result( context )\n             rescue NoMethodError => err\n               raise RDoc::Error, \"Error while evaluating %s: %s (at %p)\" % [\n                 templatefile.to_s,\n                 err.message,\n                 eval( \"_erbout[-50,50]\", context )\n               ], err.backtrace\n             end\n\n    unless $dryrun\n      outfile.dirname.mkpath\n      outfile.open( 'w', 0644 ) do |ofh|\n        ofh.print( output )\n      end\n    else\n      debug_msg \"  would have written %d bytes to %s\" %\n      [ output.length, outfile ]\n    end\n  end\n=end\n\nend\n\n\nrequire \"rdoc/parser/c\"\n\n# New RDoc somehow misses class comemnts.\n# copyied this function from \"2.2.2\" \nif ['2.4.2', '2.4.3'].include? RDoc::VERSION\n  class RDoc::Parser::C\n    def find_class_comment(class_name, class_meth)\n      comment = nil\n      if @content =~ %r{((?>/\\*.*?\\*/\\s+))\n                     (static\\s+)?void\\s+Init_#{class_name}\\s*(?:_\\(\\s*)?\\(\\s*(?:void\\s*)\\)}xmi then\n        comment = $1\n      elsif @content =~ %r{Document-(?:class|module):\\s#{class_name}\\s*?(?:<\\s+[:,\\w]+)?\\n((?>.*?\\*/))}m\n        comment = $1\n      else\n        if @content =~ /rb_define_(class|module)/m then\n          class_name = class_name.split(\"::\").last\n          comments = []\n          @content.split(/(\\/\\*.*?\\*\\/)\\s*?\\n/m).each_with_index do |chunk, index|\n            comments[index] = chunk\n            if chunk =~ /rb_define_(class|module).*?\"(#{class_name})\"/m then\n              comment = comments[index-1]\n              break\n            end\n          end\n        end\n      end\n      class_meth.comment = mangle_comment(comment) if comment\n    end\n  end\nend\n\n\nclass RDoc::TopLevel\n  #\n  def to_h\n    {\n       :path     => path,\n       :name     => base_name,\n       :fullname => full_name,\n       :rootname => absolute_name,\n       :modified => last_modified,\n       :diagram  => diagram\n    }\n  end\n\n  #\n  def to_json\n    to_h.to_json\n  end\nend\n\n\nclass RDoc::ClassModule\n  #\n  def with_documentation?\n    document_self_or_methods || classes_and_modules.any?{ |c| c.with_documentation? }\n  end\n\n  #\n  def document_self_or_methods\n    document_self || method_list.any?{ |m| m.document_self }\n  end\n\n#  #\n#  def to_h\n#    {\n#      :name       => name,\n#      :fullname   => full_name,\n#      :type       => type,\n#      :path       => path,\n#      :superclass => module? ? nil : superclass\n#    }\n#  end\n#\n#  def to_json\n#    to_h.to_json\n#  end\nend\n\n\nclass RDoc::AnyMethod\n\n#  # NOTE: dont_rename_initialize isn't used\n#  def to_h\n#    {\n#      :name         => name,\n#      :fullname     => full_name,\n#      :prettyname   => pretty_name,\n#      :path         => path,\n#      :type         => type,\n#      :visibility   => visibility,\n#      :blockparams  => block_params,\n#      :singleton    => singleton,\n#      :text         => text,\n#      :aliases      => aliases,\n#      :aliasfor     => is_alias_for,\n#      :aref         => aref,\n#      :parms        => params,\n#      :callseq      => call_seq\n#      #:paramseq     => param_seq,\n#    }\n#  end\n\n#  #\n#  def to_json\n#    to_h.to_json\n#  end\n\n  #\n  def source_code_raw\n    return '' unless @token_stream\n    src = \"\"\n    @token_stream.each do |t|\n      next unless t\n      src << t.text\n    end\n    #add_line_numbers(src)\n    src\n  end\n\n  #\n  def source_code_location\n    src = source_code_raw\n    if md = /File (.*?), line (\\d+)/.match(src)\n      file = md[1]\n      line = md[2]\n    else\n      file = \"(unknown)\"\n      line = 0\n    end\n    return file, line\n  end\n\nend\n\n"},"lib/shomen/hyper/jquery.jqote2.min.js":{"!":"script","name":"jquery.jqote2.min.js","path":"lib/shomen/hyper/jquery.jqote2.min.js","mtime":"2010-09-26 07:02:03 -0400","header":"","footer":"","source":"/*\n * jQote2 - client-side Javascript templating engine\n * Copyright (C) 2010, aefxx\n * http://aefxx.com/\n *\n * Dual licensed under the WTFPL v2 or MIT (X11) licenses\n * WTFPL v2 Copyright (C) 2004, Sam Hocevar\n *\n * Date: Sat, Jun 29th, 2010\n * Version: 0.9.5\n */\n(function($){var _=false,E1=\"UndefinedTemplateError\",E2=\"TemplateCompilationError\",E3=\"TemplateExecutionError\",A=\"[object Array]\",S=\"[object String]\",F=\"[object Function]\",n=1,c=\"%\",q=/^[^<]*(<[\\w\\W]+>)[^>]*$/,ts=Object.prototype.toString;function r(e,x){throw $.extend(e,x),e;}function dns(f){var a=[];if(ts.call(f)!==A)return _;for(var i=0,l=f.length;i<l;i++)a[i]=f[i].id;return a.length?a.sort().join(\".\").replace(/(\\b\\d+\\b)\\.(?:\\1(\\.|$))+/g,\"$1$2\"):_}function l(s,t){var f,g=[],t=t||c,x=ts.call(s);\nif(x===F)return s.jqote_id?[s]:_;if(x!==A)return[$.jqotec(s,t)];return g.length?g:_}$.fn.extend({jqote:function(x,y){var x=ts.call(x)===A?x:[x],d=\"\";this.each(function(i){var f=$.jqotec(this,y);for(var j=0;j<x.length;j++)d+=f.call(x[j],i,j,x,f)});return d}});$.each({app:\"append\",pre:\"prepend\",sub:\"html\"},function(x,y){$.fn[\"jqote\"+x]=function(e,d,t){var p,r,s=$.jqote(e,d,t),$$=!q.test(s)?function(s){return $(document.createTextNode(s))}:$;if(!!(p=dns(l(e))))r=new RegExp(\"(^|\\\\.)\"+p.split(\".\").join(\"\\\\.(.*)?\")+\n\"(\\\\.|$)\");return this.each(function(){var z=$$(s);$(this)[y](z);(z[0].nodeType===3?$(this):z).trigger(\"jqote.\"+x,[z,r])})}});$.extend({jqote:function(e,d,t){var s=\"\",t=t||c,f=l(e);if(f===_)r(new Error(\"Empty or undefined template passed to $.jqote\"),{type:E1});d=ts.call(d)!==A?[d]:d;for(var i=0,m=f.length;i<m;i++)for(var j=0;j<d.length;j++)s+=f[i].call(d[j],i,j,d,f[i]);return s},jqotec:function(x,t){var h,e,y,t=t||c,z=ts.call(x);if(z===S&&q.test(x)){e=y=x;if(h=$.jqotecache[x])return h}else{e=z===\nS||x.nodeType?$(x):x instanceof jQuery?x:null;if(!e[0]||!(y=e[0].innerHTML))r(new Error(\"Empty or undefined template passed to $.jqotec\"),{type:E1});if(h=$.jqotecache[$.data(e[0],\"jqote_id\")])return h}var s=\"\",i,a=y.replace(/\\s*<!\\[CDATA\\[\\s*|\\s*\\]\\]>\\s*|[\\r\\n\\t]/g,\"\").split(\"<\"+t).join(t+\">\\u001b\").split(t+\">\");for(var m=0,k=a.length;m<k;m++)s+=a[m].charAt(0)!==\"\\u001b\"?\"out+='\"+a[m].replace(/([^\\\\])?([\"'])/g,\"$1\\\\$2\")+\"'\":a[m].charAt(1)===\"=\"?\";out+=(\"+a[m].substr(2)+\");\":\";\"+a[m].substr(1);s=\"try{\"+\n('var out=\"\";'+s+\";return out;\").split(\"out+='';\").join(\"\").split('var out=\"\";out+=').join(\"var out=\")+'}catch(e){e.type=\"'+E3+'\";e.args=arguments;e.template=arguments.callee.toString();throw e;}';try{var f=new Function(\"i, j, data, fn\",s)}catch(e){r(e,{type:E2})}i=e instanceof jQuery?$.data(e[0],\"jqote_id\",n):e;return $.jqotecache[i]=(f.jqote_id=n++,f)},jqotefn:function(e){var t=ts.call(e),i=t===S&&q.test(e)?e:$.data($(e)[0],\"jqote_id\");return $.jqotecache[i]||_},jqotetag:function(s){c=s},jqotecache:{}});\n$.event.special.jqote={add:function(o){var n,h=o.handler,d=!o.data?[]:ts.call(o.data)!==A?[o.data]:o.data;if(!d.length||!(n=dns(l(d))))return}}})(jQuery);\n"},"lib/shomen/hyper/rdoc.json":{"!":"file","name":"rdoc.json","path":"lib/shomen/hyper/rdoc.json","mtime":"2010-09-26 07:40:18 -0400","text":"{\"lib/rdoc/generator/shomen.rb\":{\"methods\":[\"RDoc::Generator::Shomen#modules\",\"RDoc::Generator::Shomen#file_dir\",\"RDoc::Generator::Shomen#ref_list\",\"RDoc::Generator::Shomen#collect_methods\",\"RDoc::Generator::Shomen#class_dir\",\"RDoc::Generator::Shomen#generate_methods\",\"RDoc::Generator::Shomen#files\",\"RDoc::Generator::Shomen#reference?\",\"RDoc::Generator::Shomen#methods_all\",\"RDoc::AnyMethod#source_code_raw\",\"RDoc::Generator::Shomen#types_salient\",\"RDoc::TopLevel#to_h\",\"RDoc::Generator::Shomen#classes_salient\",\"RDoc::Generator::Shomen#modules_hash\",\"RDoc::ClassModule#document_self_or_methods\",\"RDoc::Generator::Shomen#types\",\"RDoc::Generator::Shomen#files_hash\",\"RDoc::Generator::Shomen#modules_salient\",\"RDoc::Generator::Shomen#method_name\",\"RDoc::Generator::Shomen#path_output_relative\",\"RDoc::Generator::Shomen#classes\",\"RDoc::Generator::Shomen#sort_salient\",\"RDoc::Generator::Shomen#types_hash\",\"RDoc::Generator::Shomen#generate_files\",\"RDoc::Generator::Shomen#generate_constants\",\"RDoc::Generator::Shomen#generate_classes\",\"RDoc::AnyMethod#source_code_location\",\"RDoc::Generator::Shomen#generate_scripts\",\"RDoc::Generator::Shomen#types_toplevel\",\"RDoc::Generator::Shomen#debug_msg\",\"RDoc::Generator::Shomen#generate\",\"RDoc::Generator::Shomen#classes_toplevel\",\"RDoc::Generator::Shomen#classes_hash\",\"RDoc::Generator::Shomen#reference_table\",\"RDoc::Generator::Shomen#ref_item\",\"RDoc::Generator::Shomen#modules_toplevel\",\"RDoc::Generator::Shomen#files_toplevel\"],\"modules\":[],\"name\":\"shomen.rb\",\"!\":\"script\",\"header\":\"\",\"requires\":[\"rdoc/rdoc\",\"fileutils\",\"pp\",\"pathname\",\"yaml\",\"json\",\"rdoc/rdoc\",\"rdoc/generator\",\"rdoc/generator/markup\",\"rdoc-shomen/metadata\",\"rdoc/parser/c\"],\"classes\":[\"RDoc::TopLevel\",\"RDoc::Generator::Shomen\",\"RDoc::Parser::C\",\"RDoc::AnyMethod\",\"RDoc::ClassModule\"],\"functions\":[\"RDoc::Generator::Shomen.new\",\"RDoc::Generator::Shomen.for\"],\"footer\":\"\",\"path\":\"lib/rdoc/generator\",\"constants\":[]},\"RDoc::TopLevel\":{\"superclass\":\"Object\",\"methods\":[\"RDoc::TopLevel#to_h\",\"RDoc::TopLevel#to_json\"],\"modules\":[],\"comment\":\"\",\"name\":\"TopLevel\",\"!\":\"class\",\"includes\":[],\"files\":[\"lib/rdoc/generator/shomen.rb\",\"lib/rdoc-shomen/core_ext/rdoc.rb\"],\"namespace\":\"RDoc\",\"classes\":[],\"functions\":[],\"constants\":[]},\"Shomen::TimeDelta::WEEKS\":{\"comment\":\"\",\"name\":\"WEEKS\",\"!\":\"constant\",\"namespace\":\"Shomen::TimeDelta\",\"value\":\"7 * DAYS\"},\"RDoc::Generator::Shomen#modules\":{\"comment\":\"\",\"name\":\"modules\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"121\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"modules()\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 121\\n  def modules\\n    @modules ||= RDoc::TopLevel.modules.sort\\n  end\"},\"RDoc::Generator::Shomen\":{\"superclass\":\"Object\",\"methods\":[\"RDoc::Generator::Shomen#classes\",\"RDoc::Generator::Shomen#classes_toplevel\",\"RDoc::Generator::Shomen#classes_salient\",\"RDoc::Generator::Shomen#classes_hash\",\"RDoc::Generator::Shomen#modules\",\"RDoc::Generator::Shomen#modules_toplevel\",\"RDoc::Generator::Shomen#modules_salient\",\"RDoc::Generator::Shomen#modules_hash\",\"RDoc::Generator::Shomen#types\",\"RDoc::Generator::Shomen#types_toplevel\",\"RDoc::Generator::Shomen#types_salient\",\"RDoc::Generator::Shomen#types_hash\",\"RDoc::Generator::Shomen#files\",\"RDoc::Generator::Shomen#files_toplevel\",\"RDoc::Generator::Shomen#files_hash\",\"RDoc::Generator::Shomen#methods_all\",\"RDoc::Generator::Shomen#class_dir\",\"RDoc::Generator::Shomen#file_dir\",\"RDoc::Generator::Shomen#generate\",\"RDoc::Generator::Shomen#reference_table\",\"RDoc::Generator::Shomen#ref_item\",\"RDoc::Generator::Shomen#ref_list\",\"RDoc::Generator::Shomen#sort_salient\",\"RDoc::Generator::Shomen#reference?\",\"RDoc::Generator::Shomen#path_output_relative\",\"RDoc::Generator::Shomen#generate_constants\",\"RDoc::Generator::Shomen#generate_classes\",\"RDoc::Generator::Shomen#generate_methods\",\"RDoc::Generator::Shomen#generate_scripts\",\"RDoc::Generator::Shomen#generate_files\",\"RDoc::Generator::Shomen#collect_methods\",\"RDoc::Generator::Shomen#method_name\",\"RDoc::Generator::Shomen#debug_msg\",\"RDoc::Generator::Shomen#options\",\"RDoc::Generator::Shomen#path_base\",\"RDoc::Generator::Shomen#path_output\"],\"modules\":[],\"comment\":\"\",\"name\":\"Shomen\",\"!\":\"class\",\"includes\":[\"RDocShomen::Metadata\"],\"files\":[\"lib/rdoc/generator/shomen.rb\"],\"namespace\":\"RDoc::Generator\",\"classes\":[],\"functions\":[\"RDoc::Generator::Shomen.for\",\"RDoc::Generator::Shomen.new\"],\"constants\":[\"CLASS_DIR\",\"FILE_DIR\"]},\"RDoc::ClassModule#to_json\":{\"comment\":\"\",\"name\":\"to_json\",\"parent\":\"RDoc::ClassModule\",\"!\":\"method\",\"line\":\"75\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"to_json()\",\"block\":null,\"file\":\"lib/rdoc-shomen/core_ext/rdoc.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc-shomen/core_ext/rdoc.rb, line 75\\n  def to_json\\n    to_h.to_json\\n  end\"},\"Shomen::TimeDelta::DAYS\":{\"comment\":\"\",\"name\":\"DAYS\",\"!\":\"constant\",\"namespace\":\"Shomen::TimeDelta\",\"value\":\"24 * HOURS\"},\"RDoc::Generator::Shomen#file_dir\":{\"comment\":\"RDoc needs this to function.\",\"name\":\"file_dir\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"223\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"file_dir()\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 223\\n  def file_dir  ; FILE_DIR ; end\"},\"RDoc::Generator::Shomen#ref_list\":{\"comment\":\"\",\"name\":\"ref_list\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"307\",\"arguments\":\"(keys)\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"ref_list(keys)\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 307\\n  def ref_list(keys)\\n    keys.map{ |k| @table[k] || k }\\n  end\"},\"RDoc::Generator::Shomen#collect_methods\":{\"comment\":\"\",\"name\":\"collect_methods\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"523\",\"arguments\":\"(class_module, singleton=false)\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"collect_methods(class_module, singleton=false)\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"protected\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 523\\n  def collect_methods(class_module, singleton=false)\\n    list = []\\n    class_module.method_list.each do |m|\\n      next if singleton ^ m.singleton\\n      list << method_name(m)\\n    end\\n    class_module.attributes.each do |a|\\n      next if singleton ^ a.singleton\\n      #p a.rw\\n      case a.rw\\n      when :write\\n        list << \\\"#{method_name(a)}=\\\"\\n      else\\n        list << method_name(a)\\n      end\\n    end\\n    list.uniq\\n  end\"},\"RDoc::Generator::Shomen#class_dir\":{\"comment\":\"RDoc needs this to function.\",\"name\":\"class_dir\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"219\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"class_dir()\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 219\\n  def class_dir ; CLASS_DIR ; end\"},\"RDoc::Generator::Shomen#generate_methods\":{\"comment\":\"\",\"name\":\"generate_methods\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"426\",\"arguments\":\"(table)\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"generate_methods(table)\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"protected\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 426\\n  def generate_methods(table)\\n    debug_msg \\\"Generating method documentation:\\\"\\n    methods_all.each do |m|\\n      debug_msg \\\"%s\\\" % [m.full_name]\\n\\n      code       = m.source_code_raw\\n      file, line = m.source_code_location\\n\\n      full_name = method_name(m)\\n\\n      #'prettyname'   => m.pretty_name,\\n      #'type'         => m.type, # class or instance\\n\\n      table[full_name] = {\\n        '!'            => (m.singleton ? 'function' : 'method'),\\n        'name'         => m.name,\\n        'parent'       => m.parent_name,\\n        'comment'      => m.comment,\\n        'access'       => m.visibility.to_s,\\n        'singleton'    => m.singleton,\\n        'aliases'      => m.aliases.map{ |a| method_name(a) },\\n        'alias_for'    => method_name(m.is_alias_for),\\n        'arguments'    => m.params,\\n        'block'        => m.block_params,\\n        'interface'    => m.arglists,\\n        'returns'      => [],\\n        'file'         => file,\\n        'line'         => line,\\n        'source'       => code\\n      }\\n    end\\n    return table\\n  end\"},\"lib/rdoc-shomen/timedelta.rb\":{\"methods\":[\"Shomen::TimeDelta#time_delta_string\"],\"modules\":[\"Shomen\",\"Shomen::TimeDelta\"],\"name\":\"timedelta.rb\",\"!\":\"script\",\"header\":\"\",\"requires\":[],\"classes\":[],\"functions\":[],\"footer\":\"\",\"path\":\"lib/rdoc-shomen\",\"constants\":[]},\"lib/rdoc-shomen.rb\":{\"methods\":[],\"modules\":[],\"name\":\"rdoc-shomen.rb\",\"!\":\"script\",\"header\":\"\",\"requires\":[\"rdoc/generator/shomen\"],\"classes\":[],\"functions\":[],\"footer\":\"\",\"path\":\"lib\",\"constants\":[]},\"RDocShomen::Metadata\":{\"methods\":[\"RDocShomen::Metadata#metadata\",\"RDocShomen::Metadata#get_metadata\",\"RDocShomen::Metadata#scm\"],\"modules\":[],\"comment\":\"Metadata mixin, needs #path_base.\",\"name\":\"Metadata\",\"!\":\"module\",\"includes\":[],\"files\":[\"lib/rdoc-shomen/metadata.rb\"],\"namespace\":\"RDocShomen\",\"classes\":[],\"functions\":[],\"constants\":[]},\"RDoc::Generator::Shomen#files\":{\"comment\":\"\",\"name\":\"files\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"169\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"files()\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 169\\n  def files\\n    @files ||= RDoc::TopLevel.files\\n  end\"},\"RDoc::Parser::C\":{\"superclass\":\"Object\",\"methods\":[\"RDoc::Parser::C#find_class_comment\"],\"modules\":[],\"comment\":\"\",\"name\":\"C\",\"!\":\"class\",\"includes\":[],\"files\":[\"lib/rdoc/generator/shomen.rb\",\"lib/rdoc/c_parser_fix.rb\",\"lib/rdoc-shomen/core_ext/rdoc.rb\"],\"namespace\":\"RDoc::Parser\",\"classes\":[],\"functions\":[],\"constants\":[]},\"RDoc::Generator::Shomen#reference?\":{\"comment\":\"\",\"name\":\"reference?\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"344\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"reference?()\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"protected\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 344\\n  def reference?\\n    @reference\\n  end\"},\"RDoc::Generator::Shomen#methods_all\":{\"comment\":\"List of all methods in all classes and modules.\",\"name\":\"methods_all\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"188\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"methods_all()\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 188\\n  def methods_all\\n    @methods_all ||= classes.map{ |m| m.method_list }.flatten.sort\\n  end\"},\"RDoc::AnyMethod#source_code_raw\":{\"comment\":\"\",\"name\":\"source_code_raw\",\"parent\":\"RDoc::AnyMethod\",\"!\":\"method\",\"line\":\"804\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"source_code_raw()\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 804\\n  def source_code_raw\\n    return '' unless @token_stream\\n    src = \\\"\\\"\\n    @token_stream.each do |t|\\n      next unless t\\n      src << t.text\\n    end\\n    #add_line_numbers(src)\\n    src\\n  end\"},\"RDoc::Generator::Shomen.new\":{\"comment\":\"\",\"name\":\"new\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"function\",\"line\":\"334\",\"arguments\":\"(options)\",\"alias_for\":null,\"singleton\":true,\"returns\":[],\"interface\":\"new(options)\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 334\\n  def initialize(options)\\n    @options = options\\n    #@options.diagram = false  # why?\\n    #@reference = options.reference\\n\\n    @path_base   = Pathname.pwd.expand_path\\n    @path_output = Pathname.new(@options.op_dir).expand_path(@path_base)\\n  end\"},\"RDoc::Generator::Shomen#types_salient\":{\"comment\":\"\",\"name\":\"types_salient\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"157\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"types_salient()\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 157\\n  def types_salient\\n    @types_salient ||= sort_salient(types)\\n  end\"},\"RDoc::TopLevel#to_h\":{\"comment\":\"\",\"name\":\"to_h\",\"parent\":\"RDoc::TopLevel\",\"!\":\"method\",\"line\":\"729\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"to_h()\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 729\\n  def to_h\\n    {\\n       :path     => path,\\n       :name     => base_name,\\n       :fullname => full_name,\\n       :rootname => absolute_name,\\n       :modified => last_modified,\\n       :diagram  => diagram\\n    }\\n  end\"},\"Object#fileutils\":{\"comment\":\"TODO: options = { :verbose => $DEBUG_RDOC, :noop => $dryrun }\",\"name\":\"fileutils\",\"parent\":\"Object\",\"!\":\"method\",\"line\":\"6\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"fileutils()\",\"block\":null,\"file\":\"lib/rdoc-shomen/core_ext/fileutils.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc-shomen/core_ext/fileutils.rb, line 6\\ndef fileutils\\n  $dryrun ? FileUtils::DryRun : FileUtils\\nend\"},\"RDoc::Generator::Shomen.for\":{\"comment\":\"Standard generator factory method.\",\"name\":\"for\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"function\",\"line\":\"64\",\"arguments\":\"(options)\",\"alias_for\":null,\"singleton\":true,\"returns\":[],\"interface\":\"for(options)\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 64\\n  def self.for(options)\\n    new(options)\\n  end\"},\"RDoc::Generator::Shomen#classes_salient\":{\"comment\":\"Documented classes and modules sorted by salience first, then by name.\",\"name\":\"classes_salient\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"109\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"classes_salient()\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 109\\n  def classes_salient\\n    @classes_salient ||= sort_salient(classes)\\n  end\"},\"lib/rdoc/c_parser_fix.rb\":{\"methods\":[\"RDoc::Parser::C#find_class_comment\"],\"modules\":[],\"name\":\"c_parser_fix.rb\",\"!\":\"script\",\"header\":\"\",\"requires\":[\"rdoc/parser/c\"],\"classes\":[\"RDoc::Parser::C\"],\"functions\":[],\"footer\":\"\",\"path\":\"lib/rdoc\",\"constants\":[]},\"lib/rdoc-shomen/core_ext/fileutils.rb\":{\"methods\":[\"Object#fileutils\"],\"modules\":[],\"name\":\"fileutils.rb\",\"!\":\"script\",\"header\":\"\",\"requires\":[\"fileutils\"],\"classes\":[],\"functions\":[],\"footer\":\"\",\"path\":\"lib/rdoc-shomen/core_ext\",\"constants\":[]},\"RDoc::AnyMethod\":{\"superclass\":\"Object\",\"methods\":[\"RDoc::AnyMethod#source_code_raw\",\"RDoc::AnyMethod#source_code_location\",\"RDoc::AnyMethod#to_h\",\"RDoc::AnyMethod#to_json\"],\"modules\":[],\"comment\":\"\",\"name\":\"AnyMethod\",\"!\":\"class\",\"includes\":[],\"files\":[\"lib/rdoc/generator/shomen.rb\",\"lib/rdoc-shomen/core_ext/rdoc.rb\"],\"namespace\":\"RDoc\",\"classes\":[],\"functions\":[],\"constants\":[]},\"RDoc\":{\"methods\":[],\"modules\":[\"Parser\",\"Generator\"],\"comment\":\"\",\"name\":\"RDoc\",\"!\":\"module\",\"includes\":[],\"files\":[],\"namespace\":\"\",\"classes\":[\"Options\",\"AnyMethod\",\"ClassModule\",\"TopLevel\"],\"functions\":[\"RDoc.generator_option\"],\"constants\":[]},\"RDoc::Parser::C#find_class_comment\":{\"comment\":\"\",\"name\":\"find_class_comment\",\"parent\":\"RDoc::Parser::C\",\"!\":\"method\",\"line\":\"7\",\"arguments\":\"(class_name, class_meth)\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"find_class_comment(class_name, class_meth)\",\"block\":null,\"file\":\"lib/rdoc/c_parser_fix.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/c_parser_fix.rb, line 7\\n    def find_class_comment(class_name, class_meth)\\n      comment = nil\\n      if @content =~ %{((?>/\\\\*.*?\\\\*/\\\\s+))\\n                     (static\\\\s+)?void\\\\s+Init_#{class_name}\\\\s*(?:_\\\\(\\\\s*)?\\\\(\\\\s*(?:void\\\\s*)\\\\)}mi then\\n        comment = $1\\n      elsif @content =~ %{Document-(?:class|module):\\\\s#{class_name}\\\\s*?(?:<\\\\s+[:,\\\\w]+)?\\\\n((?>.*?\\\\*/))}\\n        comment = $1\\n      else\\n        if @content =~ /rb_define_(class|module)/ then\\n          class_name = class_name.split(\\\"::\\\").last\\n          comments = []\\n          @content.split(/(\\\\/\\\\*.*?\\\\*\\\\/)\\\\s*?\\\\n/).each_with_index do |chunk, index|\\n            comments[index] = chunk\\n            if chunk =~ /rb_define_(class|module).*?\\\"(#{class_name})\\\"/ then\\n              comment = comments[index-1]\\n              break\\n            end\\n          end\\n        end\\n      end\\n      class_meth.comment = mangle_comment(comment) if comment\\n    end\"},\"RDoc::Generator::Shomen#modules_hash\":{\"comment\":\"\",\"name\":\"modules_hash\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"139\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"modules_hash()\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 139\\n  def modules_hash\\n    @modules_hash ||= RDoc::TopLevel.modules_hash\\n  end\"},\"Numeric::Times\":{\"methods\":[],\"modules\":[],\"comment\":\"Time constants\\n\\nTODO: Use RichUnits instead (?)\",\"name\":\"Times\",\"!\":\"module\",\"includes\":[],\"files\":[\"lib/rdoc-shomen/core_ext/times.rb\"],\"namespace\":\"Numeric\",\"classes\":[],\"functions\":[],\"constants\":[]},\"RDoc::ClassModule#document_self_or_methods\":{\"comment\":\"\",\"name\":\"document_self_or_methods\",\"parent\":\"RDoc::ClassModule\",\"!\":\"method\",\"line\":\"754\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"document_self_or_methods()\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 754\\n  def document_self_or_methods\\n    document_self || method_list.any?{ |m| m.document_self }\\n  end\"},\"RDoc::Generator::Shomen#types\":{\"comment\":\"\",\"name\":\"types\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"145\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"types()\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 145\\n  def types\\n    @types ||= RDoc::TopLevel.classes.sort\\n  end\"},\"RDoc::Generator::Shomen#files_hash\":{\"comment\":\"\",\"name\":\"files_hash\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"183\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"files_hash()\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 183\\n  def files_hash\\n    @files ||= RDoc::TopLevel.files_hash\\n  end\"},\"RDoc::Generator::Shomen#modules_salient\":{\"comment\":\"\",\"name\":\"modules_salient\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"133\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"modules_salient()\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 133\\n  def modules_salient\\n    @modules_salient ||= sort_salient(modules)\\n  end\"},\"RDoc::Generator::Shomen#method_name\":{\"comment\":\"\",\"name\":\"method_name\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"543\",\"arguments\":\"(method)\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"method_name(method)\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"protected\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 543\\n  def method_name(method)\\n    return nil if method.nil?\\n    if method.singleton\\n      i = method.full_name.rindex('::')     \\n      method.full_name[0...i] + '.' + method.full_name[i+2..1]\\n    else\\n      method.full_name\\n    end\\n  end\"},\"RDoc::Generator::Shomen::FILE_DIR\":{\"comment\":\"Directory where generated files live relative to the root\\nTODO: Fix in future version when RDoc fixes.\",\"name\":\"FILE_DIR\",\"!\":\"constant\",\"namespace\":\"RDoc::Generator::Shomen\",\"value\":\"nil\"},\"RDoc::Generator::Shomen#path_output_relative\":{\"comment\":\"\",\"name\":\"path_output_relative\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"367\",\"arguments\":\"(path=nil)\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"path_output_relative(path=nil)\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"protected\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 367\\n  def path_output_relative(path=nil)\\n    if path\\n      path.to_s.sub(path_base.to_s+'/', '')\\n    else\\n      @path_output_relative ||= path_output.to_s.sub(path_base.to_s+'/', '')\\n    end\\n  end\"},\"RDoc::Generator::Shomen::CLASS_DIR\":{\"comment\":\"Directory where generated classes live relative to the root\\nTODO: Fix in future version when RDoc fixes.\",\"name\":\"CLASS_DIR\",\"!\":\"constant\",\"namespace\":\"RDoc::Generator::Shomen\",\"value\":\"nil\"},\"Shomen::TimeDelta::YEARS\":{\"comment\":\"\",\"name\":\"YEARS\",\"!\":\"constant\",\"namespace\":\"Shomen::TimeDelta\",\"value\":\"365.25 * DAYS\"},\"Shomen::TimeDelta::MONTHS\":{\"comment\":\"\",\"name\":\"MONTHS\",\"!\":\"constant\",\"namespace\":\"Shomen::TimeDelta\",\"value\":\"30 * DAYS\"},\"RDoc::Generator::Shomen#classes\":{\"comment\":\"In the world of the RDoc Generators #classes is the same as \\n#all_classes_and_modules. Well, except that its sorted too.\\nFor classes sans modules, see #types.\",\"name\":\"classes\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"97\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"classes()\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 97\\n  def classes\\n    @classes ||= RDoc::TopLevel.all_classes_and_modules.sort\\n  end\"},\"RDoc::Generator::Shomen#sort_salient\":{\"comment\":\"\",\"name\":\"sort_salient\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"315\",\"arguments\":\"(classes)\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"sort_salient(classes)\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"protected\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 315\\n  def sort_salient(classes)\\n    nscounts = classes.inject({}) do |counthash, klass|\\n      top_level = klass.full_name.gsub( /::.*/, '' )\\n      counthash[top_level] ||= 0\\n      counthash[top_level] += 1\\n      counthash\\n    end\\n    # Sort based on how often the top level namespace occurs, and then on the\\n    # name of the module -- this works for projects that put their stuff into\\n    # a namespace, of course, but doesn't hurt if they don't.\\n    classes.sort_by do |klass|\\n      top_level = klass.full_name.gsub( /::.*/, '' )\\n      [nscounts[top_level] * 1, klass.full_name]\\n    end.select do |klass|\\n      klass.document_self\\n    end\\n  end\"},\"RDoc::Generator::Shomen#types_hash\":{\"comment\":\"\",\"name\":\"types_hash\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"163\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"types_hash()\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 163\\n  def types_hash\\n    @types_hash ||= RDoc::TopLevel.classes_hash\\n  end\"},\"RDoc::AnyMethod#to_json\":{\"comment\":\"\",\"name\":\"to_json\",\"parent\":\"RDoc::AnyMethod\",\"!\":\"method\",\"line\":\"104\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"to_json()\",\"block\":null,\"file\":\"lib/rdoc-shomen/core_ext/rdoc.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc-shomen/core_ext/rdoc.rb, line 104\\n  def to_json\\n    to_h.to_json\\n  end\"},\"RDoc::TopLevel#to_json\":{\"comment\":\"\",\"name\":\"to_json\",\"parent\":\"RDoc::TopLevel\",\"!\":\"method\",\"line\":\"47\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"to_json()\",\"block\":null,\"file\":\"lib/rdoc-shomen/core_ext/rdoc.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc-shomen/core_ext/rdoc.rb, line 47\\n  def to_json\\n    to_h.to_json\\n  end\"},\"RDoc::Generator::Shomen#generate_files\":{\"comment\":\"Generate entries for whole information files, e.g. README files.\",\"name\":\"generate_files\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"511\",\"arguments\":\"(table)\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"generate_files(table)\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"protected\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 511\\n  def generate_files(table)\\n    files_toplevel.each do |file|\\n      table[file.full_name] = {\\n        \\\"!\\\"     => \\\"file\\\",\\n        \\\"name\\\"  => File.basename(file.full_name),\\n        \\\"path\\\"  => File.dirname(file.full_name),\\n        \\\"text\\\"  => file.comment\\n      }\\n    end\\n  end\"},\"Shomen\":{\"methods\":[],\"modules\":[\"TimeDelta\"],\"comment\":\"\",\"name\":\"Shomen\",\"!\":\"module\",\"includes\":[],\"files\":[\"lib/rdoc-shomen/timedelta.rb\"],\"namespace\":\"\",\"classes\":[],\"functions\":[],\"constants\":[]},\"RDocShomen::Metadata#metadata\":{\"comment\":\"\",\"name\":\"metadata\",\"parent\":\"RDocShomen::Metadata\",\"!\":\"method\",\"line\":\"11\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"metadata()\",\"block\":null,\"file\":\"lib/rdoc-shomen/metadata.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc-shomen/metadata.rb, line 11\\n    def metadata\\n      @metadata ||= get_metadata\\n    end\"},\"RDoc::Generator::Shomen#generate_constants\":{\"comment\":\"\",\"name\":\"generate_constants\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"376\",\"arguments\":\"(table)\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"generate_constants(table)\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"protected\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 376\\n  def generate_constants(table)\\n    debug_msg \\\"Generating constant documentation:\\\"\\n    classes.each do |base|\\n      base.constants.each do |c|\\n        full_name = \\\"#{base.full_name}::#{c.name}\\\"\\n        debug_msg \\\"%s\\\" % [full_name]\\n        table[full_name] = {\\n          \\\"!\\\"         => \\\"constant\\\",\\n          \\\"name\\\"      => c.name,\\n          \\\"namespace\\\" => \\\"#{base.full_name}\\\",\\n          \\\"comment\\\"   => c.comment, # description\\n          \\\"value\\\"     => c.value\\n        }\\n      end\\n    end\\n    return table     \\n  end\"},\"RDoc::Options#rdoc_parse\":{\"comment\":\"alias_method :rdoc_initialize, :initialize\\ndef initialize\\n  rdoc_initialize\\n  @generator = RDoc::Generator::RDazzle\\nend\",\"name\":\"rdoc_parse\",\"parent\":\"RDoc::Options\",\"!\":\"method\",\"line\":0,\"arguments\":\"(argv)\",\"alias_for\":\"RDoc::Options#parse\",\"singleton\":false,\"returns\":[],\"interface\":\"rdoc_parse(argv)\",\"block\":null,\"file\":\"(unknown)\",\"aliases\":[],\"access\":\"public\",\"source\":\"\"},\"RDoc::Generator::Shomen#generate_classes\":{\"comment\":\"Generate a documentation file for each class\",\"name\":\"generate_classes\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"395\",\"arguments\":\"(table)\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"generate_classes(table)\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"protected\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 395\\n  def generate_classes(table)\\n    debug_msg \\\"Generating class documentation:\\\"\\n\\n    classes.each do |c|\\n      debug_msg \\\"%s (%s)\\\" % [ c.full_name, c.path ]\\n      #outfile    = self.path_output + klass.path\\n      #rel_prefix = self.path_output.relative_path_from(outfile.dirname)\\n      #debug_msg \\\"rendering #{path_output_relative(outfile)}\\\"\\n      #self.render_template(templatefile, outfile, :klass=>klass, :rel_prefix=>rel_prefix)\\n\\n      data = {}\\n      data[\\\"!\\\"]          = (c.type == 'class' ? \\\"class\\\" : \\\"module\\\")\\n      data[\\\"name\\\"]       = c.name\\n      data[\\\"namespace\\\"]  = c.full_name.split('::')[0...1].join('::')\\n      data[\\\"includes\\\"]   = c.includes.map{ |x| x.name }\\n      #data[\\\"extended\\\"]  = []  # TODO: how?\\n      data[\\\"comment\\\"]    = c.comment\\n      data[\\\"constants\\\"]  = c.constants.map{ |x| x.name }\\n      data[\\\"modules\\\"]    = c.modules.map{ |x| x.name }\\n      data[\\\"classes\\\"]    = c.classes.map{ |x| x.name }\\n      data[\\\"functions\\\"]  = collect_methods(c, true)\\n      data[\\\"methods\\\"]    = collect_methods(c, false)\\n      data[\\\"files\\\"]      = c.in_files.map{ |x| x.full_name }\\n      data[\\\"superclass\\\"] = c.superclass.full_name if c.type == 'class'\\n\\n      table[c.full_name] = data\\n    end\\n    return table\\n  end\"},\"RDoc::AnyMethod#source_code_location\":{\"comment\":\"\",\"name\":\"source_code_location\",\"parent\":\"RDoc::AnyMethod\",\"!\":\"method\",\"line\":\"816\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"source_code_location()\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 816\\n  def source_code_location\\n    src = source_code_raw\\n    if md = /File (.*?), line (\\\\d+)/.match(src)\\n      file = md[1]\\n      line = md[2]\\n    else\\n      file = \\\"(unknown)\\\"\\n      line = 0\\n    end\\n    return file, line\\n  end\"},\"RDoc::Parser\":{\"methods\":[],\"modules\":[],\"comment\":\"\",\"name\":\"Parser\",\"!\":\"module\",\"includes\":[],\"files\":[],\"namespace\":\"RDoc\",\"classes\":[\"C\"],\"functions\":[],\"constants\":[]},\"RDocShomen\":{\"methods\":[],\"modules\":[\"Metadata\"],\"comment\":\"\",\"name\":\"RDocShomen\",\"!\":\"module\",\"includes\":[],\"files\":[\"lib/rdoc-shomen/metadata.rb\"],\"namespace\":\"\",\"classes\":[],\"functions\":[],\"constants\":[]},\"RDoc::Generator::Shomen#generate_scripts\":{\"comment\":\"Generate a documentation file for each file.\",\"name\":\"generate_scripts\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"464\",\"arguments\":\"(table)\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"generate_scripts(table)\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"protected\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 464\\n  def generate_scripts(table)\\n    debug_msg \\\"Generating file documentation in #{path_output_relative}:\\\"\\n    #templatefile = self.path_template + 'file.rhtml'\\n\\n    files.each do |file|\\n      debug_msg \\\"%s\\\" % [file.full_name]\\n\\n      #rel_prefix  = self.path_output.relative_path_from(outfile.dirname)\\n      #context     = binding()\\n      #debug_msg \\\"rendering #{path_output_relative(outfile)}\\\"\\n\\n      modules = table.select { |k, h|\\n        h['!'] == 'module' && h['files'].include?(file.full_name)\\n      }.map{ |k, h| k }\\n\\n      classes = table.select { |k, h|\\n        h['!'] == 'class' && h['files'].include?(file.full_name)\\n      }.map{ |k, h| k }\\n\\n      functions = table.select { |k, h|\\n        h['!'] == 'function' && h['file'] == file.full_name\\n      }.map{ |k, h| k }\\n\\n      methods = table.select { |k, h|\\n        h['!'] == 'method' && h['file'] == file.full_name\\n      }.map{ |k, h| k }\\n\\n      table[file.full_name] = {\\n        \\\"!\\\"          => \\\"script\\\",\\n        \\\"name\\\"       => File.basename(file.full_name),\\n        \\\"path\\\"       => File.dirname(file.full_name),\\n        \\\"header\\\"     => \\\"\\\", # TODO\\n        \\\"footer\\\"     => \\\"\\\", # TODO\\n        \\\"requires\\\"   => file.requires.map{ |r| r.name },\\n        \\\"constants\\\"  => file.constants.map{ |c| c.full_name },\\n        \\\"modules\\\"    => modules,   #file.modules.map{ |x| x.name },\\n        \\\"classes\\\"    => classes,   #file.classes.map{ |x| x.name },\\n        \\\"functions\\\"  => functions, #collect_methods(file, true),\\n        \\\"methods\\\"    => methods    #collect_methods(file, false)\\n      }\\n\\n      #self.render_template(templatefile, outfile, :file=>file, :rel_prefix=>rel_prefix)\\n    end\\n    return table\\n  end\"},\"RDocShomen::Metadata#scm\":{\"comment\":\"\",\"name\":\"scm\",\"parent\":\"RDocShomen::Metadata\",\"!\":\"method\",\"line\":\"55\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"scm()\",\"block\":null,\"file\":\"lib/rdoc-shomen/metadata.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc-shomen/metadata.rb, line 55\\n    def scm\\n      Dir[File.join(path_base.to_s,\\\"{.svn,.git}\\\")].first\\n    end\"},\"RDocShomen::Metadata#get_metadata\":{\"comment\":\"TODO: Need a better way to determine if POM::Metadata exists.\",\"name\":\"get_metadata\",\"parent\":\"RDocShomen::Metadata\",\"!\":\"method\",\"line\":\"16\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"get_metadata()\",\"block\":null,\"file\":\"lib/rdoc-shomen/metadata.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc-shomen/metadata.rb, line 16\\n    def get_metadata\\n      data = OpenStruct.new\\n      begin\\n        require 'pom/metadata'\\n        pom = POM::Metadata.new(path_base)\\n        raise LoadError unless pom.name\\n        data.title       = pom.title\\n        data.version     = pom.version\\n        data.subtitle    = nil #pom.subtitle\\n        data.homepage    = pom.homepage\\n        data.resources   = pom.resources\\n        data.mailinglist = pom.resources.mailinglist\\n        data.development = pom.resources.development\\n        data.forum       = pom.forum\\n        data.wiki        = pom.wiki\\n        data.blog        = pom.blog\\n        data.copyright   = pom.copyright\\n      rescue LoadError\\n        if file = Dir[path_base + '*.gemspec'].first\\n          gem = YAML.load(file)\\n          data.title       = gem.title\\n          data.version     = gem.version\\n          data.subtitle    = nil\\n          date.homepage    = gem.homepage\\n          data.mailinglist = gem.email\\n          data.development = nil\\n          data.forum       = nil\\n          data.wiki        = nil\\n          data.blog        = nil\\n          data.copyright   = nil\\n        else\\n          puts \\\"No Metadata!\\\"\\n          # TODO: we may be able to develop some other hueristics here, but for now, nope.\\n        end\\n      end\\n      return data\\n    end\"},\"lib/rdoc-shomen/metadata.rb\":{\"methods\":[\"RDocShomen::Metadata#metadata\",\"RDocShomen::Metadata#scm\",\"RDocShomen::Metadata#get_metadata\"],\"modules\":[\"RDocShomen::Metadata\",\"RDocShomen\"],\"name\":\"metadata.rb\",\"!\":\"script\",\"header\":\"\",\"requires\":[\"ostruct\",\"pom/metadata\"],\"classes\":[],\"functions\":[],\"footer\":\"\",\"path\":\"lib/rdoc-shomen\",\"constants\":[]},\"RDoc::Generator::Shomen#types_toplevel\":{\"comment\":\"\",\"name\":\"types_toplevel\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"151\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"types_toplevel()\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 151\\n  def types_toplevel\\n    @types_toplevel ||= types.select {|klass| !(RDoc::ClassModule === klass.parent) }\\n  end\"},\"RDoc::Generator::Shomen#debug_msg\":{\"comment\":\"Output progress information if rdoc debugging is enabled\",\"name\":\"debug_msg\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"682\",\"arguments\":\"(msg)\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"debug_msg(msg)\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"protected\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 682\\n  def debug_msg(msg)\\n    return unless $DEBUG_RDOC\\n    case msg[1,1]\\n      when '.' then tab = \\\"= \\\"\\n      when ':' then tab = \\\"== \\\"\\n      else          tab = \\\"* \\\"\\n    end\\n    $stderr.puts(tab + msg)\\n  end\"},\"RDoc::Generator::Shomen#generate\":{\"comment\":\"Build the initial indices and output objects\\nbased on an array of top level objects containing\\nthe extracted information.\",\"name\":\"generate\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"229\",\"arguments\":\"(files)\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"generate(files)\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 229\\n  def generate(files)\\n    @files_rdoc = files.sort\\n\\n    @table = {}\\n\\n    generate_constants(@table)\\n    generate_classes(@table)\\n    generate_methods(@table)\\n    generate_scripts(@table)   # have to do this last b/c it depends on the others\\n    #generate_files(@table)\\n\\n#pp table #.select{ |k, h| h['!'] == 'script' }\\n\\n    #file = File.join(@path_output, 'rdoc.jsync')\\n\\n    yaml = @table.to_yaml\\n    File.open('rdoc.yaml', 'w'){ |f| f << yaml }\\n\\n    json = JSON.generate(@table)\\n    File.open('rdoc.json', 'w') do |f|\\n      f << json\\n    end\\n\\n    ref_table = reference_table(@table)\\n\\n    yaml  = ref_table.to_yaml\\n    File.open('rdoc2.yaml', 'w'){ |f| f << yaml }\\n    \\n    # TODO: JSYNC\\n\\n  #rescue StandardError => err\\n  #  debug_msg \\\"%s: %s\\\\n  %s\\\" % [ err.class.name, err.message, err.backtrace.join(\\\"\\\\n  \\\") ]\\n  #  raise err\\n  end\"},\"Shomen::TimeDelta::MINUTES\":{\"comment\":\"\",\"name\":\"MINUTES\",\"!\":\"constant\",\"namespace\":\"Shomen::TimeDelta\",\"value\":\"60\"},\"RDoc::Generator::Shomen#classes_toplevel\":{\"comment\":\"Only toplevel classes and modules.\",\"name\":\"classes_toplevel\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"103\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"classes_toplevel()\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 103\\n  def classes_toplevel\\n    @classes_toplevel ||= classes.select {|klass| !(RDoc::ClassModule === klass.parent) }\\n  end\"},\"RDoc::Generator::Shomen#classes_hash\":{\"comment\":\"\",\"name\":\"classes_hash\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"115\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"classes_hash()\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 115\\n  def classes_hash\\n    @classes_hash ||= RDoc::TopLevel.modules_hash.merge(RDoc::TopLevel.classes_hash)\\n  end\"},\"RDoc::Options\":{\"superclass\":\"Object\",\"methods\":[\"RDoc::Options#parse\",\"RDoc::Options#rdoc_parse\"],\"modules\":[],\"comment\":\"\",\"name\":\"Options\",\"!\":\"class\",\"includes\":[],\"files\":[\"lib/rdoc/discover.rb\"],\"namespace\":\"RDoc\",\"classes\":[],\"functions\":[],\"constants\":[]},\"Shomen::TimeDelta::HOURS\":{\"comment\":\"\",\"name\":\"HOURS\",\"!\":\"constant\",\"namespace\":\"Shomen::TimeDelta\",\"value\":\"60 * MINUTES\"},\"RDoc::AnyMethod#to_h\":{\"comment\":\"NOTE: dont_rename_initialize isn't used\",\"name\":\"to_h\",\"parent\":\"RDoc::AnyMethod\",\"!\":\"method\",\"line\":\"83\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"to_h()\",\"block\":null,\"file\":\"lib/rdoc-shomen/core_ext/rdoc.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc-shomen/core_ext/rdoc.rb, line 83\\n  def to_h\\n    {\\n      :name         => name,\\n      :fullname     => full_name,\\n      :prettyname   => pretty_name,\\n      :path         => path,\\n      :type         => type,\\n      :visibility   => visibility,\\n      :blockparams  => block_params,\\n      :singleton    => singleton,\\n      :text         => text,\\n      :aliases      => aliases,\\n      :aliasfor     => is_alias_for,\\n      :aref         => aref,\\n      :parms        => params,\\n      :callseq      => call_seq\\n      #:paramseq     => param_seq,\\n    }\\n  end\"},\"Numeric\":{\"superclass\":\"Object\",\"methods\":[],\"modules\":[\"Times\"],\"comment\":\"Extend Numeric with time constants\",\"name\":\"Numeric\",\"!\":\"class\",\"includes\":[],\"files\":[\"lib/rdoc-shomen/core_ext/times.rb\"],\"namespace\":\"\",\"classes\":[],\"functions\":[],\"constants\":[]},\"Object\":{\"superclass\":\"Object\",\"methods\":[\"Object#fileutils\"],\"modules\":[],\"comment\":\"\",\"name\":\"Object\",\"!\":\"class\",\"includes\":[],\"files\":[],\"namespace\":\"\",\"classes\":[],\"functions\":[],\"constants\":[]},\"RDoc::Generator::Shomen#reference_table\":{\"comment\":\"\",\"name\":\"reference_table\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"265\",\"arguments\":\"(table)\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"reference_table(table)\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 265\\n  def reference_table(table)\\n    debug_msg \\\"== Generating Reference Table\\\"\\n    new_table = {}\\n    table.each do |key, entry|\\n      debug_msg \\\"%s\\\" % [key]\\n      data = entry.dup\\n      new_table[key] = data\\n      case data['!']\\n      when 'script'\\n        data[\\\"constants\\\"]  = ref_list(data[\\\"constants\\\"])\\n        data[\\\"modules\\\"]    = ref_list(data[\\\"modules\\\"])\\n        data[\\\"classes\\\"]    = ref_list(data[\\\"classes\\\"])\\n        data[\\\"functions\\\"]  = ref_list(data[\\\"functions\\\"])\\n        data[\\\"methods\\\"]    = ref_list(data[\\\"methods\\\"])\\n      when 'file'\\n      when 'constant'\\n        data[\\\"namespace\\\"]  = ref_item(data[\\\"namespace\\\"])\\n      when 'module', 'class'\\n        data[\\\"namespace\\\"]  = ref_item(data[\\\"namespace\\\"])\\n        data[\\\"includes\\\"]   = ref_list(data[\\\"includes\\\"])\\n        #data[\\\"extended\\\"]  = ref_list(data[\\\"extended\\\"])\\n        data[\\\"constants\\\"]  = ref_list(data[\\\"constants\\\"])\\n        data[\\\"modules\\\"]    = ref_list(data[\\\"modules\\\"])\\n        data[\\\"classes\\\"]    = ref_list(data[\\\"classes\\\"])\\n        data[\\\"functions\\\"]  = ref_list(data[\\\"functions\\\"])\\n        data[\\\"methods\\\"]    = ref_list(data[\\\"methods\\\"])\\n        data[\\\"files\\\"]      = ref_list(data[\\\"files\\\"])\\n        data[\\\"superclass\\\"] = ref_item(data[\\\"superclass\\\"]) if data.key?(\\\"superclass\\\")\\n      when 'method', 'function'\\n        data[\\\"parent\\\"]     = ref_item(data[\\\"parent\\\"])\\n        data[\\\"file\\\"]       = ref_item(data[\\\"file\\\"])\\n      end\\n    end\\n    new_table\\n  end\"},\"RDoc::ClassModule\":{\"superclass\":\"Object\",\"methods\":[\"RDoc::ClassModule#with_documentation?\",\"RDoc::ClassModule#document_self_or_methods\",\"RDoc::ClassModule#to_h\",\"RDoc::ClassModule#to_json\"],\"modules\":[],\"comment\":\"\",\"name\":\"ClassModule\",\"!\":\"class\",\"includes\":[],\"files\":[\"lib/rdoc/generator/shomen.rb\",\"lib/rdoc-shomen/core_ext/rdoc.rb\"],\"namespace\":\"RDoc\",\"classes\":[],\"functions\":[],\"constants\":[]},\"RDoc::Generator\":{\"methods\":[],\"modules\":[],\"comment\":\"\",\"name\":\"Generator\",\"!\":\"module\",\"includes\":[],\"files\":[],\"namespace\":\"RDoc\",\"classes\":[\"Shomen\"],\"functions\":[],\"constants\":[]},\"lib/rdoc-shomen/core_ext/times.rb\":{\"methods\":[],\"modules\":[\"Numeric::Times\"],\"name\":\"times.rb\",\"!\":\"script\",\"header\":\"\",\"requires\":[],\"classes\":[\"Numeric\"],\"functions\":[],\"footer\":\"\",\"path\":\"lib/rdoc-shomen/core_ext\",\"constants\":[]},\"RDoc::Generator::Shomen#ref_item\":{\"comment\":\"\",\"name\":\"ref_item\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"302\",\"arguments\":\"(key)\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"ref_item(key)\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 302\\n  def ref_item(key)\\n    @table[key] || key\\n  end\"},\"Shomen::TimeDelta\":{\"methods\":[\"Shomen::TimeDelta#time_delta_string\"],\"modules\":[],\"comment\":\"\",\"name\":\"TimeDelta\",\"!\":\"module\",\"includes\":[],\"files\":[\"lib/rdoc-shomen/timedelta.rb\"],\"namespace\":\"Shomen\",\"classes\":[],\"functions\":[],\"constants\":[\"MINUTES\",\"HOURS\",\"DAYS\",\"WEEKS\",\"MONTHS\",\"YEARS\"]},\"lib/rdoc/discover.rb\":{\"methods\":[\"RDoc::Options#parse\"],\"modules\":[],\"name\":\"discover.rb\",\"!\":\"script\",\"header\":\"\",\"requires\":[\"rubygems\",\"rdoc/generator/shomen\"],\"classes\":[\"RDoc::Options\"],\"functions\":[\"RDoc.generator_option\"],\"footer\":\"\",\"path\":\"lib/rdoc\",\"constants\":[]},\"RDoc::ClassModule#with_documentation?\":{\"comment\":\"\",\"name\":\"with_documentation?\",\"parent\":\"RDoc::ClassModule\",\"!\":\"method\",\"line\":\"55\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"with_documentation?()\",\"block\":null,\"file\":\"lib/rdoc-shomen/core_ext/rdoc.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc-shomen/core_ext/rdoc.rb, line 55\\n  def with_documentation?\\n    document_self_or_methods || classes_and_modules.any?{ |c| c.with_documentation? }\\n  end\"},\"RDoc::ClassModule#to_h\":{\"comment\":\"\",\"name\":\"to_h\",\"parent\":\"RDoc::ClassModule\",\"!\":\"method\",\"line\":\"65\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"to_h()\",\"block\":null,\"file\":\"lib/rdoc-shomen/core_ext/rdoc.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc-shomen/core_ext/rdoc.rb, line 65\\n  def to_h\\n    {\\n      :name       => name,\\n      :fullname   => full_name,\\n      :type       => type,\\n      :path       => path,\\n      :superclass => module? ? nil : superclass\\n    }\\n  end\"},\"RDoc::Generator::Shomen#modules_toplevel\":{\"comment\":\"\",\"name\":\"modules_toplevel\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"127\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"modules_toplevel()\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 127\\n  def modules_toplevel\\n    @modules_toplevel ||= modules.select {|klass| !(RDoc::ClassModule === klass.parent) }\\n  end\"},\"RDoc::Options#parse\":{\"comment\":\"\",\"name\":\"parse\",\"parent\":\"RDoc::Options\",\"!\":\"method\",\"line\":\"35\",\"arguments\":\"(argv)\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"parse(argv)\",\"block\":null,\"file\":\"lib/rdoc/discover.rb\",\"aliases\":[\"RDoc::Options#rdoc_parse\"],\"access\":\"public\",\"source\":\"# File lib/rdoc/discover.rb, line 35\\n    def parse(argv)\\n      rdoc_parse(argv)\\n      #begin\\n      if blk = RDoc.generator_option(@template)\\n        @generator = blk.call\\n      end\\n      #if @template == 'shomen'\\n      #  require \\\"rdoc-shomen/generator\\\"\\n      #  @generator = RDocShomen::Generator\\n      #end\\n      #rescue LoadError\\n      #end\\n    end\"},\"lib/rdoc-shomen/core_ext/rdoc.rb\":{\"methods\":[\"RDoc::ClassModule#to_json\",\"RDoc::AnyMethod#to_json\",\"RDoc::TopLevel#to_json\",\"RDoc::AnyMethod#to_h\",\"RDoc::ClassModule#with_documentation?\",\"RDoc::ClassModule#to_h\"],\"modules\":[],\"name\":\"rdoc.rb\",\"!\":\"script\",\"header\":\"\",\"requires\":[\"rdoc/parser/c\"],\"classes\":[\"RDoc::TopLevel\",\"RDoc::Parser::C\",\"RDoc::AnyMethod\",\"RDoc::ClassModule\"],\"functions\":[],\"footer\":\"\",\"path\":\"lib/rdoc-shomen/core_ext\",\"constants\":[]},\"Shomen::TimeDelta#time_delta_string\":{\"comment\":\"Return a string describing the amount of time in the given number of\\nseconds in terms a human can understand easily.\",\"name\":\"time_delta_string\",\"parent\":\"Shomen::TimeDelta\",\"!\":\"method\",\"line\":\"14\",\"arguments\":\"(seconds)\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"time_delta_string(seconds)\",\"block\":null,\"file\":\"lib/rdoc-shomen/timedelta.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc-shomen/timedelta.rb, line 14\\n    def time_delta_string(seconds)\\n      return 'less than a minute' if seconds < MINUTES\\n      return (seconds / MINUTES).to_s + ' minute' + (seconds/60 == 1 ? '' : 's') if seconds < (50 * MINUTES)\\n      return 'about one hour' if seconds < (90 * MINUTES)\\n      return (seconds / HOURS).to_s + ' hours' if seconds < (18 * HOURS)\\n      return 'one day' if seconds < DAYS\\n      return 'about one day' if seconds < (2 * DAYS)\\n      return (seconds / DAYS).to_s + ' days' if seconds < WEEKS\\n      return 'about one week' if seconds < (2 * WEEKS)\\n      return (seconds / WEEKS).to_s + ' weeks' if seconds < (3 * MONTHS)\\n      return (seconds / MONTHS).to_s + ' months' if seconds < YEARS\\n      return (seconds / YEARS).to_s + ' years'\\n    end\"},\"RDoc::Generator::Shomen#files_toplevel\":{\"comment\":\"List of toplevel files. RDoc supplies this via the #generate method.\",\"name\":\"files_toplevel\",\"parent\":\"RDoc::Generator::Shomen\",\"!\":\"method\",\"line\":\"175\",\"arguments\":\"()\",\"alias_for\":null,\"singleton\":false,\"returns\":[],\"interface\":\"files_toplevel()\",\"block\":null,\"file\":\"lib/rdoc/generator/shomen.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/generator/shomen.rb, line 175\\n  def files_toplevel\\n    @files_toplevel ||= (\\n      @files_rdoc.select{ |f| f.parser == RDoc::Parser::Simple }\\n    )\\n  end\"},\"RDoc.generator_option\":{\"comment\":\"\",\"name\":\"generator_option\",\"parent\":\"RDoc\",\"!\":\"function\",\"line\":\"16\",\"arguments\":\"(name, &blk)\",\"alias_for\":null,\"singleton\":true,\"returns\":[],\"interface\":\"generator_option(name, &blk)\",\"block\":null,\"file\":\"lib/rdoc/discover.rb\",\"aliases\":[],\"access\":\"public\",\"source\":\"# File lib/rdoc/discover.rb, line 16\\n  def RDoc.generator_option(name, &blk)\\n    @_generators ||= {}\\n    if blk\\n      @_generators[name.to_s] = blk\\n    else\\n      @_generators[name.to_s]\\n    end\\n  end\"}}"},"lib/shomen/hyper/jquery.js":{"!":"script","name":"jquery.js","path":"lib/shomen/hyper/jquery.js","mtime":"2010-09-26 06:14:50 -0400","header":"","footer":"","source":"/*!\n * jQuery JavaScript Library v1.4.2\n * http://jquery.com/\n *\n * Copyright 2010, John Resig\n * Dual licensed under the MIT or GPL Version 2 licenses.\n * http://jquery.org/license\n *\n * Includes Sizzle.js\n * http://sizzlejs.com/\n * Copyright 2010, The Dojo Foundation\n * Released under the MIT, BSD, and GPL Licenses.\n *\n * Date: Sat Feb 13 22:33:48 2010 -0500\n */\n(function(A,w){function ma(){if(!c.isReady){try{s.documentElement.doScroll(\"left\")}catch(a){setTimeout(ma,1);return}c.ready()}}function Qa(a,b){b.src?c.ajax({url:b.src,async:false,dataType:\"script\"}):c.globalEval(b.text||b.textContent||b.innerHTML||\"\");b.parentNode&&b.parentNode.removeChild(b)}function X(a,b,d,f,e,j){var i=a.length;if(typeof b===\"object\"){for(var o in b)X(a,o,b[o],f,e,d);return a}if(d!==w){f=!j&&f&&c.isFunction(d);for(o=0;o<i;o++)e(a[o],b,f?d.call(a[o],o,e(a[o],b)):d,j);return a}return i?\ne(a[0],b):w}function J(){return(new Date).getTime()}function Y(){return false}function Z(){return true}function na(a,b,d){d[0].type=a;return c.event.handle.apply(b,d)}function oa(a){var b,d=[],f=[],e=arguments,j,i,o,k,n,r;i=c.data(this,\"events\");if(!(a.liveFired===this||!i||!i.live||a.button&&a.type===\"click\")){a.liveFired=this;var u=i.live.slice(0);for(k=0;k<u.length;k++){i=u[k];i.origType.replace(O,\"\")===a.type?f.push(i.selector):u.splice(k--,1)}j=c(a.target).closest(f,a.currentTarget);n=0;for(r=\nj.length;n<r;n++)for(k=0;k<u.length;k++){i=u[k];if(j[n].selector===i.selector){o=j[n].elem;f=null;if(i.preType===\"mouseenter\"||i.preType===\"mouseleave\")f=c(a.relatedTarget).closest(i.selector)[0];if(!f||f!==o)d.push({elem:o,handleObj:i})}}n=0;for(r=d.length;n<r;n++){j=d[n];a.currentTarget=j.elem;a.data=j.handleObj.data;a.handleObj=j.handleObj;if(j.handleObj.origHandler.apply(j.elem,e)===false){b=false;break}}return b}}function pa(a,b){return\"live.\"+(a&&a!==\"*\"?a+\".\":\"\")+b.replace(/\\./g,\"`\").replace(/ /g,\n\"&\")}function qa(a){return!a||!a.parentNode||a.parentNode.nodeType===11}function ra(a,b){var d=0;b.each(function(){if(this.nodeName===(a[d]&&a[d].nodeName)){var f=c.data(a[d++]),e=c.data(this,f);if(f=f&&f.events){delete e.handle;e.events={};for(var j in f)for(var i in f[j])c.event.add(this,j,f[j][i],f[j][i].data)}}})}function sa(a,b,d){var f,e,j;b=b&&b[0]?b[0].ownerDocument||b[0]:s;if(a.length===1&&typeof a[0]===\"string\"&&a[0].length<512&&b===s&&!ta.test(a[0])&&(c.support.checkClone||!ua.test(a[0]))){e=\ntrue;if(j=c.fragments[a[0]])if(j!==1)f=j}if(!f){f=b.createDocumentFragment();c.clean(a,b,f,d)}if(e)c.fragments[a[0]]=j?f:1;return{fragment:f,cacheable:e}}function K(a,b){var d={};c.each(va.concat.apply([],va.slice(0,b)),function(){d[this]=a});return d}function wa(a){return\"scrollTo\"in a&&a.document?a:a.nodeType===9?a.defaultView||a.parentWindow:false}var c=function(a,b){return new c.fn.init(a,b)},Ra=A.jQuery,Sa=A.$,s=A.document,T,Ta=/^[^<]*(<[\\w\\W]+>)[^>]*$|^#([\\w-]+)$/,Ua=/^.[^:#\\[\\.,]*$/,Va=/\\S/,\nWa=/^(\\s|\\u00A0)+|(\\s|\\u00A0)+$/g,Xa=/^<(\\w+)\\s*\\/?>(?:<\\/\\1>)?$/,P=navigator.userAgent,xa=false,Q=[],L,$=Object.prototype.toString,aa=Object.prototype.hasOwnProperty,ba=Array.prototype.push,R=Array.prototype.slice,ya=Array.prototype.indexOf;c.fn=c.prototype={init:function(a,b){var d,f;if(!a)return this;if(a.nodeType){this.context=this[0]=a;this.length=1;return this}if(a===\"body\"&&!b){this.context=s;this[0]=s.body;this.selector=\"body\";this.length=1;return this}if(typeof a===\"string\")if((d=Ta.exec(a))&&\n(d[1]||!b))if(d[1]){f=b?b.ownerDocument||b:s;if(a=Xa.exec(a))if(c.isPlainObject(b)){a=[s.createElement(a[1])];c.fn.attr.call(a,b,true)}else a=[f.createElement(a[1])];else{a=sa([d[1]],[f]);a=(a.cacheable?a.fragment.cloneNode(true):a.fragment).childNodes}return c.merge(this,a)}else{if(b=s.getElementById(d[2])){if(b.id!==d[2])return T.find(a);this.length=1;this[0]=b}this.context=s;this.selector=a;return this}else if(!b&&/^\\w+$/.test(a)){this.selector=a;this.context=s;a=s.getElementsByTagName(a);return c.merge(this,\na)}else return!b||b.jquery?(b||T).find(a):c(b).find(a);else if(c.isFunction(a))return T.ready(a);if(a.selector!==w){this.selector=a.selector;this.context=a.context}return c.makeArray(a,this)},selector:\"\",jquery:\"1.4.2\",length:0,size:function(){return this.length},toArray:function(){return R.call(this,0)},get:function(a){return a==null?this.toArray():a<0?this.slice(a)[0]:this[a]},pushStack:function(a,b,d){var f=c();c.isArray(a)?ba.apply(f,a):c.merge(f,a);f.prevObject=this;f.context=this.context;if(b===\n\"find\")f.selector=this.selector+(this.selector?\" \":\"\")+d;else if(b)f.selector=this.selector+\".\"+b+\"(\"+d+\")\";return f},each:function(a,b){return c.each(this,a,b)},ready:function(a){c.bindReady();if(c.isReady)a.call(s,c);else Q&&Q.push(a);return this},eq:function(a){return a===-1?this.slice(a):this.slice(a,+a+1)},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},slice:function(){return this.pushStack(R.apply(this,arguments),\"slice\",R.call(arguments).join(\",\"))},map:function(a){return this.pushStack(c.map(this,\nfunction(b,d){return a.call(b,d,b)}))},end:function(){return this.prevObject||c(null)},push:ba,sort:[].sort,splice:[].splice};c.fn.init.prototype=c.fn;c.extend=c.fn.extend=function(){var a=arguments[0]||{},b=1,d=arguments.length,f=false,e,j,i,o;if(typeof a===\"boolean\"){f=a;a=arguments[1]||{};b=2}if(typeof a!==\"object\"&&!c.isFunction(a))a={};if(d===b){a=this;--b}for(;b<d;b++)if((e=arguments[b])!=null)for(j in e){i=a[j];o=e[j];if(a!==o)if(f&&o&&(c.isPlainObject(o)||c.isArray(o))){i=i&&(c.isPlainObject(i)||\nc.isArray(i))?i:c.isArray(o)?[]:{};a[j]=c.extend(f,i,o)}else if(o!==w)a[j]=o}return a};c.extend({noConflict:function(a){A.$=Sa;if(a)A.jQuery=Ra;return c},isReady:false,ready:function(){if(!c.isReady){if(!s.body)return setTimeout(c.ready,13);c.isReady=true;if(Q){for(var a,b=0;a=Q[b++];)a.call(s,c);Q=null}c.fn.triggerHandler&&c(s).triggerHandler(\"ready\")}},bindReady:function(){if(!xa){xa=true;if(s.readyState===\"complete\")return c.ready();if(s.addEventListener){s.addEventListener(\"DOMContentLoaded\",\nL,false);A.addEventListener(\"load\",c.ready,false)}else if(s.attachEvent){s.attachEvent(\"onreadystatechange\",L);A.attachEvent(\"onload\",c.ready);var a=false;try{a=A.frameElement==null}catch(b){}s.documentElement.doScroll&&a&&ma()}}},isFunction:function(a){return $.call(a)===\"[object Function]\"},isArray:function(a){return $.call(a)===\"[object Array]\"},isPlainObject:function(a){if(!a||$.call(a)!==\"[object Object]\"||a.nodeType||a.setInterval)return false;if(a.constructor&&!aa.call(a,\"constructor\")&&!aa.call(a.constructor.prototype,\n\"isPrototypeOf\"))return false;var b;for(b in a);return b===w||aa.call(a,b)},isEmptyObject:function(a){for(var b in a)return false;return true},error:function(a){throw a;},parseJSON:function(a){if(typeof a!==\"string\"||!a)return null;a=c.trim(a);if(/^[\\],:{}\\s]*$/.test(a.replace(/\\\\(?:[\"\\\\\\/bfnrt]|u[0-9a-fA-F]{4})/g,\"@\").replace(/\"[^\"\\\\\\n\\r]*\"|true|false|null|-?\\d+(?:\\.\\d*)?(?:[eE][+\\-]?\\d+)?/g,\"]\").replace(/(?:^|:|,)(?:\\s*\\[)+/g,\"\")))return A.JSON&&A.JSON.parse?A.JSON.parse(a):(new Function(\"return \"+\na))();else c.error(\"Invalid JSON: \"+a)},noop:function(){},globalEval:function(a){if(a&&Va.test(a)){var b=s.getElementsByTagName(\"head\")[0]||s.documentElement,d=s.createElement(\"script\");d.type=\"text/javascript\";if(c.support.scriptEval)d.appendChild(s.createTextNode(a));else d.text=a;b.insertBefore(d,b.firstChild);b.removeChild(d)}},nodeName:function(a,b){return a.nodeName&&a.nodeName.toUpperCase()===b.toUpperCase()},each:function(a,b,d){var f,e=0,j=a.length,i=j===w||c.isFunction(a);if(d)if(i)for(f in a){if(b.apply(a[f],\nd)===false)break}else for(;e<j;){if(b.apply(a[e++],d)===false)break}else if(i)for(f in a){if(b.call(a[f],f,a[f])===false)break}else for(d=a[0];e<j&&b.call(d,e,d)!==false;d=a[++e]);return a},trim:function(a){return(a||\"\").replace(Wa,\"\")},makeArray:function(a,b){b=b||[];if(a!=null)a.length==null||typeof a===\"string\"||c.isFunction(a)||typeof a!==\"function\"&&a.setInterval?ba.call(b,a):c.merge(b,a);return b},inArray:function(a,b){if(b.indexOf)return b.indexOf(a);for(var d=0,f=b.length;d<f;d++)if(b[d]===\na)return d;return-1},merge:function(a,b){var d=a.length,f=0;if(typeof b.length===\"number\")for(var e=b.length;f<e;f++)a[d++]=b[f];else for(;b[f]!==w;)a[d++]=b[f++];a.length=d;return a},grep:function(a,b,d){for(var f=[],e=0,j=a.length;e<j;e++)!d!==!b(a[e],e)&&f.push(a[e]);return f},map:function(a,b,d){for(var f=[],e,j=0,i=a.length;j<i;j++){e=b(a[j],j,d);if(e!=null)f[f.length]=e}return f.concat.apply([],f)},guid:1,proxy:function(a,b,d){if(arguments.length===2)if(typeof b===\"string\"){d=a;a=d[b];b=w}else if(b&&\n!c.isFunction(b)){d=b;b=w}if(!b&&a)b=function(){return a.apply(d||this,arguments)};if(a)b.guid=a.guid=a.guid||b.guid||c.guid++;return b},uaMatch:function(a){a=a.toLowerCase();a=/(webkit)[ \\/]([\\w.]+)/.exec(a)||/(opera)(?:.*version)?[ \\/]([\\w.]+)/.exec(a)||/(msie) ([\\w.]+)/.exec(a)||!/compatible/.test(a)&&/(mozilla)(?:.*? rv:([\\w.]+))?/.exec(a)||[];return{browser:a[1]||\"\",version:a[2]||\"0\"}},browser:{}});P=c.uaMatch(P);if(P.browser){c.browser[P.browser]=true;c.browser.version=P.version}if(c.browser.webkit)c.browser.safari=\ntrue;if(ya)c.inArray=function(a,b){return ya.call(b,a)};T=c(s);if(s.addEventListener)L=function(){s.removeEventListener(\"DOMContentLoaded\",L,false);c.ready()};else if(s.attachEvent)L=function(){if(s.readyState===\"complete\"){s.detachEvent(\"onreadystatechange\",L);c.ready()}};(function(){c.support={};var a=s.documentElement,b=s.createElement(\"script\"),d=s.createElement(\"div\"),f=\"script\"+J();d.style.display=\"none\";d.innerHTML=\"   <link/><table></table><a href='/a' style='color:red;float:left;opacity:.55;'>a</a><input type='checkbox'/>\";\nvar e=d.getElementsByTagName(\"*\"),j=d.getElementsByTagName(\"a\")[0];if(!(!e||!e.length||!j)){c.support={leadingWhitespace:d.firstChild.nodeType===3,tbody:!d.getElementsByTagName(\"tbody\").length,htmlSerialize:!!d.getElementsByTagName(\"link\").length,style:/red/.test(j.getAttribute(\"style\")),hrefNormalized:j.getAttribute(\"href\")===\"/a\",opacity:/^0.55$/.test(j.style.opacity),cssFloat:!!j.style.cssFloat,checkOn:d.getElementsByTagName(\"input\")[0].value===\"on\",optSelected:s.createElement(\"select\").appendChild(s.createElement(\"option\")).selected,\nparentNode:d.removeChild(d.appendChild(s.createElement(\"div\"))).parentNode===null,deleteExpando:true,checkClone:false,scriptEval:false,noCloneEvent:true,boxModel:null};b.type=\"text/javascript\";try{b.appendChild(s.createTextNode(\"window.\"+f+\"=1;\"))}catch(i){}a.insertBefore(b,a.firstChild);if(A[f]){c.support.scriptEval=true;delete A[f]}try{delete b.test}catch(o){c.support.deleteExpando=false}a.removeChild(b);if(d.attachEvent&&d.fireEvent){d.attachEvent(\"onclick\",function k(){c.support.noCloneEvent=\nfalse;d.detachEvent(\"onclick\",k)});d.cloneNode(true).fireEvent(\"onclick\")}d=s.createElement(\"div\");d.innerHTML=\"<input type='radio' name='radiotest' checked='checked'/>\";a=s.createDocumentFragment();a.appendChild(d.firstChild);c.support.checkClone=a.cloneNode(true).cloneNode(true).lastChild.checked;c(function(){var k=s.createElement(\"div\");k.style.width=k.style.paddingLeft=\"1px\";s.body.appendChild(k);c.boxModel=c.support.boxModel=k.offsetWidth===2;s.body.removeChild(k).style.display=\"none\"});a=function(k){var n=\ns.createElement(\"div\");k=\"on\"+k;var r=k in n;if(!r){n.setAttribute(k,\"return;\");r=typeof n[k]===\"function\"}return r};c.support.submitBubbles=a(\"submit\");c.support.changeBubbles=a(\"change\");a=b=d=e=j=null}})();c.props={\"for\":\"htmlFor\",\"class\":\"className\",readonly:\"readOnly\",maxlength:\"maxLength\",cellspacing:\"cellSpacing\",rowspan:\"rowSpan\",colspan:\"colSpan\",tabindex:\"tabIndex\",usemap:\"useMap\",frameborder:\"frameBorder\"};var G=\"jQuery\"+J(),Ya=0,za={};c.extend({cache:{},expando:G,noData:{embed:true,object:true,\napplet:true},data:function(a,b,d){if(!(a.nodeName&&c.noData[a.nodeName.toLowerCase()])){a=a==A?za:a;var f=a[G],e=c.cache;if(!f&&typeof b===\"string\"&&d===w)return null;f||(f=++Ya);if(typeof b===\"object\"){a[G]=f;e[f]=c.extend(true,{},b)}else if(!e[f]){a[G]=f;e[f]={}}a=e[f];if(d!==w)a[b]=d;return typeof b===\"string\"?a[b]:a}},removeData:function(a,b){if(!(a.nodeName&&c.noData[a.nodeName.toLowerCase()])){a=a==A?za:a;var d=a[G],f=c.cache,e=f[d];if(b){if(e){delete e[b];c.isEmptyObject(e)&&c.removeData(a)}}else{if(c.support.deleteExpando)delete a[c.expando];\nelse a.removeAttribute&&a.removeAttribute(c.expando);delete f[d]}}}});c.fn.extend({data:function(a,b){if(typeof a===\"undefined\"&&this.length)return c.data(this[0]);else if(typeof a===\"object\")return this.each(function(){c.data(this,a)});var d=a.split(\".\");d[1]=d[1]?\".\"+d[1]:\"\";if(b===w){var f=this.triggerHandler(\"getData\"+d[1]+\"!\",[d[0]]);if(f===w&&this.length)f=c.data(this[0],a);return f===w&&d[1]?this.data(d[0]):f}else return this.trigger(\"setData\"+d[1]+\"!\",[d[0],b]).each(function(){c.data(this,\na,b)})},removeData:function(a){return this.each(function(){c.removeData(this,a)})}});c.extend({queue:function(a,b,d){if(a){b=(b||\"fx\")+\"queue\";var f=c.data(a,b);if(!d)return f||[];if(!f||c.isArray(d))f=c.data(a,b,c.makeArray(d));else f.push(d);return f}},dequeue:function(a,b){b=b||\"fx\";var d=c.queue(a,b),f=d.shift();if(f===\"inprogress\")f=d.shift();if(f){b===\"fx\"&&d.unshift(\"inprogress\");f.call(a,function(){c.dequeue(a,b)})}}});c.fn.extend({queue:function(a,b){if(typeof a!==\"string\"){b=a;a=\"fx\"}if(b===\nw)return c.queue(this[0],a);return this.each(function(){var d=c.queue(this,a,b);a===\"fx\"&&d[0]!==\"inprogress\"&&c.dequeue(this,a)})},dequeue:function(a){return this.each(function(){c.dequeue(this,a)})},delay:function(a,b){a=c.fx?c.fx.speeds[a]||a:a;b=b||\"fx\";return this.queue(b,function(){var d=this;setTimeout(function(){c.dequeue(d,b)},a)})},clearQueue:function(a){return this.queue(a||\"fx\",[])}});var Aa=/[\\n\\t]/g,ca=/\\s+/,Za=/\\r/g,$a=/href|src|style/,ab=/(button|input)/i,bb=/(button|input|object|select|textarea)/i,\ncb=/^(a|area)$/i,Ba=/radio|checkbox/;c.fn.extend({attr:function(a,b){return X(this,a,b,true,c.attr)},removeAttr:function(a){return this.each(function(){c.attr(this,a,\"\");this.nodeType===1&&this.removeAttribute(a)})},addClass:function(a){if(c.isFunction(a))return this.each(function(n){var r=c(this);r.addClass(a.call(this,n,r.attr(\"class\")))});if(a&&typeof a===\"string\")for(var b=(a||\"\").split(ca),d=0,f=this.length;d<f;d++){var e=this[d];if(e.nodeType===1)if(e.className){for(var j=\" \"+e.className+\" \",\ni=e.className,o=0,k=b.length;o<k;o++)if(j.indexOf(\" \"+b[o]+\" \")<0)i+=\" \"+b[o];e.className=c.trim(i)}else e.className=a}return this},removeClass:function(a){if(c.isFunction(a))return this.each(function(k){var n=c(this);n.removeClass(a.call(this,k,n.attr(\"class\")))});if(a&&typeof a===\"string\"||a===w)for(var b=(a||\"\").split(ca),d=0,f=this.length;d<f;d++){var e=this[d];if(e.nodeType===1&&e.className)if(a){for(var j=(\" \"+e.className+\" \").replace(Aa,\" \"),i=0,o=b.length;i<o;i++)j=j.replace(\" \"+b[i]+\" \",\n\" \");e.className=c.trim(j)}else e.className=\"\"}return this},toggleClass:function(a,b){var d=typeof a,f=typeof b===\"boolean\";if(c.isFunction(a))return this.each(function(e){var j=c(this);j.toggleClass(a.call(this,e,j.attr(\"class\"),b),b)});return this.each(function(){if(d===\"string\")for(var e,j=0,i=c(this),o=b,k=a.split(ca);e=k[j++];){o=f?o:!i.hasClass(e);i[o?\"addClass\":\"removeClass\"](e)}else if(d===\"undefined\"||d===\"boolean\"){this.className&&c.data(this,\"__className__\",this.className);this.className=\nthis.className||a===false?\"\":c.data(this,\"__className__\")||\"\"}})},hasClass:function(a){a=\" \"+a+\" \";for(var b=0,d=this.length;b<d;b++)if((\" \"+this[b].className+\" \").replace(Aa,\" \").indexOf(a)>-1)return true;return false},val:function(a){if(a===w){var b=this[0];if(b){if(c.nodeName(b,\"option\"))return(b.attributes.value||{}).specified?b.value:b.text;if(c.nodeName(b,\"select\")){var d=b.selectedIndex,f=[],e=b.options;b=b.type===\"select-one\";if(d<0)return null;var j=b?d:0;for(d=b?d+1:e.length;j<d;j++){var i=\ne[j];if(i.selected){a=c(i).val();if(b)return a;f.push(a)}}return f}if(Ba.test(b.type)&&!c.support.checkOn)return b.getAttribute(\"value\")===null?\"on\":b.value;return(b.value||\"\").replace(Za,\"\")}return w}var o=c.isFunction(a);return this.each(function(k){var n=c(this),r=a;if(this.nodeType===1){if(o)r=a.call(this,k,n.val());if(typeof r===\"number\")r+=\"\";if(c.isArray(r)&&Ba.test(this.type))this.checked=c.inArray(n.val(),r)>=0;else if(c.nodeName(this,\"select\")){var u=c.makeArray(r);c(\"option\",this).each(function(){this.selected=\nc.inArray(c(this).val(),u)>=0});if(!u.length)this.selectedIndex=-1}else this.value=r}})}});c.extend({attrFn:{val:true,css:true,html:true,text:true,data:true,width:true,height:true,offset:true},attr:function(a,b,d,f){if(!a||a.nodeType===3||a.nodeType===8)return w;if(f&&b in c.attrFn)return c(a)[b](d);f=a.nodeType!==1||!c.isXMLDoc(a);var e=d!==w;b=f&&c.props[b]||b;if(a.nodeType===1){var j=$a.test(b);if(b in a&&f&&!j){if(e){b===\"type\"&&ab.test(a.nodeName)&&a.parentNode&&c.error(\"type property can't be changed\");\na[b]=d}if(c.nodeName(a,\"form\")&&a.getAttributeNode(b))return a.getAttributeNode(b).nodeValue;if(b===\"tabIndex\")return(b=a.getAttributeNode(\"tabIndex\"))&&b.specified?b.value:bb.test(a.nodeName)||cb.test(a.nodeName)&&a.href?0:w;return a[b]}if(!c.support.style&&f&&b===\"style\"){if(e)a.style.cssText=\"\"+d;return a.style.cssText}e&&a.setAttribute(b,\"\"+d);a=!c.support.hrefNormalized&&f&&j?a.getAttribute(b,2):a.getAttribute(b);return a===null?w:a}return c.style(a,b,d)}});var O=/\\.(.*)$/,db=function(a){return a.replace(/[^\\w\\s\\.\\|`]/g,\nfunction(b){return\"\\\\\"+b})};c.event={add:function(a,b,d,f){if(!(a.nodeType===3||a.nodeType===8)){if(a.setInterval&&a!==A&&!a.frameElement)a=A;var e,j;if(d.handler){e=d;d=e.handler}if(!d.guid)d.guid=c.guid++;if(j=c.data(a)){var i=j.events=j.events||{},o=j.handle;if(!o)j.handle=o=function(){return typeof c!==\"undefined\"&&!c.event.triggered?c.event.handle.apply(o.elem,arguments):w};o.elem=a;b=b.split(\" \");for(var k,n=0,r;k=b[n++];){j=e?c.extend({},e):{handler:d,data:f};if(k.indexOf(\".\")>-1){r=k.split(\".\");\nk=r.shift();j.namespace=r.slice(0).sort().join(\".\")}else{r=[];j.namespace=\"\"}j.type=k;j.guid=d.guid;var u=i[k],z=c.event.special[k]||{};if(!u){u=i[k]=[];if(!z.setup||z.setup.call(a,f,r,o)===false)if(a.addEventListener)a.addEventListener(k,o,false);else a.attachEvent&&a.attachEvent(\"on\"+k,o)}if(z.add){z.add.call(a,j);if(!j.handler.guid)j.handler.guid=d.guid}u.push(j);c.event.global[k]=true}a=null}}},global:{},remove:function(a,b,d,f){if(!(a.nodeType===3||a.nodeType===8)){var e,j=0,i,o,k,n,r,u,z=c.data(a),\nC=z&&z.events;if(z&&C){if(b&&b.type){d=b.handler;b=b.type}if(!b||typeof b===\"string\"&&b.charAt(0)===\".\"){b=b||\"\";for(e in C)c.event.remove(a,e+b)}else{for(b=b.split(\" \");e=b[j++];){n=e;i=e.indexOf(\".\")<0;o=[];if(!i){o=e.split(\".\");e=o.shift();k=new RegExp(\"(^|\\\\.)\"+c.map(o.slice(0).sort(),db).join(\"\\\\.(?:.*\\\\.)?\")+\"(\\\\.|$)\")}if(r=C[e])if(d){n=c.event.special[e]||{};for(B=f||0;B<r.length;B++){u=r[B];if(d.guid===u.guid){if(i||k.test(u.namespace)){f==null&&r.splice(B--,1);n.remove&&n.remove.call(a,u)}if(f!=\nnull)break}}if(r.length===0||f!=null&&r.length===1){if(!n.teardown||n.teardown.call(a,o)===false)Ca(a,e,z.handle);delete C[e]}}else for(var B=0;B<r.length;B++){u=r[B];if(i||k.test(u.namespace)){c.event.remove(a,n,u.handler,B);r.splice(B--,1)}}}if(c.isEmptyObject(C)){if(b=z.handle)b.elem=null;delete z.events;delete z.handle;c.isEmptyObject(z)&&c.removeData(a)}}}}},trigger:function(a,b,d,f){var e=a.type||a;if(!f){a=typeof a===\"object\"?a[G]?a:c.extend(c.Event(e),a):c.Event(e);if(e.indexOf(\"!\")>=0){a.type=\ne=e.slice(0,-1);a.exclusive=true}if(!d){a.stopPropagation();c.event.global[e]&&c.each(c.cache,function(){this.events&&this.events[e]&&c.event.trigger(a,b,this.handle.elem)})}if(!d||d.nodeType===3||d.nodeType===8)return w;a.result=w;a.target=d;b=c.makeArray(b);b.unshift(a)}a.currentTarget=d;(f=c.data(d,\"handle\"))&&f.apply(d,b);f=d.parentNode||d.ownerDocument;try{if(!(d&&d.nodeName&&c.noData[d.nodeName.toLowerCase()]))if(d[\"on\"+e]&&d[\"on\"+e].apply(d,b)===false)a.result=false}catch(j){}if(!a.isPropagationStopped()&&\nf)c.event.trigger(a,b,f,true);else if(!a.isDefaultPrevented()){f=a.target;var i,o=c.nodeName(f,\"a\")&&e===\"click\",k=c.event.special[e]||{};if((!k._default||k._default.call(d,a)===false)&&!o&&!(f&&f.nodeName&&c.noData[f.nodeName.toLowerCase()])){try{if(f[e]){if(i=f[\"on\"+e])f[\"on\"+e]=null;c.event.triggered=true;f[e]()}}catch(n){}if(i)f[\"on\"+e]=i;c.event.triggered=false}}},handle:function(a){var b,d,f,e;a=arguments[0]=c.event.fix(a||A.event);a.currentTarget=this;b=a.type.indexOf(\".\")<0&&!a.exclusive;\nif(!b){d=a.type.split(\".\");a.type=d.shift();f=new RegExp(\"(^|\\\\.)\"+d.slice(0).sort().join(\"\\\\.(?:.*\\\\.)?\")+\"(\\\\.|$)\")}e=c.data(this,\"events\");d=e[a.type];if(e&&d){d=d.slice(0);e=0;for(var j=d.length;e<j;e++){var i=d[e];if(b||f.test(i.namespace)){a.handler=i.handler;a.data=i.data;a.handleObj=i;i=i.handler.apply(this,arguments);if(i!==w){a.result=i;if(i===false){a.preventDefault();a.stopPropagation()}}if(a.isImmediatePropagationStopped())break}}}return a.result},props:\"altKey attrChange attrName bubbles button cancelable charCode clientX clientY ctrlKey currentTarget data detail eventPhase fromElement handler keyCode layerX layerY metaKey newValue offsetX offsetY originalTarget pageX pageY prevValue relatedNode relatedTarget screenX screenY shiftKey srcElement target toElement view wheelDelta which\".split(\" \"),\nfix:function(a){if(a[G])return a;var b=a;a=c.Event(b);for(var d=this.props.length,f;d;){f=this.props[--d];a[f]=b[f]}if(!a.target)a.target=a.srcElement||s;if(a.target.nodeType===3)a.target=a.target.parentNode;if(!a.relatedTarget&&a.fromElement)a.relatedTarget=a.fromElement===a.target?a.toElement:a.fromElement;if(a.pageX==null&&a.clientX!=null){b=s.documentElement;d=s.body;a.pageX=a.clientX+(b&&b.scrollLeft||d&&d.scrollLeft||0)-(b&&b.clientLeft||d&&d.clientLeft||0);a.pageY=a.clientY+(b&&b.scrollTop||\nd&&d.scrollTop||0)-(b&&b.clientTop||d&&d.clientTop||0)}if(!a.which&&(a.charCode||a.charCode===0?a.charCode:a.keyCode))a.which=a.charCode||a.keyCode;if(!a.metaKey&&a.ctrlKey)a.metaKey=a.ctrlKey;if(!a.which&&a.button!==w)a.which=a.button&1?1:a.button&2?3:a.button&4?2:0;return a},guid:1E8,proxy:c.proxy,special:{ready:{setup:c.bindReady,teardown:c.noop},live:{add:function(a){c.event.add(this,a.origType,c.extend({},a,{handler:oa}))},remove:function(a){var b=true,d=a.origType.replace(O,\"\");c.each(c.data(this,\n\"events\").live||[],function(){if(d===this.origType.replace(O,\"\"))return b=false});b&&c.event.remove(this,a.origType,oa)}},beforeunload:{setup:function(a,b,d){if(this.setInterval)this.onbeforeunload=d;return false},teardown:function(a,b){if(this.onbeforeunload===b)this.onbeforeunload=null}}}};var Ca=s.removeEventListener?function(a,b,d){a.removeEventListener(b,d,false)}:function(a,b,d){a.detachEvent(\"on\"+b,d)};c.Event=function(a){if(!this.preventDefault)return new c.Event(a);if(a&&a.type){this.originalEvent=\na;this.type=a.type}else this.type=a;this.timeStamp=J();this[G]=true};c.Event.prototype={preventDefault:function(){this.isDefaultPrevented=Z;var a=this.originalEvent;if(a){a.preventDefault&&a.preventDefault();a.returnValue=false}},stopPropagation:function(){this.isPropagationStopped=Z;var a=this.originalEvent;if(a){a.stopPropagation&&a.stopPropagation();a.cancelBubble=true}},stopImmediatePropagation:function(){this.isImmediatePropagationStopped=Z;this.stopPropagation()},isDefaultPrevented:Y,isPropagationStopped:Y,\nisImmediatePropagationStopped:Y};var Da=function(a){var b=a.relatedTarget;try{for(;b&&b!==this;)b=b.parentNode;if(b!==this){a.type=a.data;c.event.handle.apply(this,arguments)}}catch(d){}},Ea=function(a){a.type=a.data;c.event.handle.apply(this,arguments)};c.each({mouseenter:\"mouseover\",mouseleave:\"mouseout\"},function(a,b){c.event.special[a]={setup:function(d){c.event.add(this,b,d&&d.selector?Ea:Da,a)},teardown:function(d){c.event.remove(this,b,d&&d.selector?Ea:Da)}}});if(!c.support.submitBubbles)c.event.special.submit=\n{setup:function(){if(this.nodeName.toLowerCase()!==\"form\"){c.event.add(this,\"click.specialSubmit\",function(a){var b=a.target,d=b.type;if((d===\"submit\"||d===\"image\")&&c(b).closest(\"form\").length)return na(\"submit\",this,arguments)});c.event.add(this,\"keypress.specialSubmit\",function(a){var b=a.target,d=b.type;if((d===\"text\"||d===\"password\")&&c(b).closest(\"form\").length&&a.keyCode===13)return na(\"submit\",this,arguments)})}else return false},teardown:function(){c.event.remove(this,\".specialSubmit\")}};\nif(!c.support.changeBubbles){var da=/textarea|input|select/i,ea,Fa=function(a){var b=a.type,d=a.value;if(b===\"radio\"||b===\"checkbox\")d=a.checked;else if(b===\"select-multiple\")d=a.selectedIndex>-1?c.map(a.options,function(f){return f.selected}).join(\"-\"):\"\";else if(a.nodeName.toLowerCase()===\"select\")d=a.selectedIndex;return d},fa=function(a,b){var d=a.target,f,e;if(!(!da.test(d.nodeName)||d.readOnly)){f=c.data(d,\"_change_data\");e=Fa(d);if(a.type!==\"focusout\"||d.type!==\"radio\")c.data(d,\"_change_data\",\ne);if(!(f===w||e===f))if(f!=null||e){a.type=\"change\";return c.event.trigger(a,b,d)}}};c.event.special.change={filters:{focusout:fa,click:function(a){var b=a.target,d=b.type;if(d===\"radio\"||d===\"checkbox\"||b.nodeName.toLowerCase()===\"select\")return fa.call(this,a)},keydown:function(a){var b=a.target,d=b.type;if(a.keyCode===13&&b.nodeName.toLowerCase()!==\"textarea\"||a.keyCode===32&&(d===\"checkbox\"||d===\"radio\")||d===\"select-multiple\")return fa.call(this,a)},beforeactivate:function(a){a=a.target;c.data(a,\n\"_change_data\",Fa(a))}},setup:function(){if(this.type===\"file\")return false;for(var a in ea)c.event.add(this,a+\".specialChange\",ea[a]);return da.test(this.nodeName)},teardown:function(){c.event.remove(this,\".specialChange\");return da.test(this.nodeName)}};ea=c.event.special.change.filters}s.addEventListener&&c.each({focus:\"focusin\",blur:\"focusout\"},function(a,b){function d(f){f=c.event.fix(f);f.type=b;return c.event.handle.call(this,f)}c.event.special[b]={setup:function(){this.addEventListener(a,\nd,true)},teardown:function(){this.removeEventListener(a,d,true)}}});c.each([\"bind\",\"one\"],function(a,b){c.fn[b]=function(d,f,e){if(typeof d===\"object\"){for(var j in d)this[b](j,f,d[j],e);return this}if(c.isFunction(f)){e=f;f=w}var i=b===\"one\"?c.proxy(e,function(k){c(this).unbind(k,i);return e.apply(this,arguments)}):e;if(d===\"unload\"&&b!==\"one\")this.one(d,f,e);else{j=0;for(var o=this.length;j<o;j++)c.event.add(this[j],d,i,f)}return this}});c.fn.extend({unbind:function(a,b){if(typeof a===\"object\"&&\n!a.preventDefault)for(var d in a)this.unbind(d,a[d]);else{d=0;for(var f=this.length;d<f;d++)c.event.remove(this[d],a,b)}return this},delegate:function(a,b,d,f){return this.live(b,d,f,a)},undelegate:function(a,b,d){return arguments.length===0?this.unbind(\"live\"):this.die(b,null,d,a)},trigger:function(a,b){return this.each(function(){c.event.trigger(a,b,this)})},triggerHandler:function(a,b){if(this[0]){a=c.Event(a);a.preventDefault();a.stopPropagation();c.event.trigger(a,b,this[0]);return a.result}},\ntoggle:function(a){for(var b=arguments,d=1;d<b.length;)c.proxy(a,b[d++]);return this.click(c.proxy(a,function(f){var e=(c.data(this,\"lastToggle\"+a.guid)||0)%d;c.data(this,\"lastToggle\"+a.guid,e+1);f.preventDefault();return b[e].apply(this,arguments)||false}))},hover:function(a,b){return this.mouseenter(a).mouseleave(b||a)}});var Ga={focus:\"focusin\",blur:\"focusout\",mouseenter:\"mouseover\",mouseleave:\"mouseout\"};c.each([\"live\",\"die\"],function(a,b){c.fn[b]=function(d,f,e,j){var i,o=0,k,n,r=j||this.selector,\nu=j?this:c(this.context);if(c.isFunction(f)){e=f;f=w}for(d=(d||\"\").split(\" \");(i=d[o++])!=null;){j=O.exec(i);k=\"\";if(j){k=j[0];i=i.replace(O,\"\")}if(i===\"hover\")d.push(\"mouseenter\"+k,\"mouseleave\"+k);else{n=i;if(i===\"focus\"||i===\"blur\"){d.push(Ga[i]+k);i+=k}else i=(Ga[i]||i)+k;b===\"live\"?u.each(function(){c.event.add(this,pa(i,r),{data:f,selector:r,handler:e,origType:i,origHandler:e,preType:n})}):u.unbind(pa(i,r),e)}}return this}});c.each(\"blur focus focusin focusout load resize scroll unload click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup error\".split(\" \"),\nfunction(a,b){c.fn[b]=function(d){return d?this.bind(b,d):this.trigger(b)};if(c.attrFn)c.attrFn[b]=true});A.attachEvent&&!A.addEventListener&&A.attachEvent(\"onunload\",function(){for(var a in c.cache)if(c.cache[a].handle)try{c.event.remove(c.cache[a].handle.elem)}catch(b){}});(function(){function a(g){for(var h=\"\",l,m=0;g[m];m++){l=g[m];if(l.nodeType===3||l.nodeType===4)h+=l.nodeValue;else if(l.nodeType!==8)h+=a(l.childNodes)}return h}function b(g,h,l,m,q,p){q=0;for(var v=m.length;q<v;q++){var t=m[q];\nif(t){t=t[g];for(var y=false;t;){if(t.sizcache===l){y=m[t.sizset];break}if(t.nodeType===1&&!p){t.sizcache=l;t.sizset=q}if(t.nodeName.toLowerCase()===h){y=t;break}t=t[g]}m[q]=y}}}function d(g,h,l,m,q,p){q=0;for(var v=m.length;q<v;q++){var t=m[q];if(t){t=t[g];for(var y=false;t;){if(t.sizcache===l){y=m[t.sizset];break}if(t.nodeType===1){if(!p){t.sizcache=l;t.sizset=q}if(typeof h!==\"string\"){if(t===h){y=true;break}}else if(k.filter(h,[t]).length>0){y=t;break}}t=t[g]}m[q]=y}}}var f=/((?:\\((?:\\([^()]+\\)|[^()]+)+\\)|\\[(?:\\[[^[\\]]*\\]|['\"][^'\"]*['\"]|[^[\\]'\"]+)+\\]|\\\\.|[^ >+~,(\\[\\\\]+)+|[>+~])(\\s*,\\s*)?((?:.|\\r|\\n)*)/g,\ne=0,j=Object.prototype.toString,i=false,o=true;[0,0].sort(function(){o=false;return 0});var k=function(g,h,l,m){l=l||[];var q=h=h||s;if(h.nodeType!==1&&h.nodeType!==9)return[];if(!g||typeof g!==\"string\")return l;for(var p=[],v,t,y,S,H=true,M=x(h),I=g;(f.exec(\"\"),v=f.exec(I))!==null;){I=v[3];p.push(v[1]);if(v[2]){S=v[3];break}}if(p.length>1&&r.exec(g))if(p.length===2&&n.relative[p[0]])t=ga(p[0]+p[1],h);else for(t=n.relative[p[0]]?[h]:k(p.shift(),h);p.length;){g=p.shift();if(n.relative[g])g+=p.shift();\nt=ga(g,t)}else{if(!m&&p.length>1&&h.nodeType===9&&!M&&n.match.ID.test(p[0])&&!n.match.ID.test(p[p.length-1])){v=k.find(p.shift(),h,M);h=v.expr?k.filter(v.expr,v.set)[0]:v.set[0]}if(h){v=m?{expr:p.pop(),set:z(m)}:k.find(p.pop(),p.length===1&&(p[0]===\"~\"||p[0]===\"+\")&&h.parentNode?h.parentNode:h,M);t=v.expr?k.filter(v.expr,v.set):v.set;if(p.length>0)y=z(t);else H=false;for(;p.length;){var D=p.pop();v=D;if(n.relative[D])v=p.pop();else D=\"\";if(v==null)v=h;n.relative[D](y,v,M)}}else y=[]}y||(y=t);y||k.error(D||\ng);if(j.call(y)===\"[object Array]\")if(H)if(h&&h.nodeType===1)for(g=0;y[g]!=null;g++){if(y[g]&&(y[g]===true||y[g].nodeType===1&&E(h,y[g])))l.push(t[g])}else for(g=0;y[g]!=null;g++)y[g]&&y[g].nodeType===1&&l.push(t[g]);else l.push.apply(l,y);else z(y,l);if(S){k(S,q,l,m);k.uniqueSort(l)}return l};k.uniqueSort=function(g){if(B){i=o;g.sort(B);if(i)for(var h=1;h<g.length;h++)g[h]===g[h-1]&&g.splice(h--,1)}return g};k.matches=function(g,h){return k(g,null,null,h)};k.find=function(g,h,l){var m,q;if(!g)return[];\nfor(var p=0,v=n.order.length;p<v;p++){var t=n.order[p];if(q=n.leftMatch[t].exec(g)){var y=q[1];q.splice(1,1);if(y.substr(y.length-1)!==\"\\\\\"){q[1]=(q[1]||\"\").replace(/\\\\/g,\"\");m=n.find[t](q,h,l);if(m!=null){g=g.replace(n.match[t],\"\");break}}}}m||(m=h.getElementsByTagName(\"*\"));return{set:m,expr:g}};k.filter=function(g,h,l,m){for(var q=g,p=[],v=h,t,y,S=h&&h[0]&&x(h[0]);g&&h.length;){for(var H in n.filter)if((t=n.leftMatch[H].exec(g))!=null&&t[2]){var M=n.filter[H],I,D;D=t[1];y=false;t.splice(1,1);if(D.substr(D.length-\n1)!==\"\\\\\"){if(v===p)p=[];if(n.preFilter[H])if(t=n.preFilter[H](t,v,l,p,m,S)){if(t===true)continue}else y=I=true;if(t)for(var U=0;(D=v[U])!=null;U++)if(D){I=M(D,t,U,v);var Ha=m^!!I;if(l&&I!=null)if(Ha)y=true;else v[U]=false;else if(Ha){p.push(D);y=true}}if(I!==w){l||(v=p);g=g.replace(n.match[H],\"\");if(!y)return[];break}}}if(g===q)if(y==null)k.error(g);else break;q=g}return v};k.error=function(g){throw\"Syntax error, unrecognized expression: \"+g;};var n=k.selectors={order:[\"ID\",\"NAME\",\"TAG\"],match:{ID:/#((?:[\\w\\u00c0-\\uFFFF-]|\\\\.)+)/,\nCLASS:/\\.((?:[\\w\\u00c0-\\uFFFF-]|\\\\.)+)/,NAME:/\\[name=['\"]*((?:[\\w\\u00c0-\\uFFFF-]|\\\\.)+)['\"]*\\]/,ATTR:/\\[\\s*((?:[\\w\\u00c0-\\uFFFF-]|\\\\.)+)\\s*(?:(\\S?=)\\s*(['\"]*)(.*?)\\3|)\\s*\\]/,TAG:/^((?:[\\w\\u00c0-\\uFFFF\\*-]|\\\\.)+)/,CHILD:/:(only|nth|last|first)-child(?:\\((even|odd|[\\dn+-]*)\\))?/,POS:/:(nth|eq|gt|lt|first|last|even|odd)(?:\\((\\d*)\\))?(?=[^-]|$)/,PSEUDO:/:((?:[\\w\\u00c0-\\uFFFF-]|\\\\.)+)(?:\\((['\"]?)((?:\\([^\\)]+\\)|[^\\(\\)]*)+)\\2\\))?/},leftMatch:{},attrMap:{\"class\":\"className\",\"for\":\"htmlFor\"},attrHandle:{href:function(g){return g.getAttribute(\"href\")}},\nrelative:{\"+\":function(g,h){var l=typeof h===\"string\",m=l&&!/\\W/.test(h);l=l&&!m;if(m)h=h.toLowerCase();m=0;for(var q=g.length,p;m<q;m++)if(p=g[m]){for(;(p=p.previousSibling)&&p.nodeType!==1;);g[m]=l||p&&p.nodeName.toLowerCase()===h?p||false:p===h}l&&k.filter(h,g,true)},\">\":function(g,h){var l=typeof h===\"string\";if(l&&!/\\W/.test(h)){h=h.toLowerCase();for(var m=0,q=g.length;m<q;m++){var p=g[m];if(p){l=p.parentNode;g[m]=l.nodeName.toLowerCase()===h?l:false}}}else{m=0;for(q=g.length;m<q;m++)if(p=g[m])g[m]=\nl?p.parentNode:p.parentNode===h;l&&k.filter(h,g,true)}},\"\":function(g,h,l){var m=e++,q=d;if(typeof h===\"string\"&&!/\\W/.test(h)){var p=h=h.toLowerCase();q=b}q(\"parentNode\",h,m,g,p,l)},\"~\":function(g,h,l){var m=e++,q=d;if(typeof h===\"string\"&&!/\\W/.test(h)){var p=h=h.toLowerCase();q=b}q(\"previousSibling\",h,m,g,p,l)}},find:{ID:function(g,h,l){if(typeof h.getElementById!==\"undefined\"&&!l)return(g=h.getElementById(g[1]))?[g]:[]},NAME:function(g,h){if(typeof h.getElementsByName!==\"undefined\"){var l=[];\nh=h.getElementsByName(g[1]);for(var m=0,q=h.length;m<q;m++)h[m].getAttribute(\"name\")===g[1]&&l.push(h[m]);return l.length===0?null:l}},TAG:function(g,h){return h.getElementsByTagName(g[1])}},preFilter:{CLASS:function(g,h,l,m,q,p){g=\" \"+g[1].replace(/\\\\/g,\"\")+\" \";if(p)return g;p=0;for(var v;(v=h[p])!=null;p++)if(v)if(q^(v.className&&(\" \"+v.className+\" \").replace(/[\\t\\n]/g,\" \").indexOf(g)>=0))l||m.push(v);else if(l)h[p]=false;return false},ID:function(g){return g[1].replace(/\\\\/g,\"\")},TAG:function(g){return g[1].toLowerCase()},\nCHILD:function(g){if(g[1]===\"nth\"){var h=/(-?)(\\d*)n((?:\\+|-)?\\d*)/.exec(g[2]===\"even\"&&\"2n\"||g[2]===\"odd\"&&\"2n+1\"||!/\\D/.test(g[2])&&\"0n+\"+g[2]||g[2]);g[2]=h[1]+(h[2]||1)-0;g[3]=h[3]-0}g[0]=e++;return g},ATTR:function(g,h,l,m,q,p){h=g[1].replace(/\\\\/g,\"\");if(!p&&n.attrMap[h])g[1]=n.attrMap[h];if(g[2]===\"~=\")g[4]=\" \"+g[4]+\" \";return g},PSEUDO:function(g,h,l,m,q){if(g[1]===\"not\")if((f.exec(g[3])||\"\").length>1||/^\\w/.test(g[3]))g[3]=k(g[3],null,null,h);else{g=k.filter(g[3],h,l,true^q);l||m.push.apply(m,\ng);return false}else if(n.match.POS.test(g[0])||n.match.CHILD.test(g[0]))return true;return g},POS:function(g){g.unshift(true);return g}},filters:{enabled:function(g){return g.disabled===false&&g.type!==\"hidden\"},disabled:function(g){return g.disabled===true},checked:function(g){return g.checked===true},selected:function(g){return g.selected===true},parent:function(g){return!!g.firstChild},empty:function(g){return!g.firstChild},has:function(g,h,l){return!!k(l[3],g).length},header:function(g){return/h\\d/i.test(g.nodeName)},\ntext:function(g){return\"text\"===g.type},radio:function(g){return\"radio\"===g.type},checkbox:function(g){return\"checkbox\"===g.type},file:function(g){return\"file\"===g.type},password:function(g){return\"password\"===g.type},submit:function(g){return\"submit\"===g.type},image:function(g){return\"image\"===g.type},reset:function(g){return\"reset\"===g.type},button:function(g){return\"button\"===g.type||g.nodeName.toLowerCase()===\"button\"},input:function(g){return/input|select|textarea|button/i.test(g.nodeName)}},\nsetFilters:{first:function(g,h){return h===0},last:function(g,h,l,m){return h===m.length-1},even:function(g,h){return h%2===0},odd:function(g,h){return h%2===1},lt:function(g,h,l){return h<l[3]-0},gt:function(g,h,l){return h>l[3]-0},nth:function(g,h,l){return l[3]-0===h},eq:function(g,h,l){return l[3]-0===h}},filter:{PSEUDO:function(g,h,l,m){var q=h[1],p=n.filters[q];if(p)return p(g,l,h,m);else if(q===\"contains\")return(g.textContent||g.innerText||a([g])||\"\").indexOf(h[3])>=0;else if(q===\"not\"){h=\nh[3];l=0;for(m=h.length;l<m;l++)if(h[l]===g)return false;return true}else k.error(\"Syntax error, unrecognized expression: \"+q)},CHILD:function(g,h){var l=h[1],m=g;switch(l){case \"only\":case \"first\":for(;m=m.previousSibling;)if(m.nodeType===1)return false;if(l===\"first\")return true;m=g;case \"last\":for(;m=m.nextSibling;)if(m.nodeType===1)return false;return true;case \"nth\":l=h[2];var q=h[3];if(l===1&&q===0)return true;h=h[0];var p=g.parentNode;if(p&&(p.sizcache!==h||!g.nodeIndex)){var v=0;for(m=p.firstChild;m;m=\nm.nextSibling)if(m.nodeType===1)m.nodeIndex=++v;p.sizcache=h}g=g.nodeIndex-q;return l===0?g===0:g%l===0&&g/l>=0}},ID:function(g,h){return g.nodeType===1&&g.getAttribute(\"id\")===h},TAG:function(g,h){return h===\"*\"&&g.nodeType===1||g.nodeName.toLowerCase()===h},CLASS:function(g,h){return(\" \"+(g.className||g.getAttribute(\"class\"))+\" \").indexOf(h)>-1},ATTR:function(g,h){var l=h[1];g=n.attrHandle[l]?n.attrHandle[l](g):g[l]!=null?g[l]:g.getAttribute(l);l=g+\"\";var m=h[2];h=h[4];return g==null?m===\"!=\":m===\n\"=\"?l===h:m===\"*=\"?l.indexOf(h)>=0:m===\"~=\"?(\" \"+l+\" \").indexOf(h)>=0:!h?l&&g!==false:m===\"!=\"?l!==h:m===\"^=\"?l.indexOf(h)===0:m===\"$=\"?l.substr(l.length-h.length)===h:m===\"|=\"?l===h||l.substr(0,h.length+1)===h+\"-\":false},POS:function(g,h,l,m){var q=n.setFilters[h[2]];if(q)return q(g,l,h,m)}}},r=n.match.POS;for(var u in n.match){n.match[u]=new RegExp(n.match[u].source+/(?![^\\[]*\\])(?![^\\(]*\\))/.source);n.leftMatch[u]=new RegExp(/(^(?:.|\\r|\\n)*?)/.source+n.match[u].source.replace(/\\\\(\\d+)/g,function(g,\nh){return\"\\\\\"+(h-0+1)}))}var z=function(g,h){g=Array.prototype.slice.call(g,0);if(h){h.push.apply(h,g);return h}return g};try{Array.prototype.slice.call(s.documentElement.childNodes,0)}catch(C){z=function(g,h){h=h||[];if(j.call(g)===\"[object Array]\")Array.prototype.push.apply(h,g);else if(typeof g.length===\"number\")for(var l=0,m=g.length;l<m;l++)h.push(g[l]);else for(l=0;g[l];l++)h.push(g[l]);return h}}var B;if(s.documentElement.compareDocumentPosition)B=function(g,h){if(!g.compareDocumentPosition||\n!h.compareDocumentPosition){if(g==h)i=true;return g.compareDocumentPosition?-1:1}g=g.compareDocumentPosition(h)&4?-1:g===h?0:1;if(g===0)i=true;return g};else if(\"sourceIndex\"in s.documentElement)B=function(g,h){if(!g.sourceIndex||!h.sourceIndex){if(g==h)i=true;return g.sourceIndex?-1:1}g=g.sourceIndex-h.sourceIndex;if(g===0)i=true;return g};else if(s.createRange)B=function(g,h){if(!g.ownerDocument||!h.ownerDocument){if(g==h)i=true;return g.ownerDocument?-1:1}var l=g.ownerDocument.createRange(),m=\nh.ownerDocument.createRange();l.setStart(g,0);l.setEnd(g,0);m.setStart(h,0);m.setEnd(h,0);g=l.compareBoundaryPoints(Range.START_TO_END,m);if(g===0)i=true;return g};(function(){var g=s.createElement(\"div\"),h=\"script\"+(new Date).getTime();g.innerHTML=\"<a name='\"+h+\"'/>\";var l=s.documentElement;l.insertBefore(g,l.firstChild);if(s.getElementById(h)){n.find.ID=function(m,q,p){if(typeof q.getElementById!==\"undefined\"&&!p)return(q=q.getElementById(m[1]))?q.id===m[1]||typeof q.getAttributeNode!==\"undefined\"&&\nq.getAttributeNode(\"id\").nodeValue===m[1]?[q]:w:[]};n.filter.ID=function(m,q){var p=typeof m.getAttributeNode!==\"undefined\"&&m.getAttributeNode(\"id\");return m.nodeType===1&&p&&p.nodeValue===q}}l.removeChild(g);l=g=null})();(function(){var g=s.createElement(\"div\");g.appendChild(s.createComment(\"\"));if(g.getElementsByTagName(\"*\").length>0)n.find.TAG=function(h,l){l=l.getElementsByTagName(h[1]);if(h[1]===\"*\"){h=[];for(var m=0;l[m];m++)l[m].nodeType===1&&h.push(l[m]);l=h}return l};g.innerHTML=\"<a href='#'></a>\";\nif(g.firstChild&&typeof g.firstChild.getAttribute!==\"undefined\"&&g.firstChild.getAttribute(\"href\")!==\"#\")n.attrHandle.href=function(h){return h.getAttribute(\"href\",2)};g=null})();s.querySelectorAll&&function(){var g=k,h=s.createElement(\"div\");h.innerHTML=\"<p class='TEST'></p>\";if(!(h.querySelectorAll&&h.querySelectorAll(\".TEST\").length===0)){k=function(m,q,p,v){q=q||s;if(!v&&q.nodeType===9&&!x(q))try{return z(q.querySelectorAll(m),p)}catch(t){}return g(m,q,p,v)};for(var l in g)k[l]=g[l];h=null}}();\n(function(){var g=s.createElement(\"div\");g.innerHTML=\"<div class='test e'></div><div class='test'></div>\";if(!(!g.getElementsByClassName||g.getElementsByClassName(\"e\").length===0)){g.lastChild.className=\"e\";if(g.getElementsByClassName(\"e\").length!==1){n.order.splice(1,0,\"CLASS\");n.find.CLASS=function(h,l,m){if(typeof l.getElementsByClassName!==\"undefined\"&&!m)return l.getElementsByClassName(h[1])};g=null}}})();var E=s.compareDocumentPosition?function(g,h){return!!(g.compareDocumentPosition(h)&16)}:\nfunction(g,h){return g!==h&&(g.contains?g.contains(h):true)},x=function(g){return(g=(g?g.ownerDocument||g:0).documentElement)?g.nodeName!==\"HTML\":false},ga=function(g,h){var l=[],m=\"\",q;for(h=h.nodeType?[h]:h;q=n.match.PSEUDO.exec(g);){m+=q[0];g=g.replace(n.match.PSEUDO,\"\")}g=n.relative[g]?g+\"*\":g;q=0;for(var p=h.length;q<p;q++)k(g,h[q],l);return k.filter(m,l)};c.find=k;c.expr=k.selectors;c.expr[\":\"]=c.expr.filters;c.unique=k.uniqueSort;c.text=a;c.isXMLDoc=x;c.contains=E})();var eb=/Until$/,fb=/^(?:parents|prevUntil|prevAll)/,\ngb=/,/;R=Array.prototype.slice;var Ia=function(a,b,d){if(c.isFunction(b))return c.grep(a,function(e,j){return!!b.call(e,j,e)===d});else if(b.nodeType)return c.grep(a,function(e){return e===b===d});else if(typeof b===\"string\"){var f=c.grep(a,function(e){return e.nodeType===1});if(Ua.test(b))return c.filter(b,f,!d);else b=c.filter(b,f)}return c.grep(a,function(e){return c.inArray(e,b)>=0===d})};c.fn.extend({find:function(a){for(var b=this.pushStack(\"\",\"find\",a),d=0,f=0,e=this.length;f<e;f++){d=b.length;\nc.find(a,this[f],b);if(f>0)for(var j=d;j<b.length;j++)for(var i=0;i<d;i++)if(b[i]===b[j]){b.splice(j--,1);break}}return b},has:function(a){var b=c(a);return this.filter(function(){for(var d=0,f=b.length;d<f;d++)if(c.contains(this,b[d]))return true})},not:function(a){return this.pushStack(Ia(this,a,false),\"not\",a)},filter:function(a){return this.pushStack(Ia(this,a,true),\"filter\",a)},is:function(a){return!!a&&c.filter(a,this).length>0},closest:function(a,b){if(c.isArray(a)){var d=[],f=this[0],e,j=\n{},i;if(f&&a.length){e=0;for(var o=a.length;e<o;e++){i=a[e];j[i]||(j[i]=c.expr.match.POS.test(i)?c(i,b||this.context):i)}for(;f&&f.ownerDocument&&f!==b;){for(i in j){e=j[i];if(e.jquery?e.index(f)>-1:c(f).is(e)){d.push({selector:i,elem:f});delete j[i]}}f=f.parentNode}}return d}var k=c.expr.match.POS.test(a)?c(a,b||this.context):null;return this.map(function(n,r){for(;r&&r.ownerDocument&&r!==b;){if(k?k.index(r)>-1:c(r).is(a))return r;r=r.parentNode}return null})},index:function(a){if(!a||typeof a===\n\"string\")return c.inArray(this[0],a?c(a):this.parent().children());return c.inArray(a.jquery?a[0]:a,this)},add:function(a,b){a=typeof a===\"string\"?c(a,b||this.context):c.makeArray(a);b=c.merge(this.get(),a);return this.pushStack(qa(a[0])||qa(b[0])?b:c.unique(b))},andSelf:function(){return this.add(this.prevObject)}});c.each({parent:function(a){return(a=a.parentNode)&&a.nodeType!==11?a:null},parents:function(a){return c.dir(a,\"parentNode\")},parentsUntil:function(a,b,d){return c.dir(a,\"parentNode\",\nd)},next:function(a){return c.nth(a,2,\"nextSibling\")},prev:function(a){return c.nth(a,2,\"previousSibling\")},nextAll:function(a){return c.dir(a,\"nextSibling\")},prevAll:function(a){return c.dir(a,\"previousSibling\")},nextUntil:function(a,b,d){return c.dir(a,\"nextSibling\",d)},prevUntil:function(a,b,d){return c.dir(a,\"previousSibling\",d)},siblings:function(a){return c.sibling(a.parentNode.firstChild,a)},children:function(a){return c.sibling(a.firstChild)},contents:function(a){return c.nodeName(a,\"iframe\")?\na.contentDocument||a.contentWindow.document:c.makeArray(a.childNodes)}},function(a,b){c.fn[a]=function(d,f){var e=c.map(this,b,d);eb.test(a)||(f=d);if(f&&typeof f===\"string\")e=c.filter(f,e);e=this.length>1?c.unique(e):e;if((this.length>1||gb.test(f))&&fb.test(a))e=e.reverse();return this.pushStack(e,a,R.call(arguments).join(\",\"))}});c.extend({filter:function(a,b,d){if(d)a=\":not(\"+a+\")\";return c.find.matches(a,b)},dir:function(a,b,d){var f=[];for(a=a[b];a&&a.nodeType!==9&&(d===w||a.nodeType!==1||!c(a).is(d));){a.nodeType===\n1&&f.push(a);a=a[b]}return f},nth:function(a,b,d){b=b||1;for(var f=0;a;a=a[d])if(a.nodeType===1&&++f===b)break;return a},sibling:function(a,b){for(var d=[];a;a=a.nextSibling)a.nodeType===1&&a!==b&&d.push(a);return d}});var Ja=/ jQuery\\d+=\"(?:\\d+|null)\"/g,V=/^\\s+/,Ka=/(<([\\w:]+)[^>]*?)\\/>/g,hb=/^(?:area|br|col|embed|hr|img|input|link|meta|param)$/i,La=/<([\\w:]+)/,ib=/<tbody/i,jb=/<|&#?\\w+;/,ta=/<script|<object|<embed|<option|<style/i,ua=/checked\\s*(?:[^=]|=\\s*.checked.)/i,Ma=function(a,b,d){return hb.test(d)?\na:b+\"></\"+d+\">\"},F={option:[1,\"<select multiple='multiple'>\",\"</select>\"],legend:[1,\"<fieldset>\",\"</fieldset>\"],thead:[1,\"<table>\",\"</table>\"],tr:[2,\"<table><tbody>\",\"</tbody></table>\"],td:[3,\"<table><tbody><tr>\",\"</tr></tbody></table>\"],col:[2,\"<table><tbody></tbody><colgroup>\",\"</colgroup></table>\"],area:[1,\"<map>\",\"</map>\"],_default:[0,\"\",\"\"]};F.optgroup=F.option;F.tbody=F.tfoot=F.colgroup=F.caption=F.thead;F.th=F.td;if(!c.support.htmlSerialize)F._default=[1,\"div<div>\",\"</div>\"];c.fn.extend({text:function(a){if(c.isFunction(a))return this.each(function(b){var d=\nc(this);d.text(a.call(this,b,d.text()))});if(typeof a!==\"object\"&&a!==w)return this.empty().append((this[0]&&this[0].ownerDocument||s).createTextNode(a));return c.text(this)},wrapAll:function(a){if(c.isFunction(a))return this.each(function(d){c(this).wrapAll(a.call(this,d))});if(this[0]){var b=c(a,this[0].ownerDocument).eq(0).clone(true);this[0].parentNode&&b.insertBefore(this[0]);b.map(function(){for(var d=this;d.firstChild&&d.firstChild.nodeType===1;)d=d.firstChild;return d}).append(this)}return this},\nwrapInner:function(a){if(c.isFunction(a))return this.each(function(b){c(this).wrapInner(a.call(this,b))});return this.each(function(){var b=c(this),d=b.contents();d.length?d.wrapAll(a):b.append(a)})},wrap:function(a){return this.each(function(){c(this).wrapAll(a)})},unwrap:function(){return this.parent().each(function(){c.nodeName(this,\"body\")||c(this).replaceWith(this.childNodes)}).end()},append:function(){return this.domManip(arguments,true,function(a){this.nodeType===1&&this.appendChild(a)})},\nprepend:function(){return this.domManip(arguments,true,function(a){this.nodeType===1&&this.insertBefore(a,this.firstChild)})},before:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,false,function(b){this.parentNode.insertBefore(b,this)});else if(arguments.length){var a=c(arguments[0]);a.push.apply(a,this.toArray());return this.pushStack(a,\"before\",arguments)}},after:function(){if(this[0]&&this[0].parentNode)return this.domManip(arguments,false,function(b){this.parentNode.insertBefore(b,\nthis.nextSibling)});else if(arguments.length){var a=this.pushStack(this,\"after\",arguments);a.push.apply(a,c(arguments[0]).toArray());return a}},remove:function(a,b){for(var d=0,f;(f=this[d])!=null;d++)if(!a||c.filter(a,[f]).length){if(!b&&f.nodeType===1){c.cleanData(f.getElementsByTagName(\"*\"));c.cleanData([f])}f.parentNode&&f.parentNode.removeChild(f)}return this},empty:function(){for(var a=0,b;(b=this[a])!=null;a++)for(b.nodeType===1&&c.cleanData(b.getElementsByTagName(\"*\"));b.firstChild;)b.removeChild(b.firstChild);\nreturn this},clone:function(a){var b=this.map(function(){if(!c.support.noCloneEvent&&!c.isXMLDoc(this)){var d=this.outerHTML,f=this.ownerDocument;if(!d){d=f.createElement(\"div\");d.appendChild(this.cloneNode(true));d=d.innerHTML}return c.clean([d.replace(Ja,\"\").replace(/=([^=\"'>\\s]+\\/)>/g,'=\"$1\">').replace(V,\"\")],f)[0]}else return this.cloneNode(true)});if(a===true){ra(this,b);ra(this.find(\"*\"),b.find(\"*\"))}return b},html:function(a){if(a===w)return this[0]&&this[0].nodeType===1?this[0].innerHTML.replace(Ja,\n\"\"):null;else if(typeof a===\"string\"&&!ta.test(a)&&(c.support.leadingWhitespace||!V.test(a))&&!F[(La.exec(a)||[\"\",\"\"])[1].toLowerCase()]){a=a.replace(Ka,Ma);try{for(var b=0,d=this.length;b<d;b++)if(this[b].nodeType===1){c.cleanData(this[b].getElementsByTagName(\"*\"));this[b].innerHTML=a}}catch(f){this.empty().append(a)}}else c.isFunction(a)?this.each(function(e){var j=c(this),i=j.html();j.empty().append(function(){return a.call(this,e,i)})}):this.empty().append(a);return this},replaceWith:function(a){if(this[0]&&\nthis[0].parentNode){if(c.isFunction(a))return this.each(function(b){var d=c(this),f=d.html();d.replaceWith(a.call(this,b,f))});if(typeof a!==\"string\")a=c(a).detach();return this.each(function(){var b=this.nextSibling,d=this.parentNode;c(this).remove();b?c(b).before(a):c(d).append(a)})}else return this.pushStack(c(c.isFunction(a)?a():a),\"replaceWith\",a)},detach:function(a){return this.remove(a,true)},domManip:function(a,b,d){function f(u){return c.nodeName(u,\"table\")?u.getElementsByTagName(\"tbody\")[0]||\nu.appendChild(u.ownerDocument.createElement(\"tbody\")):u}var e,j,i=a[0],o=[],k;if(!c.support.checkClone&&arguments.length===3&&typeof i===\"string\"&&ua.test(i))return this.each(function(){c(this).domManip(a,b,d,true)});if(c.isFunction(i))return this.each(function(u){var z=c(this);a[0]=i.call(this,u,b?z.html():w);z.domManip(a,b,d)});if(this[0]){e=i&&i.parentNode;e=c.support.parentNode&&e&&e.nodeType===11&&e.childNodes.length===this.length?{fragment:e}:sa(a,this,o);k=e.fragment;if(j=k.childNodes.length===\n1?(k=k.firstChild):k.firstChild){b=b&&c.nodeName(j,\"tr\");for(var n=0,r=this.length;n<r;n++)d.call(b?f(this[n],j):this[n],n>0||e.cacheable||this.length>1?k.cloneNode(true):k)}o.length&&c.each(o,Qa)}return this}});c.fragments={};c.each({appendTo:\"append\",prependTo:\"prepend\",insertBefore:\"before\",insertAfter:\"after\",replaceAll:\"replaceWith\"},function(a,b){c.fn[a]=function(d){var f=[];d=c(d);var e=this.length===1&&this[0].parentNode;if(e&&e.nodeType===11&&e.childNodes.length===1&&d.length===1){d[b](this[0]);\nreturn this}else{e=0;for(var j=d.length;e<j;e++){var i=(e>0?this.clone(true):this).get();c.fn[b].apply(c(d[e]),i);f=f.concat(i)}return this.pushStack(f,a,d.selector)}}});c.extend({clean:function(a,b,d,f){b=b||s;if(typeof b.createElement===\"undefined\")b=b.ownerDocument||b[0]&&b[0].ownerDocument||s;for(var e=[],j=0,i;(i=a[j])!=null;j++){if(typeof i===\"number\")i+=\"\";if(i){if(typeof i===\"string\"&&!jb.test(i))i=b.createTextNode(i);else if(typeof i===\"string\"){i=i.replace(Ka,Ma);var o=(La.exec(i)||[\"\",\n\"\"])[1].toLowerCase(),k=F[o]||F._default,n=k[0],r=b.createElement(\"div\");for(r.innerHTML=k[1]+i+k[2];n--;)r=r.lastChild;if(!c.support.tbody){n=ib.test(i);o=o===\"table\"&&!n?r.firstChild&&r.firstChild.childNodes:k[1]===\"<table>\"&&!n?r.childNodes:[];for(k=o.length-1;k>=0;--k)c.nodeName(o[k],\"tbody\")&&!o[k].childNodes.length&&o[k].parentNode.removeChild(o[k])}!c.support.leadingWhitespace&&V.test(i)&&r.insertBefore(b.createTextNode(V.exec(i)[0]),r.firstChild);i=r.childNodes}if(i.nodeType)e.push(i);else e=\nc.merge(e,i)}}if(d)for(j=0;e[j];j++)if(f&&c.nodeName(e[j],\"script\")&&(!e[j].type||e[j].type.toLowerCase()===\"text/javascript\"))f.push(e[j].parentNode?e[j].parentNode.removeChild(e[j]):e[j]);else{e[j].nodeType===1&&e.splice.apply(e,[j+1,0].concat(c.makeArray(e[j].getElementsByTagName(\"script\"))));d.appendChild(e[j])}return e},cleanData:function(a){for(var b,d,f=c.cache,e=c.event.special,j=c.support.deleteExpando,i=0,o;(o=a[i])!=null;i++)if(d=o[c.expando]){b=f[d];if(b.events)for(var k in b.events)e[k]?\nc.event.remove(o,k):Ca(o,k,b.handle);if(j)delete o[c.expando];else o.removeAttribute&&o.removeAttribute(c.expando);delete f[d]}}});var kb=/z-?index|font-?weight|opacity|zoom|line-?height/i,Na=/alpha\\([^)]*\\)/,Oa=/opacity=([^)]*)/,ha=/float/i,ia=/-([a-z])/ig,lb=/([A-Z])/g,mb=/^-?\\d+(?:px)?$/i,nb=/^-?\\d/,ob={position:\"absolute\",visibility:\"hidden\",display:\"block\"},pb=[\"Left\",\"Right\"],qb=[\"Top\",\"Bottom\"],rb=s.defaultView&&s.defaultView.getComputedStyle,Pa=c.support.cssFloat?\"cssFloat\":\"styleFloat\",ja=\nfunction(a,b){return b.toUpperCase()};c.fn.css=function(a,b){return X(this,a,b,true,function(d,f,e){if(e===w)return c.curCSS(d,f);if(typeof e===\"number\"&&!kb.test(f))e+=\"px\";c.style(d,f,e)})};c.extend({style:function(a,b,d){if(!a||a.nodeType===3||a.nodeType===8)return w;if((b===\"width\"||b===\"height\")&&parseFloat(d)<0)d=w;var f=a.style||a,e=d!==w;if(!c.support.opacity&&b===\"opacity\"){if(e){f.zoom=1;b=parseInt(d,10)+\"\"===\"NaN\"?\"\":\"alpha(opacity=\"+d*100+\")\";a=f.filter||c.curCSS(a,\"filter\")||\"\";f.filter=\nNa.test(a)?a.replace(Na,b):b}return f.filter&&f.filter.indexOf(\"opacity=\")>=0?parseFloat(Oa.exec(f.filter)[1])/100+\"\":\"\"}if(ha.test(b))b=Pa;b=b.replace(ia,ja);if(e)f[b]=d;return f[b]},css:function(a,b,d,f){if(b===\"width\"||b===\"height\"){var e,j=b===\"width\"?pb:qb;function i(){e=b===\"width\"?a.offsetWidth:a.offsetHeight;f!==\"border\"&&c.each(j,function(){f||(e-=parseFloat(c.curCSS(a,\"padding\"+this,true))||0);if(f===\"margin\")e+=parseFloat(c.curCSS(a,\"margin\"+this,true))||0;else e-=parseFloat(c.curCSS(a,\n\"border\"+this+\"Width\",true))||0})}a.offsetWidth!==0?i():c.swap(a,ob,i);return Math.max(0,Math.round(e))}return c.curCSS(a,b,d)},curCSS:function(a,b,d){var f,e=a.style;if(!c.support.opacity&&b===\"opacity\"&&a.currentStyle){f=Oa.test(a.currentStyle.filter||\"\")?parseFloat(RegExp.$1)/100+\"\":\"\";return f===\"\"?\"1\":f}if(ha.test(b))b=Pa;if(!d&&e&&e[b])f=e[b];else if(rb){if(ha.test(b))b=\"float\";b=b.replace(lb,\"-$1\").toLowerCase();e=a.ownerDocument.defaultView;if(!e)return null;if(a=e.getComputedStyle(a,null))f=\na.getPropertyValue(b);if(b===\"opacity\"&&f===\"\")f=\"1\"}else if(a.currentStyle){d=b.replace(ia,ja);f=a.currentStyle[b]||a.currentStyle[d];if(!mb.test(f)&&nb.test(f)){b=e.left;var j=a.runtimeStyle.left;a.runtimeStyle.left=a.currentStyle.left;e.left=d===\"fontSize\"?\"1em\":f||0;f=e.pixelLeft+\"px\";e.left=b;a.runtimeStyle.left=j}}return f},swap:function(a,b,d){var f={};for(var e in b){f[e]=a.style[e];a.style[e]=b[e]}d.call(a);for(e in b)a.style[e]=f[e]}});if(c.expr&&c.expr.filters){c.expr.filters.hidden=function(a){var b=\na.offsetWidth,d=a.offsetHeight,f=a.nodeName.toLowerCase()===\"tr\";return b===0&&d===0&&!f?true:b>0&&d>0&&!f?false:c.curCSS(a,\"display\")===\"none\"};c.expr.filters.visible=function(a){return!c.expr.filters.hidden(a)}}var sb=J(),tb=/<script(.|\\s)*?\\/script>/gi,ub=/select|textarea/i,vb=/color|date|datetime|email|hidden|month|number|password|range|search|tel|text|time|url|week/i,N=/=\\?(&|$)/,ka=/\\?/,wb=/(\\?|&)_=.*?(&|$)/,xb=/^(\\w+:)?\\/\\/([^\\/?#]+)/,yb=/%20/g,zb=c.fn.load;c.fn.extend({load:function(a,b,d){if(typeof a!==\n\"string\")return zb.call(this,a);else if(!this.length)return this;var f=a.indexOf(\" \");if(f>=0){var e=a.slice(f,a.length);a=a.slice(0,f)}f=\"GET\";if(b)if(c.isFunction(b)){d=b;b=null}else if(typeof b===\"object\"){b=c.param(b,c.ajaxSettings.traditional);f=\"POST\"}var j=this;c.ajax({url:a,type:f,dataType:\"html\",data:b,complete:function(i,o){if(o===\"success\"||o===\"notmodified\")j.html(e?c(\"<div />\").append(i.responseText.replace(tb,\"\")).find(e):i.responseText);d&&j.each(d,[i.responseText,o,i])}});return this},\nserialize:function(){return c.param(this.serializeArray())},serializeArray:function(){return this.map(function(){return this.elements?c.makeArray(this.elements):this}).filter(function(){return this.name&&!this.disabled&&(this.checked||ub.test(this.nodeName)||vb.test(this.type))}).map(function(a,b){a=c(this).val();return a==null?null:c.isArray(a)?c.map(a,function(d){return{name:b.name,value:d}}):{name:b.name,value:a}}).get()}});c.each(\"ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend\".split(\" \"),\nfunction(a,b){c.fn[b]=function(d){return this.bind(b,d)}});c.extend({get:function(a,b,d,f){if(c.isFunction(b)){f=f||d;d=b;b=null}return c.ajax({type:\"GET\",url:a,data:b,success:d,dataType:f})},getScript:function(a,b){return c.get(a,null,b,\"script\")},getJSON:function(a,b,d){return c.get(a,b,d,\"json\")},post:function(a,b,d,f){if(c.isFunction(b)){f=f||d;d=b;b={}}return c.ajax({type:\"POST\",url:a,data:b,success:d,dataType:f})},ajaxSetup:function(a){c.extend(c.ajaxSettings,a)},ajaxSettings:{url:location.href,\nglobal:true,type:\"GET\",contentType:\"application/x-www-form-urlencoded\",processData:true,async:true,xhr:A.XMLHttpRequest&&(A.location.protocol!==\"file:\"||!A.ActiveXObject)?function(){return new A.XMLHttpRequest}:function(){try{return new A.ActiveXObject(\"Microsoft.XMLHTTP\")}catch(a){}},accepts:{xml:\"application/xml, text/xml\",html:\"text/html\",script:\"text/javascript, application/javascript\",json:\"application/json, text/javascript\",text:\"text/plain\",_default:\"*/*\"}},lastModified:{},etag:{},ajax:function(a){function b(){e.success&&\ne.success.call(k,o,i,x);e.global&&f(\"ajaxSuccess\",[x,e])}function d(){e.complete&&e.complete.call(k,x,i);e.global&&f(\"ajaxComplete\",[x,e]);e.global&&!--c.active&&c.event.trigger(\"ajaxStop\")}function f(q,p){(e.context?c(e.context):c.event).trigger(q,p)}var e=c.extend(true,{},c.ajaxSettings,a),j,i,o,k=a&&a.context||e,n=e.type.toUpperCase();if(e.data&&e.processData&&typeof e.data!==\"string\")e.data=c.param(e.data,e.traditional);if(e.dataType===\"jsonp\"){if(n===\"GET\")N.test(e.url)||(e.url+=(ka.test(e.url)?\n\"&\":\"?\")+(e.jsonp||\"callback\")+\"=?\");else if(!e.data||!N.test(e.data))e.data=(e.data?e.data+\"&\":\"\")+(e.jsonp||\"callback\")+\"=?\";e.dataType=\"json\"}if(e.dataType===\"json\"&&(e.data&&N.test(e.data)||N.test(e.url))){j=e.jsonpCallback||\"jsonp\"+sb++;if(e.data)e.data=(e.data+\"\").replace(N,\"=\"+j+\"$1\");e.url=e.url.replace(N,\"=\"+j+\"$1\");e.dataType=\"script\";A[j]=A[j]||function(q){o=q;b();d();A[j]=w;try{delete A[j]}catch(p){}z&&z.removeChild(C)}}if(e.dataType===\"script\"&&e.cache===null)e.cache=false;if(e.cache===\nfalse&&n===\"GET\"){var r=J(),u=e.url.replace(wb,\"$1_=\"+r+\"$2\");e.url=u+(u===e.url?(ka.test(e.url)?\"&\":\"?\")+\"_=\"+r:\"\")}if(e.data&&n===\"GET\")e.url+=(ka.test(e.url)?\"&\":\"?\")+e.data;e.global&&!c.active++&&c.event.trigger(\"ajaxStart\");r=(r=xb.exec(e.url))&&(r[1]&&r[1]!==location.protocol||r[2]!==location.host);if(e.dataType===\"script\"&&n===\"GET\"&&r){var z=s.getElementsByTagName(\"head\")[0]||s.documentElement,C=s.createElement(\"script\");C.src=e.url;if(e.scriptCharset)C.charset=e.scriptCharset;if(!j){var B=\nfalse;C.onload=C.onreadystatechange=function(){if(!B&&(!this.readyState||this.readyState===\"loaded\"||this.readyState===\"complete\")){B=true;b();d();C.onload=C.onreadystatechange=null;z&&C.parentNode&&z.removeChild(C)}}}z.insertBefore(C,z.firstChild);return w}var E=false,x=e.xhr();if(x){e.username?x.open(n,e.url,e.async,e.username,e.password):x.open(n,e.url,e.async);try{if(e.data||a&&a.contentType)x.setRequestHeader(\"Content-Type\",e.contentType);if(e.ifModified){c.lastModified[e.url]&&x.setRequestHeader(\"If-Modified-Since\",\nc.lastModified[e.url]);c.etag[e.url]&&x.setRequestHeader(\"If-None-Match\",c.etag[e.url])}r||x.setRequestHeader(\"X-Requested-With\",\"XMLHttpRequest\");x.setRequestHeader(\"Accept\",e.dataType&&e.accepts[e.dataType]?e.accepts[e.dataType]+\", */*\":e.accepts._default)}catch(ga){}if(e.beforeSend&&e.beforeSend.call(k,x,e)===false){e.global&&!--c.active&&c.event.trigger(\"ajaxStop\");x.abort();return false}e.global&&f(\"ajaxSend\",[x,e]);var g=x.onreadystatechange=function(q){if(!x||x.readyState===0||q===\"abort\"){E||\nd();E=true;if(x)x.onreadystatechange=c.noop}else if(!E&&x&&(x.readyState===4||q===\"timeout\")){E=true;x.onreadystatechange=c.noop;i=q===\"timeout\"?\"timeout\":!c.httpSuccess(x)?\"error\":e.ifModified&&c.httpNotModified(x,e.url)?\"notmodified\":\"success\";var p;if(i===\"success\")try{o=c.httpData(x,e.dataType,e)}catch(v){i=\"parsererror\";p=v}if(i===\"success\"||i===\"notmodified\")j||b();else c.handleError(e,x,i,p);d();q===\"timeout\"&&x.abort();if(e.async)x=null}};try{var h=x.abort;x.abort=function(){x&&h.call(x);\ng(\"abort\")}}catch(l){}e.async&&e.timeout>0&&setTimeout(function(){x&&!E&&g(\"timeout\")},e.timeout);try{x.send(n===\"POST\"||n===\"PUT\"||n===\"DELETE\"?e.data:null)}catch(m){c.handleError(e,x,null,m);d()}e.async||g();return x}},handleError:function(a,b,d,f){if(a.error)a.error.call(a.context||a,b,d,f);if(a.global)(a.context?c(a.context):c.event).trigger(\"ajaxError\",[b,a,f])},active:0,httpSuccess:function(a){try{return!a.status&&location.protocol===\"file:\"||a.status>=200&&a.status<300||a.status===304||a.status===\n1223||a.status===0}catch(b){}return false},httpNotModified:function(a,b){var d=a.getResponseHeader(\"Last-Modified\"),f=a.getResponseHeader(\"Etag\");if(d)c.lastModified[b]=d;if(f)c.etag[b]=f;return a.status===304||a.status===0},httpData:function(a,b,d){var f=a.getResponseHeader(\"content-type\")||\"\",e=b===\"xml\"||!b&&f.indexOf(\"xml\")>=0;a=e?a.responseXML:a.responseText;e&&a.documentElement.nodeName===\"parsererror\"&&c.error(\"parsererror\");if(d&&d.dataFilter)a=d.dataFilter(a,b);if(typeof a===\"string\")if(b===\n\"json\"||!b&&f.indexOf(\"json\")>=0)a=c.parseJSON(a);else if(b===\"script\"||!b&&f.indexOf(\"javascript\")>=0)c.globalEval(a);return a},param:function(a,b){function d(i,o){if(c.isArray(o))c.each(o,function(k,n){b||/\\[\\]$/.test(i)?f(i,n):d(i+\"[\"+(typeof n===\"object\"||c.isArray(n)?k:\"\")+\"]\",n)});else!b&&o!=null&&typeof o===\"object\"?c.each(o,function(k,n){d(i+\"[\"+k+\"]\",n)}):f(i,o)}function f(i,o){o=c.isFunction(o)?o():o;e[e.length]=encodeURIComponent(i)+\"=\"+encodeURIComponent(o)}var e=[];if(b===w)b=c.ajaxSettings.traditional;\nif(c.isArray(a)||a.jquery)c.each(a,function(){f(this.name,this.value)});else for(var j in a)d(j,a[j]);return e.join(\"&\").replace(yb,\"+\")}});var la={},Ab=/toggle|show|hide/,Bb=/^([+-]=)?([\\d+-.]+)(.*)$/,W,va=[[\"height\",\"marginTop\",\"marginBottom\",\"paddingTop\",\"paddingBottom\"],[\"width\",\"marginLeft\",\"marginRight\",\"paddingLeft\",\"paddingRight\"],[\"opacity\"]];c.fn.extend({show:function(a,b){if(a||a===0)return this.animate(K(\"show\",3),a,b);else{a=0;for(b=this.length;a<b;a++){var d=c.data(this[a],\"olddisplay\");\nthis[a].style.display=d||\"\";if(c.css(this[a],\"display\")===\"none\"){d=this[a].nodeName;var f;if(la[d])f=la[d];else{var e=c(\"<\"+d+\" />\").appendTo(\"body\");f=e.css(\"display\");if(f===\"none\")f=\"block\";e.remove();la[d]=f}c.data(this[a],\"olddisplay\",f)}}a=0;for(b=this.length;a<b;a++)this[a].style.display=c.data(this[a],\"olddisplay\")||\"\";return this}},hide:function(a,b){if(a||a===0)return this.animate(K(\"hide\",3),a,b);else{a=0;for(b=this.length;a<b;a++){var d=c.data(this[a],\"olddisplay\");!d&&d!==\"none\"&&c.data(this[a],\n\"olddisplay\",c.css(this[a],\"display\"))}a=0;for(b=this.length;a<b;a++)this[a].style.display=\"none\";return this}},_toggle:c.fn.toggle,toggle:function(a,b){var d=typeof a===\"boolean\";if(c.isFunction(a)&&c.isFunction(b))this._toggle.apply(this,arguments);else a==null||d?this.each(function(){var f=d?a:c(this).is(\":hidden\");c(this)[f?\"show\":\"hide\"]()}):this.animate(K(\"toggle\",3),a,b);return this},fadeTo:function(a,b,d){return this.filter(\":hidden\").css(\"opacity\",0).show().end().animate({opacity:b},a,d)},\nanimate:function(a,b,d,f){var e=c.speed(b,d,f);if(c.isEmptyObject(a))return this.each(e.complete);return this[e.queue===false?\"each\":\"queue\"](function(){var j=c.extend({},e),i,o=this.nodeType===1&&c(this).is(\":hidden\"),k=this;for(i in a){var n=i.replace(ia,ja);if(i!==n){a[n]=a[i];delete a[i];i=n}if(a[i]===\"hide\"&&o||a[i]===\"show\"&&!o)return j.complete.call(this);if((i===\"height\"||i===\"width\")&&this.style){j.display=c.css(this,\"display\");j.overflow=this.style.overflow}if(c.isArray(a[i])){(j.specialEasing=\nj.specialEasing||{})[i]=a[i][1];a[i]=a[i][0]}}if(j.overflow!=null)this.style.overflow=\"hidden\";j.curAnim=c.extend({},a);c.each(a,function(r,u){var z=new c.fx(k,j,r);if(Ab.test(u))z[u===\"toggle\"?o?\"show\":\"hide\":u](a);else{var C=Bb.exec(u),B=z.cur(true)||0;if(C){u=parseFloat(C[2]);var E=C[3]||\"px\";if(E!==\"px\"){k.style[r]=(u||1)+E;B=(u||1)/z.cur(true)*B;k.style[r]=B+E}if(C[1])u=(C[1]===\"-=\"?-1:1)*u+B;z.custom(B,u,E)}else z.custom(B,u,\"\")}});return true})},stop:function(a,b){var d=c.timers;a&&this.queue([]);\nthis.each(function(){for(var f=d.length-1;f>=0;f--)if(d[f].elem===this){b&&d[f](true);d.splice(f,1)}});b||this.dequeue();return this}});c.each({slideDown:K(\"show\",1),slideUp:K(\"hide\",1),slideToggle:K(\"toggle\",1),fadeIn:{opacity:\"show\"},fadeOut:{opacity:\"hide\"}},function(a,b){c.fn[a]=function(d,f){return this.animate(b,d,f)}});c.extend({speed:function(a,b,d){var f=a&&typeof a===\"object\"?a:{complete:d||!d&&b||c.isFunction(a)&&a,duration:a,easing:d&&b||b&&!c.isFunction(b)&&b};f.duration=c.fx.off?0:typeof f.duration===\n\"number\"?f.duration:c.fx.speeds[f.duration]||c.fx.speeds._default;f.old=f.complete;f.complete=function(){f.queue!==false&&c(this).dequeue();c.isFunction(f.old)&&f.old.call(this)};return f},easing:{linear:function(a,b,d,f){return d+f*a},swing:function(a,b,d,f){return(-Math.cos(a*Math.PI)/2+0.5)*f+d}},timers:[],fx:function(a,b,d){this.options=b;this.elem=a;this.prop=d;if(!b.orig)b.orig={}}});c.fx.prototype={update:function(){this.options.step&&this.options.step.call(this.elem,this.now,this);(c.fx.step[this.prop]||\nc.fx.step._default)(this);if((this.prop===\"height\"||this.prop===\"width\")&&this.elem.style)this.elem.style.display=\"block\"},cur:function(a){if(this.elem[this.prop]!=null&&(!this.elem.style||this.elem.style[this.prop]==null))return this.elem[this.prop];return(a=parseFloat(c.css(this.elem,this.prop,a)))&&a>-10000?a:parseFloat(c.curCSS(this.elem,this.prop))||0},custom:function(a,b,d){function f(j){return e.step(j)}this.startTime=J();this.start=a;this.end=b;this.unit=d||this.unit||\"px\";this.now=this.start;\nthis.pos=this.state=0;var e=this;f.elem=this.elem;if(f()&&c.timers.push(f)&&!W)W=setInterval(c.fx.tick,13)},show:function(){this.options.orig[this.prop]=c.style(this.elem,this.prop);this.options.show=true;this.custom(this.prop===\"width\"||this.prop===\"height\"?1:0,this.cur());c(this.elem).show()},hide:function(){this.options.orig[this.prop]=c.style(this.elem,this.prop);this.options.hide=true;this.custom(this.cur(),0)},step:function(a){var b=J(),d=true;if(a||b>=this.options.duration+this.startTime){this.now=\nthis.end;this.pos=this.state=1;this.update();this.options.curAnim[this.prop]=true;for(var f in this.options.curAnim)if(this.options.curAnim[f]!==true)d=false;if(d){if(this.options.display!=null){this.elem.style.overflow=this.options.overflow;a=c.data(this.elem,\"olddisplay\");this.elem.style.display=a?a:this.options.display;if(c.css(this.elem,\"display\")===\"none\")this.elem.style.display=\"block\"}this.options.hide&&c(this.elem).hide();if(this.options.hide||this.options.show)for(var e in this.options.curAnim)c.style(this.elem,\ne,this.options.orig[e]);this.options.complete.call(this.elem)}return false}else{e=b-this.startTime;this.state=e/this.options.duration;a=this.options.easing||(c.easing.swing?\"swing\":\"linear\");this.pos=c.easing[this.options.specialEasing&&this.options.specialEasing[this.prop]||a](this.state,e,0,1,this.options.duration);this.now=this.start+(this.end-this.start)*this.pos;this.update()}return true}};c.extend(c.fx,{tick:function(){for(var a=c.timers,b=0;b<a.length;b++)a[b]()||a.splice(b--,1);a.length||\nc.fx.stop()},stop:function(){clearInterval(W);W=null},speeds:{slow:600,fast:200,_default:400},step:{opacity:function(a){c.style(a.elem,\"opacity\",a.now)},_default:function(a){if(a.elem.style&&a.elem.style[a.prop]!=null)a.elem.style[a.prop]=(a.prop===\"width\"||a.prop===\"height\"?Math.max(0,a.now):a.now)+a.unit;else a.elem[a.prop]=a.now}}});if(c.expr&&c.expr.filters)c.expr.filters.animated=function(a){return c.grep(c.timers,function(b){return a===b.elem}).length};c.fn.offset=\"getBoundingClientRect\"in s.documentElement?\nfunction(a){var b=this[0];if(a)return this.each(function(e){c.offset.setOffset(this,a,e)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return c.offset.bodyOffset(b);var d=b.getBoundingClientRect(),f=b.ownerDocument;b=f.body;f=f.documentElement;return{top:d.top+(self.pageYOffset||c.support.boxModel&&f.scrollTop||b.scrollTop)-(f.clientTop||b.clientTop||0),left:d.left+(self.pageXOffset||c.support.boxModel&&f.scrollLeft||b.scrollLeft)-(f.clientLeft||b.clientLeft||0)}}:function(a){var b=\nthis[0];if(a)return this.each(function(r){c.offset.setOffset(this,a,r)});if(!b||!b.ownerDocument)return null;if(b===b.ownerDocument.body)return c.offset.bodyOffset(b);c.offset.initialize();var d=b.offsetParent,f=b,e=b.ownerDocument,j,i=e.documentElement,o=e.body;f=(e=e.defaultView)?e.getComputedStyle(b,null):b.currentStyle;for(var k=b.offsetTop,n=b.offsetLeft;(b=b.parentNode)&&b!==o&&b!==i;){if(c.offset.supportsFixedPosition&&f.position===\"fixed\")break;j=e?e.getComputedStyle(b,null):b.currentStyle;\nk-=b.scrollTop;n-=b.scrollLeft;if(b===d){k+=b.offsetTop;n+=b.offsetLeft;if(c.offset.doesNotAddBorder&&!(c.offset.doesAddBorderForTableAndCells&&/^t(able|d|h)$/i.test(b.nodeName))){k+=parseFloat(j.borderTopWidth)||0;n+=parseFloat(j.borderLeftWidth)||0}f=d;d=b.offsetParent}if(c.offset.subtractsBorderForOverflowNotVisible&&j.overflow!==\"visible\"){k+=parseFloat(j.borderTopWidth)||0;n+=parseFloat(j.borderLeftWidth)||0}f=j}if(f.position===\"relative\"||f.position===\"static\"){k+=o.offsetTop;n+=o.offsetLeft}if(c.offset.supportsFixedPosition&&\nf.position===\"fixed\"){k+=Math.max(i.scrollTop,o.scrollTop);n+=Math.max(i.scrollLeft,o.scrollLeft)}return{top:k,left:n}};c.offset={initialize:function(){var a=s.body,b=s.createElement(\"div\"),d,f,e,j=parseFloat(c.curCSS(a,\"marginTop\",true))||0;c.extend(b.style,{position:\"absolute\",top:0,left:0,margin:0,border:0,width:\"1px\",height:\"1px\",visibility:\"hidden\"});b.innerHTML=\"<div style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;'><div></div></div><table style='position:absolute;top:0;left:0;margin:0;border:5px solid #000;padding:0;width:1px;height:1px;' cellpadding='0' cellspacing='0'><tr><td></td></tr></table>\";\na.insertBefore(b,a.firstChild);d=b.firstChild;f=d.firstChild;e=d.nextSibling.firstChild.firstChild;this.doesNotAddBorder=f.offsetTop!==5;this.doesAddBorderForTableAndCells=e.offsetTop===5;f.style.position=\"fixed\";f.style.top=\"20px\";this.supportsFixedPosition=f.offsetTop===20||f.offsetTop===15;f.style.position=f.style.top=\"\";d.style.overflow=\"hidden\";d.style.position=\"relative\";this.subtractsBorderForOverflowNotVisible=f.offsetTop===-5;this.doesNotIncludeMarginInBodyOffset=a.offsetTop!==j;a.removeChild(b);\nc.offset.initialize=c.noop},bodyOffset:function(a){var b=a.offsetTop,d=a.offsetLeft;c.offset.initialize();if(c.offset.doesNotIncludeMarginInBodyOffset){b+=parseFloat(c.curCSS(a,\"marginTop\",true))||0;d+=parseFloat(c.curCSS(a,\"marginLeft\",true))||0}return{top:b,left:d}},setOffset:function(a,b,d){if(/static/.test(c.curCSS(a,\"position\")))a.style.position=\"relative\";var f=c(a),e=f.offset(),j=parseInt(c.curCSS(a,\"top\",true),10)||0,i=parseInt(c.curCSS(a,\"left\",true),10)||0;if(c.isFunction(b))b=b.call(a,\nd,e);d={top:b.top-e.top+j,left:b.left-e.left+i};\"using\"in b?b.using.call(a,d):f.css(d)}};c.fn.extend({position:function(){if(!this[0])return null;var a=this[0],b=this.offsetParent(),d=this.offset(),f=/^body|html$/i.test(b[0].nodeName)?{top:0,left:0}:b.offset();d.top-=parseFloat(c.curCSS(a,\"marginTop\",true))||0;d.left-=parseFloat(c.curCSS(a,\"marginLeft\",true))||0;f.top+=parseFloat(c.curCSS(b[0],\"borderTopWidth\",true))||0;f.left+=parseFloat(c.curCSS(b[0],\"borderLeftWidth\",true))||0;return{top:d.top-\nf.top,left:d.left-f.left}},offsetParent:function(){return this.map(function(){for(var a=this.offsetParent||s.body;a&&!/^body|html$/i.test(a.nodeName)&&c.css(a,\"position\")===\"static\";)a=a.offsetParent;return a})}});c.each([\"Left\",\"Top\"],function(a,b){var d=\"scroll\"+b;c.fn[d]=function(f){var e=this[0],j;if(!e)return null;if(f!==w)return this.each(function(){if(j=wa(this))j.scrollTo(!a?f:c(j).scrollLeft(),a?f:c(j).scrollTop());else this[d]=f});else return(j=wa(e))?\"pageXOffset\"in j?j[a?\"pageYOffset\":\n\"pageXOffset\"]:c.support.boxModel&&j.document.documentElement[d]||j.document.body[d]:e[d]}});c.each([\"Height\",\"Width\"],function(a,b){var d=b.toLowerCase();c.fn[\"inner\"+b]=function(){return this[0]?c.css(this[0],d,false,\"padding\"):null};c.fn[\"outer\"+b]=function(f){return this[0]?c.css(this[0],d,false,f?\"margin\":\"border\"):null};c.fn[d]=function(f){var e=this[0];if(!e)return f==null?null:this;if(c.isFunction(f))return this.each(function(j){var i=c(this);i[d](f.call(this,j,i[d]()))});return\"scrollTo\"in\ne&&e.document?e.document.compatMode===\"CSS1Compat\"&&e.document.documentElement[\"client\"+b]||e.document.body[\"client\"+b]:e.nodeType===9?Math.max(e.documentElement[\"client\"+b],e.body[\"scroll\"+b],e.documentElement[\"scroll\"+b],e.body[\"offset\"+b],e.documentElement[\"offset\"+b]):f===w?c.css(e,d):this.css(d,typeof f===\"string\"?f:f+\"px\")}});A.jQuery=A.$=c})(window);\n"},"lib/shomen/cli.rb":{"!":"script","name":"cli.rb","path":"lib/shomen/cli.rb","mtime":"2011-09-03 18:20:28 -0400","header":"","footer":"","source":"require 'optparse'\nrequire 'yaml'\nrequire 'json'\n\nmodule Shomen\n\n  # Command line interface.\n  #\n  def self.cli(*argv)\n    options = {}\n    options[:adapter] = :yard\n    options[:format]  = :json\n    options[:force]   = false\n    options[:clear]   = false\n\n    cli_options(options).parse!(argv)\n\n    if !options[:force] && !root?\n      $stderr.puts \"Not a project directory. Use --force to override.\"\n      exit -1\n    end\n\n    if !options[:adapter]\n      options[:adapter] = :yard if File.directory?('.yardoc')\n    end\n\n    case options[:adapter]\n    when :yard, :y\n      require 'shomen/yard'\n      yard = Shomen::YardAdaptor.new(options)\n      yard.generate\n      if options[:format] == :yaml\n        puts yard.table.to_yaml\n      else\n        puts yard.table.to_json\n      end\n    when :tomdoc, :t\n      # TODO\n    when :rdoc, :r\n      # TODO\n    when :ri\n      # TODO\n    else\n      abort \"unrecognized adapter -- #{options[:adapter]}\"\n    end\n\n  end\n\n  def self.cli_options(options)\n    OptionParser.new do |opt|\n      opt.on('-a', '--adapter NAME') do |arg|\n        options[:adapter] = arg.to_sym\n      end\n      opt.on('-y', '--yaml', 'output YAML instead of JSON') do\n        options[:format] = :yaml\n      end\n      opt.on('-c', '--clear') do\n        options[:clear] = true\n      end\n      opt.on('-f', '--force') do\n        options[:force] = true\n      end\n      opt.on_tail('-D', '--debug', 'run with $DEBUG set to true') do\n        $DEBUG = true\n      end\n      opt.on_tail('--help') do\n        puts opt\n        exit 0\n      end\n    end\n  end\n\n  #\n  def self.root?\n    root = false\n    root = true if File.exist?('.ruby')\n    root = true if File.exist?('.yardoc')\n    root\n  end\n\nend\n"},"lib/shomen.yml":{"!":"file","name":"shomen.yml","path":"lib/shomen.yml","mtime":"2011-04-13 22:04:04 -0400","text":"--- \nname: shomen\nspec_version: 1.0.0\ntitle: Shomen\nrequires: \n- group: []\n\n  name: rdoc\n  version: 3~\n- group: \n  - build\n  name: syckle\n  version: 0+\nresources: \n  repo: git://github.com/proutils/shomen.git\n  home: http://proutils.github.com/shomen\n  work: http://github.com/proutils/shomen\nmanifest: \n- lib/rdoc/discover.rb\n- lib/shomen/hyper/index.html\n- lib/shomen/hyper/jquery.jqote2.min.js\n- lib/shomen/hyper/jquery.js\n- lib/shomen/hyper/rdoc.json\n- lib/shomen/rdoc/generator.rb\n- lib/shomen.yml\n- Rakefile\n- HISTORY.rdoc\n- Profile\n- README.rdoc\n- NOTES.rdoc\n- Syckfile\n- Version\nversion: 0.1.0\ndescription: Shomen defines a standardized documentaiton format for Ruby programs which is used by other systems as a common source for rendering.\nsummary: Standardized Ruby Documentation Format\nauthors: \n- Thomas Sawyer <transfire@gmail.com>\ncreated: 2010-07-01\n"},"HISTORY.rdoc":{"!":"file","name":"HISTORY.rdoc","path":"HISTORY.rdoc","mtime":"2010-09-27 14:02:44 -0400","text":"= RELEASE HISTORY\n\n== 0.1.0 | 2010-09-27\n\nThis is the first release of the RDoc Shomen Adapter. At this stage it\nis of course likely that a few field changes will occur before the\nthe Shomen standard is finalizied, but it's is now in solid enough a\nstate to begin building documentation generators and webapps against.\n\nChanges:\n\n* Happy Release Day! You've been a long time in the making.\n\n"},"README.rdoc":{"!":"file","name":"README.rdoc","path":"README.rdoc","mtime":"2011-09-03 18:27:11 -0400","text":"= Shomen Documentation Specification\n\n== Description\n\nShomen is an intermediary documentation model catered to Ruby. The \nspecification is a flat mapping, without internal referencing, suitable for\nstorage in both YAML and JSON formats.\n\n== Why?\n\nBy using a standard intermediary format, documentation parsers need only concern\nthemselves with a single output target. And documentation templates in turn only\nneed to concern themselves with a single input format to use regardless of the\nparsing system that was used to generate it.\n\n== Design By Example\n\nWe will use the following script, which would be located at 'lib/musicstore/song.rb'\nin a project, as an example to elucidate the specification.\n\n  # song.rb (c) 2010 John Doe\n\n  require 'fileutils'\n\n  # Toplevel namespace for my MusicStore application.\n  module MusicStore\n\n    # Where to store music store's configuration.\n    CONFIG_DIRECTORY = \"~/.config/musicstore\"\n\n    # Overridable setting for configuration directory.\n    def self.config_directory\n      @@config_directory ||= CONFIG_DIRECTORY\n    end\n\n    # Common methods for MusicStore classes.\n    module MusicMixin\n    end\n\n    # This is the Song class.\n    class Song\n      include MusicMixin\n\n      # Returns a String of the artists name.\n      def artist    \n      end\n\n      # Play the song.\n      # \n      # seconds - number of seconds to playback\n      #\n      # Returns Integer of forked process id.\n      def play(seconds=nil)\n      end\n\n    end\n\n  end\n\n== Types\n\nThe Shomen specification is a mapping of typed entries. The keys to the\nmapping are uniqe identifiers.\n\n=== Metadata Type\n\nThe +metadata+ entry provides general information about the library or\napplication being documented, such as it's name, description and current\nversion. There will be only one +metadata+ entry in a given Shomen file,\nthus it's index is the fixed key, \"<code>(metadata)</code>\".\n\n  \"(metadata)\": {\n      \"!\"           : \"metadata\",\n      \"name\"        : \"song\",\n      \"title\"       : \"Song Program\",\n      \"summary\"     : \"Program for Playing Songs\",\n      \"description\" : \"Play songs the easy way using song.rb!\",\n      \"created\"     : \"!date 2010-10-10\"\n  }\n\n=== File Type\n\nThe +file+ type is used to house non-Ruby documentation documents, such as\na README. It's structure is very basic.\n\n  \"/README.rdoc\": {\n      \"!\"           : \"file\"\n      \"name\"        : \"README.rdoc\",\n      \"path\"        : \"\",\n      \"mtime\"       : \"2010-10-10 11:11:10\",\n      \"text\"        : \"= Music Store README\\n ...\"\n  }\n\n=== Script Type\n\nThe +script+ type provides information about a ruby program _file_.\n\n  \"/musicstore/song.rb\": {\n      \"!\"           : \"script\",\n      \"name\"        : \"song.rb\",\n      \"path\"        : \"musicstore\",\n      \"loadpath\"    : \"lib\",\n      \"mtime\"       : \"2010-10-10 11:11:10\",\n      \"header\"      : \"song.rb (c) 2010 John Doe\",\n      \"footer\"      : \"\",\n      \"requires\"    : [\"fileutils\"],\n      \"constants\"   : [\"MusicStore::CONFIG_DIRECTORY\"],\n      \"modules\"     : [\"MusicStore\", \"MusicStore::MusicMixin\"],\n      \"classes\"     : [\"MusicStore::Song\"],\n      \"functions\"   : [\"MusicStore.config_directory\"],\n      \"methods\"     : [\"MusicStore::MusicMixin#play\", \"MusicStore::MusicMixin#artist\"]\n  }\n\n=== Module Type\n\nThe +module+ type describes a Ruby Module.\n\n  \"MusicStore\": {\n      \"!\"           : \"module\",\n      \"name\"        : \"MusicStore\",\n      \"namespace\"   : \"\",\n      \"includes\"    : [],\n      \"extended\"    : [],\n      \"comment\"     : \"Common methods for MusicStore classes.\",\n      \"constants\"   : [\"MusicStore::CONFIG_DIRECTORY\"],\n      \"modules\"     : [\"MusicStore::MusicMixin\"],\n      \"classes\"     : [\"MusicStore::Song\"],\n      \"functions\"   : [],\n      \"methods\"     : []\n  }\n\n=== Class Type\n\nThe +class+ type describes a Ruby Class.\n\n  \"MusicStore::Song\": {\n      \"!\"           : \"class\",\n      \"name\"        : \"Song\",\n      \"namespace\"   : \"MusicStore\",\n      \"includes\"    : [\"MusicStore::SongMixin\"],\n      \"extended\"    : [],\n      \"comment\"     : \"This is the Song class.\",\n      \"constants\"   : [],\n      \"modules\"     : [],\n      \"classes\"     : [],\n      \"functions\"   : [],\n      \"methods\"     : [\"MusicStore::Song#artist\", \"MusicStore::Song#play\"]\n  }\n\nWe left the +methods+ entry with an elipses as it would contain method-type\nentries for each of it's two methods. An example of which you can see below.\n\n=== Constant Type\n\nThe +constant+ type describes a constant.\n\n  \"MusicStore::CONFIG_DIRECTORY\": {\n      \"!\"           : \"constant\",\n      \"name\"        : \"CONFIG_DIRECTORY\",\n      \"namespace\"   : \"MusicStore\"\n      \"comment\"     : \"Where to store music store's configuration.\"\n  }\n\n=== Method Type\n\nThe +method+ type describes an instance method.\n\n  \"MusicStore::Song#play\": {\n      \"!\"           : \"method\",\n      \"name\"        : \"play\",\n      \"namespace\"   : \"MusicStore::Song\",\n      \"comment\"     : \"Play the song.\",\n      \"access\"      : \"public\"\n      \"image\"       : \"(seconds=nil)\",\n      \"interface\"   : [\n        'play(seconds=nil)'\n      ],\n      \"arguments\"   : [\n        {\n          \"name\"    : \"seconds\",\n          \"comment\" : \"number of seconds to playback\"\n        }\n      ]\n      \"parameters\"  : []\n      \"returns\"     : [\n        {\n          \"type\"    : \"Integer\",\n          \"comment\" : \"forked process id\"\n        }\n      ]\n  }\n\n=== Function Type\n\nThe +function+ type describes a class/module singleton method. The use of\nthe term \"function\" might seem an odd one, but it actually a term Matz has\nused as a way to better conceptualize the character of class singleton\nmethods.\n\n  \"MusicStore::Song.config_directory\": {\n      \"!\"           : \"function\",\n      \"name\"        : \"config_directory\",\n      \"namespace\"   : \"MusicStore\",\n      \"comment\"     : \"Overridable setting for configuration directory.\",\n      \"access\"      : \"public\",\n      \"image\"       : \"\",\n      \"interface\"   : [],\n      \"arguments\"   : [],\n      \"parameters\"  : [],\n      \"returns\"     : [\n        {\n          \"type\"    : \"String\",\n          \"comment\" : \"configuration directory\"\n        }\n      ]\n  }\n\n== Fields\n\n=== name\n\nEvery entry type has a name field. This simply give the local name of\nthe entry.\n\n=== namepace\n\nEvery entry type, with the expection of +script+, has a +namespace+.\nThis gives the \"nesting\" of the entry within the code.\n\n=== comment\n\nEvery entry has a +comment+ field, which store the comment given just\nbefore the actual code for the entry.\n\n=== constants\n\nUsed by scripts, modules and classes, provides a list of constants\nfound within it's context (excluding modules and classes, though they\nare technically constant references too).\n\n=== modules\n\nUsed by scripts, modules and classes, provides a list of modules\nfound within it's context.\n\n=== classes\n\nUsed by scripts, modules and classes, provides a list of classes\nfound within it's context.\n\n=== methods\n\nUsed by scripts, modules and classes, provides a list of instance methods\nfound within it's context.\n\n=== functions\n\nUsed by scripts, modules and classes, provides a list of class-singleton\nmethods found within it's context.\n\n=== access\n\nThe +method+ and +function+ types have +access+ types which can either be\n+public+, +protected+ or +private+.\n\n=== image\n\nThe +image+ is the literal interface of a method or function's\nargument interface, e.g.\n\n  'x(*args)'\n\n=== interface\n\nThe +interface+ field provides a list of _intendend_ interfaces for a\nmethod or function, as a subset of the literal interface.\n\nFor example:\n\n  def x(*args)\n    opts = Hash === args.last ? args.pop : {}\n    name = args.first\n    ...\n  end\n\nMight document the interface as:\n\n  'interface': [\n    'x(name, opts={})'\n  ]\n\n\n=== arguments\n\nThe +arguments+ field is used by the +method+ and +function+ types to provide\ndetails about interface arguments.\n\n  'arguments': [\n    { \n      'name': 'name',\n      'comment': 'name of x'\n    },\n    {\n      'name': 'opts',\n      'comment': 'runtime options for x'\n    }\n  ]\n\n=== parameters\n\nThe +parametes+ field is used by the +method+ and +function+ types to provide\ndetails about an interface's named paraemters. For example in the above +x+\nmethod, +opts+ is used for named parameters. If there are specifically recognized\noptions, the +parameters+ field can be used to descrip them.\n\n  'parameters': [\n    { \n      'name': 'foo',\n      'comment': 'foo description',\n      'for': 'opts'\n    }\n  ]\n\nNotice that arguments and parameters do not have a direct linkage to the \ninterface they describe. While techincally, we could make +arguments+ and \n+parameters+ a subfield of the +interface+ as a mapping, available documentation\ntools do not typically provide means for describing that level of detail.\nThe use of unique argument names is generally sufficient to communicate the\nrelationship. The +parameters+ field provides the +for+ subfield as an option\nto make that relationship clearer.\n\n=== returns\n\nThe +returns+ field, used by the +method+ and +function+ type, is a sequence of\npossible return values. Ususally there is only one return value, but it is \npossible for there to be multiple ruturn values based on conditions\nwithin the method. For example, a method might return a filename if a file\nexists, but +nil+ otherwise, in which case the +returns+ field might look like:\n\n  'returns': [\n    {\n      'type': 'String'\n      'comment': 'filename'\n    },\n    {\n      'type': 'nil',\n      'comment': 'if no file is found'\n    }\n  }\n\n\n== Guidelines for Documentation Parsers\n\nNot all documentation systems will be able to produce all the information\nthat the Shomen standard supports. For instance RDoc doesn't have any means\nof demarking return values. But this is to be expected. The documentaion\nsystem should simply produce as much of the information as it can. Generators\nhave the responsiblity of gracefully handling missing information.\n\n\n== Guidelines for Documentation Generators\n\nAs mentioned above, documentation generators need to gracefully hand missing\ninformation.\n\n\n== COPYING\n\nCopyright (c) 2010 Thomas Sawyer\n\nShomen is distributed under the same terms as Ruby.\n\n"},"NOTES.rdoc":{"!":"file","name":"NOTES.rdoc","path":"NOTES.rdoc","mtime":"2010-09-27 13:26:29 -0400","text":"= DEVELOPER NOTES\n\n== RDoc Dependency\n\nThough this could probably work with RDoc 2.4.2+, I have set the dependency to 2.5~.\n"}}
